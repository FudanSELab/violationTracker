<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.fudan.issueservice.mapper.ScanResultMapper">
    <resultMap id="commit" type="cn.edu.fudan.issueservice.domain.dbo.Commit">
        <id property="commitId" column="commit_id"/>
        <result property="developer" column="developer"/>
        <result property="commitTime" column="commit_date"/>
        <result property="repoId" column="repo_uuid"/>
        <result property="parentCommits" column="parent_commit"/>
    </resultMap>
    <insert id="addOneScanResult" parameterType="cn.edu.fudan.issueservice.domain.dbo.ScanResult">
        insert into scan_result
        (category,
        repo_uuid,
        scan_date,
        commit_id,
        commit_date,
        developer,
        new_count,
        eliminated_count,
        remaining_count)
        values (#{category},
        #{repoId},
        #{scanDate},
        #{commitId},
        #{commitDate},
        #{developer},
        #{newCount},
        #{eliminatedCount},
        #{remainingCount})
    </insert>

    <insert id="addScanResults" parameterType="java.util.List">
        insert into scan_result
        (category,
        repo_uuid,
        scan_date,
        commit_id,
        commit_date,
        developer,
        new_count,
        eliminated_count,
        reopen_count,
        remaining_count,
        parent_commit_id)
        values
        <foreach collection="scanResults" item="item" index="index" separator=",">
            (
            #{item.category},
            #{item.repoId},
            #{item.scanDate},
            #{item.commitId},
            #{item.commitDate},
            #{item.developer},
            #{item.newCount},
            #{item.eliminatedCount},
            #{item.reopenCount},
            #{item.remainingCount},
            #{item.parentCommitId}
            )
        </foreach>

    </insert>

    <delete id="deleteScanResultsByRepoIdAndCategory">
        delete
        from scan_result
        where repo_uuid = #{repo_uuid}
        and category = #{category}
    </delete>

    <delete id="deleteScanResultsByRepoUuid">
        delete
        from scan_result
        where repo_uuid = #{repoUuid}
    </delete>

    <select id="getRepoIssueCounts" parameterType="String" resultType="java.util.HashMap">
        SELECT
        `commit_date` AS date,
        SUM( new_count ) AS newIssueCount,
        SUM( eliminated_count ) AS eliminatedIssueCount,
        SUBSTRING_INDEX( GROUP_CONCAT( `remaining_count` ORDER BY `id` DESC SEPARATOR '||' ), '||', 1
        )remainingIssueCount
        FROM
        scan_result
        where DATE(commit_date) BETWEEN #{since} AND #{until}
        <if test="repoUuids != null and repoUuids.size > 0">
            AND repo_uuid IN
            <foreach collection="repoUuids" separator="," open="(" close=")" item="repoUuid">
                #{repoUuid}
            </foreach>
        </if>
        <if test="developer != null and developer != ''">
            and developer = #{developer}
        </if>
        <if test="category != null">
            and category = #{category}
        </if>
        GROUP BY `date`
    </select>

    <select id="findFirstDateByRepo" parameterType="String" resultType="String">
        SELECT commit_date FROM scan_result
        <where>
            <if test="repoUuids != null and repoUuids.size > 0">
                repo_uuid IN
                <foreach collection="repoUuids" separator="," open="(" close=")" item="repoUuid">
                    #{repoUuid}
                </foreach>
            </if>
        </where>
        ORDER BY commit_date ASC LIMIT 1
    </select>

    <select id="getMinMaxScannedCommitDate" resultType="java.sql.Timestamp">
        SELECT commit_time
        FROM commit
        WHERE commit_id = (SELECT commit_id
        FROM scan_result
        WHERE commit_date =
        (SELECT
        <if test="isMin">
            MIN(commit_date)
        </if>
        <if test="!isMin">
            MAX(commit_date)
        </if>
        FROM scan_result
        WHERE repo_uuid = #{repoUuid}
        AND category = #{tool}
        LIMIT 1))
    </select>

    <select id="getScannedCommits" resultMap="commit">
        SELECT repo_uuid, commit_id, commit_date, developer, parent_commit_id as parent_commit
        FROM scan_result
        WHERE repo_uuid = #{repoUuid}
    </select>

    <select id="getScannedCommitsWithParents" resultMap="commit">
        SELECT sr.repo_uuid, sr.commit_id, sr.commit_date, sr.developer, parent_commit
        FROM scan_result sr
        LEFT JOIN commit c ON sr.commit_id = c.commit_id
        WHERE sr.repo_uuid = #{repoUuid}
    </select>
</mapper>
